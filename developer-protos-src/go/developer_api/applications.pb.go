// applications.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.22.2
// source: applications.proto

package developer_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PUBLISHSTATUS int32

const (
	PUBLISHSTATUS_PUBLISHED   PUBLISHSTATUS = 0
	PUBLISHSTATUS_UNPUBLISHED PUBLISHSTATUS = 1
)

// Enum value maps for PUBLISHSTATUS.
var (
	PUBLISHSTATUS_name = map[int32]string{
		0: "PUBLISHED",
		1: "UNPUBLISHED",
	}
	PUBLISHSTATUS_value = map[string]int32{
		"PUBLISHED":   0,
		"UNPUBLISHED": 1,
	}
)

func (x PUBLISHSTATUS) Enum() *PUBLISHSTATUS {
	p := new(PUBLISHSTATUS)
	*p = x
	return p
}

func (x PUBLISHSTATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PUBLISHSTATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_applications_proto_enumTypes[0].Descriptor()
}

func (PUBLISHSTATUS) Type() protoreflect.EnumType {
	return &file_applications_proto_enumTypes[0]
}

func (x PUBLISHSTATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PUBLISHSTATUS.Descriptor instead.
func (PUBLISHSTATUS) EnumDescriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{0}
}

type LISTINGSTATUS int32

const (
	LISTINGSTATUS_LISTED   LISTINGSTATUS = 0
	LISTINGSTATUS_UNLISTED LISTINGSTATUS = 1
)

// Enum value maps for LISTINGSTATUS.
var (
	LISTINGSTATUS_name = map[int32]string{
		0: "LISTED",
		1: "UNLISTED",
	}
	LISTINGSTATUS_value = map[string]int32{
		"LISTED":   0,
		"UNLISTED": 1,
	}
)

func (x LISTINGSTATUS) Enum() *LISTINGSTATUS {
	p := new(LISTINGSTATUS)
	*p = x
	return p
}

func (x LISTINGSTATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LISTINGSTATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_applications_proto_enumTypes[1].Descriptor()
}

func (LISTINGSTATUS) Type() protoreflect.EnumType {
	return &file_applications_proto_enumTypes[1]
}

func (x LISTINGSTATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LISTINGSTATUS.Descriptor instead.
func (LISTINGSTATUS) EnumDescriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{1}
}

type AppIndexRequest_ORDER_BYS int32

const (
	AppIndexRequest_DESC AppIndexRequest_ORDER_BYS = 0
	AppIndexRequest_ASC  AppIndexRequest_ORDER_BYS = 1
)

// Enum value maps for AppIndexRequest_ORDER_BYS.
var (
	AppIndexRequest_ORDER_BYS_name = map[int32]string{
		0: "DESC",
		1: "ASC",
	}
	AppIndexRequest_ORDER_BYS_value = map[string]int32{
		"DESC": 0,
		"ASC":  1,
	}
)

func (x AppIndexRequest_ORDER_BYS) Enum() *AppIndexRequest_ORDER_BYS {
	p := new(AppIndexRequest_ORDER_BYS)
	*p = x
	return p
}

func (x AppIndexRequest_ORDER_BYS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppIndexRequest_ORDER_BYS) Descriptor() protoreflect.EnumDescriptor {
	return file_applications_proto_enumTypes[2].Descriptor()
}

func (AppIndexRequest_ORDER_BYS) Type() protoreflect.EnumType {
	return &file_applications_proto_enumTypes[2]
}

func (x AppIndexRequest_ORDER_BYS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppIndexRequest_ORDER_BYS.Descriptor instead.
func (AppIndexRequest_ORDER_BYS) EnumDescriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{0, 0}
}

type AppIndexRequest_VISIBILITY int32

const (
	AppIndexRequest_LISTED      AppIndexRequest_VISIBILITY = 0
	AppIndexRequest_UNLISTED    AppIndexRequest_VISIBILITY = 1
	AppIndexRequest_UNPUBLISHED AppIndexRequest_VISIBILITY = 2
)

// Enum value maps for AppIndexRequest_VISIBILITY.
var (
	AppIndexRequest_VISIBILITY_name = map[int32]string{
		0: "LISTED",
		1: "UNLISTED",
		2: "UNPUBLISHED",
	}
	AppIndexRequest_VISIBILITY_value = map[string]int32{
		"LISTED":      0,
		"UNLISTED":    1,
		"UNPUBLISHED": 2,
	}
)

func (x AppIndexRequest_VISIBILITY) Enum() *AppIndexRequest_VISIBILITY {
	p := new(AppIndexRequest_VISIBILITY)
	*p = x
	return p
}

func (x AppIndexRequest_VISIBILITY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppIndexRequest_VISIBILITY) Descriptor() protoreflect.EnumDescriptor {
	return file_applications_proto_enumTypes[3].Descriptor()
}

func (AppIndexRequest_VISIBILITY) Type() protoreflect.EnumType {
	return &file_applications_proto_enumTypes[3]
}

func (x AppIndexRequest_VISIBILITY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppIndexRequest_VISIBILITY.Descriptor instead.
func (AppIndexRequest_VISIBILITY) EnumDescriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{0, 1}
}

type Application_MODES int32

const (
	Application_EMBEDDED      Application_MODES = 0
	Application_EXTERNAL      Application_MODES = 1
	Application_SALE_CHANNEL  Application_MODES = 2
	Application_CONTACT_SALES Application_MODES = 3
	Application_ERP           Application_MODES = 4
)

// Enum value maps for Application_MODES.
var (
	Application_MODES_name = map[int32]string{
		0: "EMBEDDED",
		1: "EXTERNAL",
		2: "SALE_CHANNEL",
		3: "CONTACT_SALES",
		4: "ERP",
	}
	Application_MODES_value = map[string]int32{
		"EMBEDDED":      0,
		"EXTERNAL":      1,
		"SALE_CHANNEL":  2,
		"CONTACT_SALES": 3,
		"ERP":           4,
	}
)

func (x Application_MODES) Enum() *Application_MODES {
	p := new(Application_MODES)
	*p = x
	return p
}

func (x Application_MODES) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Application_MODES) Descriptor() protoreflect.EnumDescriptor {
	return file_applications_proto_enumTypes[4].Descriptor()
}

func (Application_MODES) Type() protoreflect.EnumType {
	return &file_applications_proto_enumTypes[4]
}

func (x Application_MODES) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Application_MODES.Descriptor instead.
func (Application_MODES) EnumDescriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{9, 0}
}

type Application_VISIBILITY int32

const (
	Application_LISTED      Application_VISIBILITY = 0
	Application_UNLISTED    Application_VISIBILITY = 1
	Application_UNPUBLISHED Application_VISIBILITY = 2
)

// Enum value maps for Application_VISIBILITY.
var (
	Application_VISIBILITY_name = map[int32]string{
		0: "LISTED",
		1: "UNLISTED",
		2: "UNPUBLISHED",
	}
	Application_VISIBILITY_value = map[string]int32{
		"LISTED":      0,
		"UNLISTED":    1,
		"UNPUBLISHED": 2,
	}
)

func (x Application_VISIBILITY) Enum() *Application_VISIBILITY {
	p := new(Application_VISIBILITY)
	*p = x
	return p
}

func (x Application_VISIBILITY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Application_VISIBILITY) Descriptor() protoreflect.EnumDescriptor {
	return file_applications_proto_enumTypes[5].Descriptor()
}

func (Application_VISIBILITY) Type() protoreflect.EnumType {
	return &file_applications_proto_enumTypes[5]
}

func (x Application_VISIBILITY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Application_VISIBILITY.Descriptor instead.
func (Application_VISIBILITY) EnumDescriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{9, 1}
}

type Application_STATUS int32

const (
	Application_UNKNOWN    Application_STATUS = 0
	Application_DECLINED   Application_STATUS = 1
	Application_LIVE       Application_STATUS = 2
	Application_REVIEWING  Application_STATUS = 3
	Application_SUBMITTED  Application_STATUS = 4
	Application_DRAFT      Application_STATUS = 5
	Application_DEPRECATED Application_STATUS = 6
)

// Enum value maps for Application_STATUS.
var (
	Application_STATUS_name = map[int32]string{
		0: "UNKNOWN",
		1: "DECLINED",
		2: "LIVE",
		3: "REVIEWING",
		4: "SUBMITTED",
		5: "DRAFT",
		6: "DEPRECATED",
	}
	Application_STATUS_value = map[string]int32{
		"UNKNOWN":    0,
		"DECLINED":   1,
		"LIVE":       2,
		"REVIEWING":  3,
		"SUBMITTED":  4,
		"DRAFT":      5,
		"DEPRECATED": 6,
	}
)

func (x Application_STATUS) Enum() *Application_STATUS {
	p := new(Application_STATUS)
	*p = x
	return p
}

func (x Application_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Application_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_applications_proto_enumTypes[6].Descriptor()
}

func (Application_STATUS) Type() protoreflect.EnumType {
	return &file_applications_proto_enumTypes[6]
}

func (x Application_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Application_STATUS.Descriptor instead.
func (Application_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{9, 2}
}

type Application_InstallationContactType int32

const (
	Application_INTERCOM Application_InstallationContactType = 0
	Application_EMAIL    Application_InstallationContactType = 1
)

// Enum value maps for Application_InstallationContactType.
var (
	Application_InstallationContactType_name = map[int32]string{
		0: "INTERCOM",
		1: "EMAIL",
	}
	Application_InstallationContactType_value = map[string]int32{
		"INTERCOM": 0,
		"EMAIL":    1,
	}
)

func (x Application_InstallationContactType) Enum() *Application_InstallationContactType {
	p := new(Application_InstallationContactType)
	*p = x
	return p
}

func (x Application_InstallationContactType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Application_InstallationContactType) Descriptor() protoreflect.EnumDescriptor {
	return file_applications_proto_enumTypes[7].Descriptor()
}

func (Application_InstallationContactType) Type() protoreflect.EnumType {
	return &file_applications_proto_enumTypes[7]
}

func (x Application_InstallationContactType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Application_InstallationContactType.Descriptor instead.
func (Application_InstallationContactType) EnumDescriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{9, 3}
}

type DevOauthApplication_MODES int32

const (
	DevOauthApplication_EMBEDDED      DevOauthApplication_MODES = 0
	DevOauthApplication_EXTERNAL      DevOauthApplication_MODES = 1
	DevOauthApplication_SALE_CHANNEL  DevOauthApplication_MODES = 2
	DevOauthApplication_CONTACT_SALES DevOauthApplication_MODES = 3
	DevOauthApplication_ERP           DevOauthApplication_MODES = 4
)

// Enum value maps for DevOauthApplication_MODES.
var (
	DevOauthApplication_MODES_name = map[int32]string{
		0: "EMBEDDED",
		1: "EXTERNAL",
		2: "SALE_CHANNEL",
		3: "CONTACT_SALES",
		4: "ERP",
	}
	DevOauthApplication_MODES_value = map[string]int32{
		"EMBEDDED":      0,
		"EXTERNAL":      1,
		"SALE_CHANNEL":  2,
		"CONTACT_SALES": 3,
		"ERP":           4,
	}
)

func (x DevOauthApplication_MODES) Enum() *DevOauthApplication_MODES {
	p := new(DevOauthApplication_MODES)
	*p = x
	return p
}

func (x DevOauthApplication_MODES) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DevOauthApplication_MODES) Descriptor() protoreflect.EnumDescriptor {
	return file_applications_proto_enumTypes[8].Descriptor()
}

func (DevOauthApplication_MODES) Type() protoreflect.EnumType {
	return &file_applications_proto_enumTypes[8]
}

func (x DevOauthApplication_MODES) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DevOauthApplication_MODES.Descriptor instead.
func (DevOauthApplication_MODES) EnumDescriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{15, 0}
}

type DevOauthApplication_VISIBILITY int32

const (
	DevOauthApplication_LISTED      DevOauthApplication_VISIBILITY = 0
	DevOauthApplication_UNLISTED    DevOauthApplication_VISIBILITY = 1
	DevOauthApplication_UNPUBLISHED DevOauthApplication_VISIBILITY = 2
)

// Enum value maps for DevOauthApplication_VISIBILITY.
var (
	DevOauthApplication_VISIBILITY_name = map[int32]string{
		0: "LISTED",
		1: "UNLISTED",
		2: "UNPUBLISHED",
	}
	DevOauthApplication_VISIBILITY_value = map[string]int32{
		"LISTED":      0,
		"UNLISTED":    1,
		"UNPUBLISHED": 2,
	}
)

func (x DevOauthApplication_VISIBILITY) Enum() *DevOauthApplication_VISIBILITY {
	p := new(DevOauthApplication_VISIBILITY)
	*p = x
	return p
}

func (x DevOauthApplication_VISIBILITY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DevOauthApplication_VISIBILITY) Descriptor() protoreflect.EnumDescriptor {
	return file_applications_proto_enumTypes[9].Descriptor()
}

func (DevOauthApplication_VISIBILITY) Type() protoreflect.EnumType {
	return &file_applications_proto_enumTypes[9]
}

func (x DevOauthApplication_VISIBILITY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DevOauthApplication_VISIBILITY.Descriptor instead.
func (DevOauthApplication_VISIBILITY) EnumDescriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{15, 1}
}

type DevOauthApplication_STATUS int32

const (
	DevOauthApplication_UNKNOWN    DevOauthApplication_STATUS = 0
	DevOauthApplication_DECLINED   DevOauthApplication_STATUS = 1
	DevOauthApplication_LIVE       DevOauthApplication_STATUS = 2
	DevOauthApplication_REVIEWING  DevOauthApplication_STATUS = 3
	DevOauthApplication_SUBMITTED  DevOauthApplication_STATUS = 4
	DevOauthApplication_DRAFT      DevOauthApplication_STATUS = 5
	DevOauthApplication_DEPRECATED DevOauthApplication_STATUS = 6
)

// Enum value maps for DevOauthApplication_STATUS.
var (
	DevOauthApplication_STATUS_name = map[int32]string{
		0: "UNKNOWN",
		1: "DECLINED",
		2: "LIVE",
		3: "REVIEWING",
		4: "SUBMITTED",
		5: "DRAFT",
		6: "DEPRECATED",
	}
	DevOauthApplication_STATUS_value = map[string]int32{
		"UNKNOWN":    0,
		"DECLINED":   1,
		"LIVE":       2,
		"REVIEWING":  3,
		"SUBMITTED":  4,
		"DRAFT":      5,
		"DEPRECATED": 6,
	}
)

func (x DevOauthApplication_STATUS) Enum() *DevOauthApplication_STATUS {
	p := new(DevOauthApplication_STATUS)
	*p = x
	return p
}

func (x DevOauthApplication_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DevOauthApplication_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_applications_proto_enumTypes[10].Descriptor()
}

func (DevOauthApplication_STATUS) Type() protoreflect.EnumType {
	return &file_applications_proto_enumTypes[10]
}

func (x DevOauthApplication_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DevOauthApplication_STATUS.Descriptor instead.
func (DevOauthApplication_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{15, 2}
}

type AppBlockUpdateRequest_AppBlockUpdateType int32

const (
	AppBlockUpdateRequest_ADD    AppBlockUpdateRequest_AppBlockUpdateType = 0
	AppBlockUpdateRequest_UPDATE AppBlockUpdateRequest_AppBlockUpdateType = 1
	AppBlockUpdateRequest_DELETE AppBlockUpdateRequest_AppBlockUpdateType = 2
)

// Enum value maps for AppBlockUpdateRequest_AppBlockUpdateType.
var (
	AppBlockUpdateRequest_AppBlockUpdateType_name = map[int32]string{
		0: "ADD",
		1: "UPDATE",
		2: "DELETE",
	}
	AppBlockUpdateRequest_AppBlockUpdateType_value = map[string]int32{
		"ADD":    0,
		"UPDATE": 1,
		"DELETE": 2,
	}
)

func (x AppBlockUpdateRequest_AppBlockUpdateType) Enum() *AppBlockUpdateRequest_AppBlockUpdateType {
	p := new(AppBlockUpdateRequest_AppBlockUpdateType)
	*p = x
	return p
}

func (x AppBlockUpdateRequest_AppBlockUpdateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppBlockUpdateRequest_AppBlockUpdateType) Descriptor() protoreflect.EnumDescriptor {
	return file_applications_proto_enumTypes[11].Descriptor()
}

func (AppBlockUpdateRequest_AppBlockUpdateType) Type() protoreflect.EnumType {
	return &file_applications_proto_enumTypes[11]
}

func (x AppBlockUpdateRequest_AppBlockUpdateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppBlockUpdateRequest_AppBlockUpdateType.Descriptor instead.
func (AppBlockUpdateRequest_AppBlockUpdateType) EnumDescriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{23, 0}
}

type AppScriptUpdateRequest_AppScriptUpdateType int32

const (
	AppScriptUpdateRequest_ADD    AppScriptUpdateRequest_AppScriptUpdateType = 0
	AppScriptUpdateRequest_UPDATE AppScriptUpdateRequest_AppScriptUpdateType = 1
	AppScriptUpdateRequest_DELETE AppScriptUpdateRequest_AppScriptUpdateType = 2
)

// Enum value maps for AppScriptUpdateRequest_AppScriptUpdateType.
var (
	AppScriptUpdateRequest_AppScriptUpdateType_name = map[int32]string{
		0: "ADD",
		1: "UPDATE",
		2: "DELETE",
	}
	AppScriptUpdateRequest_AppScriptUpdateType_value = map[string]int32{
		"ADD":    0,
		"UPDATE": 1,
		"DELETE": 2,
	}
)

func (x AppScriptUpdateRequest_AppScriptUpdateType) Enum() *AppScriptUpdateRequest_AppScriptUpdateType {
	p := new(AppScriptUpdateRequest_AppScriptUpdateType)
	*p = x
	return p
}

func (x AppScriptUpdateRequest_AppScriptUpdateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppScriptUpdateRequest_AppScriptUpdateType) Descriptor() protoreflect.EnumDescriptor {
	return file_applications_proto_enumTypes[12].Descriptor()
}

func (AppScriptUpdateRequest_AppScriptUpdateType) Type() protoreflect.EnumType {
	return &file_applications_proto_enumTypes[12]
}

func (x AppScriptUpdateRequest_AppScriptUpdateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppScriptUpdateRequest_AppScriptUpdateType.Descriptor instead.
func (AppScriptUpdateRequest_AppScriptUpdateType) EnumDescriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{24, 0}
}

type AdminLinkUpdateRequest_AdminLinkUpdateType int32

const (
	AdminLinkUpdateRequest_ADD    AdminLinkUpdateRequest_AdminLinkUpdateType = 0
	AdminLinkUpdateRequest_UPDATE AdminLinkUpdateRequest_AdminLinkUpdateType = 1
	AdminLinkUpdateRequest_DELETE AdminLinkUpdateRequest_AdminLinkUpdateType = 2
)

// Enum value maps for AdminLinkUpdateRequest_AdminLinkUpdateType.
var (
	AdminLinkUpdateRequest_AdminLinkUpdateType_name = map[int32]string{
		0: "ADD",
		1: "UPDATE",
		2: "DELETE",
	}
	AdminLinkUpdateRequest_AdminLinkUpdateType_value = map[string]int32{
		"ADD":    0,
		"UPDATE": 1,
		"DELETE": 2,
	}
)

func (x AdminLinkUpdateRequest_AdminLinkUpdateType) Enum() *AdminLinkUpdateRequest_AdminLinkUpdateType {
	p := new(AdminLinkUpdateRequest_AdminLinkUpdateType)
	*p = x
	return p
}

func (x AdminLinkUpdateRequest_AdminLinkUpdateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdminLinkUpdateRequest_AdminLinkUpdateType) Descriptor() protoreflect.EnumDescriptor {
	return file_applications_proto_enumTypes[13].Descriptor()
}

func (AdminLinkUpdateRequest_AdminLinkUpdateType) Type() protoreflect.EnumType {
	return &file_applications_proto_enumTypes[13]
}

func (x AdminLinkUpdateRequest_AdminLinkUpdateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdminLinkUpdateRequest_AdminLinkUpdateType.Descriptor instead.
func (AdminLinkUpdateRequest_AdminLinkUpdateType) EnumDescriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{28, 0}
}

type AdminEmbeddedAppUpdateRequest_AdminEmbeddedAppUpdateType int32

const (
	AdminEmbeddedAppUpdateRequest_ADD    AdminEmbeddedAppUpdateRequest_AdminEmbeddedAppUpdateType = 0
	AdminEmbeddedAppUpdateRequest_UPDATE AdminEmbeddedAppUpdateRequest_AdminEmbeddedAppUpdateType = 1
	AdminEmbeddedAppUpdateRequest_DELETE AdminEmbeddedAppUpdateRequest_AdminEmbeddedAppUpdateType = 2
)

// Enum value maps for AdminEmbeddedAppUpdateRequest_AdminEmbeddedAppUpdateType.
var (
	AdminEmbeddedAppUpdateRequest_AdminEmbeddedAppUpdateType_name = map[int32]string{
		0: "ADD",
		1: "UPDATE",
		2: "DELETE",
	}
	AdminEmbeddedAppUpdateRequest_AdminEmbeddedAppUpdateType_value = map[string]int32{
		"ADD":    0,
		"UPDATE": 1,
		"DELETE": 2,
	}
)

func (x AdminEmbeddedAppUpdateRequest_AdminEmbeddedAppUpdateType) Enum() *AdminEmbeddedAppUpdateRequest_AdminEmbeddedAppUpdateType {
	p := new(AdminEmbeddedAppUpdateRequest_AdminEmbeddedAppUpdateType)
	*p = x
	return p
}

func (x AdminEmbeddedAppUpdateRequest_AdminEmbeddedAppUpdateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdminEmbeddedAppUpdateRequest_AdminEmbeddedAppUpdateType) Descriptor() protoreflect.EnumDescriptor {
	return file_applications_proto_enumTypes[14].Descriptor()
}

func (AdminEmbeddedAppUpdateRequest_AdminEmbeddedAppUpdateType) Type() protoreflect.EnumType {
	return &file_applications_proto_enumTypes[14]
}

func (x AdminEmbeddedAppUpdateRequest_AdminEmbeddedAppUpdateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdminEmbeddedAppUpdateRequest_AdminEmbeddedAppUpdateType.Descriptor instead.
func (AdminEmbeddedAppUpdateRequest_AdminEmbeddedAppUpdateType) EnumDescriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{31, 0}
}

type AppIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PerPage                  int32                      `protobuf:"varint,1,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	Page                     int32                      `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	BeforeToken              string                     `protobuf:"bytes,3,opt,name=before_token,json=beforeToken,proto3" json:"before_token,omitempty"`
	AfterToken               string                     `protobuf:"bytes,4,opt,name=after_token,json=afterToken,proto3" json:"after_token,omitempty"`
	OrderBy                  AppIndexRequest_ORDER_BYS  `protobuf:"varint,5,opt,name=order_by,json=orderBy,proto3,enum=DeveloperApi.AppIndexRequest_ORDER_BYS" json:"order_by,omitempty"`
	DeveloperId              string                     `protobuf:"bytes,10,opt,name=developer_id,json=developerId,proto3" json:"developer_id,omitempty"`
	RenderScopes             []string                   `protobuf:"bytes,11,rep,name=render_scopes,json=renderScopes,proto3" json:"render_scopes,omitempty"`
	DoorkeeperApplicationId  string                     `protobuf:"bytes,12,opt,name=doorkeeper_application_id,json=doorkeeperApplicationId,proto3" json:"doorkeeper_application_id,omitempty"`
	Visibility               AppIndexRequest_VISIBILITY `protobuf:"varint,13,opt,name=visibility,proto3,enum=DeveloperApi.AppIndexRequest_VISIBILITY" json:"visibility,omitempty"`
	MerchantId               string                     `protobuf:"bytes,15,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	Status                   string                     `protobuf:"bytes,16,opt,name=status,proto3" json:"status,omitempty"`
	Slug                     string                     `protobuf:"bytes,17,opt,name=slug,proto3" json:"slug,omitempty"`
	BaseCurrencyCode         string                     `protobuf:"bytes,18,opt,name=base_currency_code,json=baseCurrencyCode,proto3" json:"base_currency_code,omitempty"`
	SubscriptionCurrencyCode string                     `protobuf:"bytes,19,opt,name=subscription_currency_code,json=subscriptionCurrencyCode,proto3" json:"subscription_currency_code,omitempty"`
	PerformerId              string                     `protobuf:"bytes,20,opt,name=performer_id,json=performerId,proto3" json:"performer_id,omitempty"`
	CategoryIds              []string                   `protobuf:"bytes,21,rep,name=category_ids,json=categoryIds,proto3" json:"category_ids,omitempty"`
}

func (x *AppIndexRequest) Reset() {
	*x = AppIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppIndexRequest) ProtoMessage() {}

func (x *AppIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppIndexRequest.ProtoReflect.Descriptor instead.
func (*AppIndexRequest) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{0}
}

func (x *AppIndexRequest) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *AppIndexRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *AppIndexRequest) GetBeforeToken() string {
	if x != nil {
		return x.BeforeToken
	}
	return ""
}

func (x *AppIndexRequest) GetAfterToken() string {
	if x != nil {
		return x.AfterToken
	}
	return ""
}

func (x *AppIndexRequest) GetOrderBy() AppIndexRequest_ORDER_BYS {
	if x != nil {
		return x.OrderBy
	}
	return AppIndexRequest_DESC
}

func (x *AppIndexRequest) GetDeveloperId() string {
	if x != nil {
		return x.DeveloperId
	}
	return ""
}

func (x *AppIndexRequest) GetRenderScopes() []string {
	if x != nil {
		return x.RenderScopes
	}
	return nil
}

func (x *AppIndexRequest) GetDoorkeeperApplicationId() string {
	if x != nil {
		return x.DoorkeeperApplicationId
	}
	return ""
}

func (x *AppIndexRequest) GetVisibility() AppIndexRequest_VISIBILITY {
	if x != nil {
		return x.Visibility
	}
	return AppIndexRequest_LISTED
}

func (x *AppIndexRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *AppIndexRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AppIndexRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *AppIndexRequest) GetBaseCurrencyCode() string {
	if x != nil {
		return x.BaseCurrencyCode
	}
	return ""
}

func (x *AppIndexRequest) GetSubscriptionCurrencyCode() string {
	if x != nil {
		return x.SubscriptionCurrencyCode
	}
	return ""
}

func (x *AppIndexRequest) GetPerformerId() string {
	if x != nil {
		return x.PerformerId
	}
	return ""
}

func (x *AppIndexRequest) GetCategoryIds() []string {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

type AppIndexReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items      []*Application   `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Pagination *PaginationReply `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *AppIndexReply) Reset() {
	*x = AppIndexReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppIndexReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppIndexReply) ProtoMessage() {}

func (x *AppIndexReply) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppIndexReply.ProtoReflect.Descriptor instead.
func (*AppIndexReply) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{1}
}

func (x *AppIndexReply) GetItems() []*Application {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *AppIndexReply) GetPagination() *PaginationReply {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type AppCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeveloperId  string   `protobuf:"bytes,1,opt,name=developer_id,json=developerId,proto3" json:"developer_id,omitempty"`
	PerformerId  string   `protobuf:"bytes,2,opt,name=performer_id,json=performerId,proto3" json:"performer_id,omitempty"`
	RenderScopes []string `protobuf:"bytes,3,rep,name=render_scopes,json=renderScopes,proto3" json:"render_scopes,omitempty"`
	AppName      string   `protobuf:"bytes,4,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
}

func (x *AppCreateRequest) Reset() {
	*x = AppCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppCreateRequest) ProtoMessage() {}

func (x *AppCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppCreateRequest.ProtoReflect.Descriptor instead.
func (*AppCreateRequest) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{2}
}

func (x *AppCreateRequest) GetDeveloperId() string {
	if x != nil {
		return x.DeveloperId
	}
	return ""
}

func (x *AppCreateRequest) GetPerformerId() string {
	if x != nil {
		return x.PerformerId
	}
	return ""
}

func (x *AppCreateRequest) GetRenderScopes() []string {
	if x != nil {
		return x.RenderScopes
	}
	return nil
}

func (x *AppCreateRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

type AppShowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Slug                     string   `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	RenderScopes             []string `protobuf:"bytes,11,rep,name=render_scopes,json=renderScopes,proto3" json:"render_scopes,omitempty"`
	MerchantId               string   `protobuf:"bytes,15,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	DeveloperId              string   `protobuf:"bytes,16,opt,name=developer_id,json=developerId,proto3" json:"developer_id,omitempty"`
	PerformerId              string   `protobuf:"bytes,17,opt,name=performer_id,json=performerId,proto3" json:"performer_id,omitempty"`
	BaseCurrencyCode         string   `protobuf:"bytes,18,opt,name=base_currency_code,json=baseCurrencyCode,proto3" json:"base_currency_code,omitempty"`
	SubscriptionCurrencyCode string   `protobuf:"bytes,19,opt,name=subscription_currency_code,json=subscriptionCurrencyCode,proto3" json:"subscription_currency_code,omitempty"`
}

func (x *AppShowRequest) Reset() {
	*x = AppShowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppShowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppShowRequest) ProtoMessage() {}

func (x *AppShowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppShowRequest.ProtoReflect.Descriptor instead.
func (*AppShowRequest) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{3}
}

func (x *AppShowRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AppShowRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *AppShowRequest) GetRenderScopes() []string {
	if x != nil {
		return x.RenderScopes
	}
	return nil
}

func (x *AppShowRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *AppShowRequest) GetDeveloperId() string {
	if x != nil {
		return x.DeveloperId
	}
	return ""
}

func (x *AppShowRequest) GetPerformerId() string {
	if x != nil {
		return x.PerformerId
	}
	return ""
}

func (x *AppShowRequest) GetBaseCurrencyCode() string {
	if x != nil {
		return x.BaseCurrencyCode
	}
	return ""
}

func (x *AppShowRequest) GetSubscriptionCurrencyCode() string {
	if x != nil {
		return x.SubscriptionCurrencyCode
	}
	return ""
}

type AppVersionIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	VersionNumbers []string `protobuf:"bytes,2,rep,name=version_numbers,json=versionNumbers,proto3" json:"version_numbers,omitempty"`
	PerformerId    string   `protobuf:"bytes,3,opt,name=performer_id,json=performerId,proto3" json:"performer_id,omitempty"`
}

func (x *AppVersionIndexRequest) Reset() {
	*x = AppVersionIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppVersionIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppVersionIndexRequest) ProtoMessage() {}

func (x *AppVersionIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppVersionIndexRequest.ProtoReflect.Descriptor instead.
func (*AppVersionIndexRequest) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{4}
}

func (x *AppVersionIndexRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AppVersionIndexRequest) GetVersionNumbers() []string {
	if x != nil {
		return x.VersionNumbers
	}
	return nil
}

func (x *AppVersionIndexRequest) GetPerformerId() string {
	if x != nil {
		return x.PerformerId
	}
	return ""
}

type CurrencyToPriceMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values map[string]string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CurrencyToPriceMap) Reset() {
	*x = CurrencyToPriceMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyToPriceMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyToPriceMap) ProtoMessage() {}

func (x *CurrencyToPriceMap) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyToPriceMap.ProtoReflect.Descriptor instead.
func (*CurrencyToPriceMap) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{5}
}

func (x *CurrencyToPriceMap) GetValues() map[string]string {
	if x != nil {
		return x.Values
	}
	return nil
}

type AppUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                              string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DeveloperId                     string                     `protobuf:"bytes,2,opt,name=developer_id,json=developerId,proto3" json:"developer_id,omitempty"`
	PerformerId                     string                     `protobuf:"bytes,3,opt,name=performer_id,json=performerId,proto3" json:"performer_id,omitempty"`
	Modes                           []Application_MODES        `protobuf:"varint,10,rep,packed,name=modes,proto3,enum=DeveloperApi.Application_MODES" json:"modes,omitempty"`
	Visibility                      Application_VISIBILITY     `protobuf:"varint,35,opt,name=visibility,proto3,enum=DeveloperApi.Application_VISIBILITY" json:"visibility,omitempty"`
	PublishStatus                   PUBLISHSTATUS              `protobuf:"varint,36,opt,name=publish_status,json=publishStatus,proto3,enum=DeveloperApi.PUBLISHSTATUS" json:"publish_status,omitempty"`
	ListingStatus                   LISTINGSTATUS              `protobuf:"varint,37,opt,name=listing_status,json=listingStatus,proto3,enum=DeveloperApi.LISTINGSTATUS" json:"listing_status,omitempty"`
	VersionNumber                   string                     `protobuf:"bytes,72,opt,name=version_number,json=versionNumber,proto3" json:"version_number,omitempty"`
	NameTranslations                map[string]string          `protobuf:"bytes,79,rep,name=name_translations,json=nameTranslations,proto3" json:"name_translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SummaryTranslations             map[string]string          `protobuf:"bytes,80,rep,name=summary_translations,json=summaryTranslations,proto3" json:"summary_translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DescriptionTranslations         map[string]string          `protobuf:"bytes,81,rep,name=description_translations,json=descriptionTranslations,proto3" json:"description_translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	InstructionTranslations         map[string]string          `protobuf:"bytes,82,rep,name=instruction_translations,json=instructionTranslations,proto3" json:"instruction_translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CategoryIds                     []string                   `protobuf:"bytes,83,rep,name=category_ids,json=categoryIds,proto3" json:"category_ids,omitempty"`
	LogoMediaUrlTranslations        map[string]string          `protobuf:"bytes,84,rep,name=logo_media_url_translations,json=logoMediaUrlTranslations,proto3" json:"logo_media_url_translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CoverMediaUrlTranslations       map[string]string          `protobuf:"bytes,85,rep,name=cover_media_url_translations,json=coverMediaUrlTranslations,proto3" json:"cover_media_url_translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ScreenshotMediaUrlsTranslations map[string]*ScreenshotUrls `protobuf:"bytes,86,rep,name=screenshot_media_urls_translations,json=screenshotMediaUrlsTranslations,proto3" json:"screenshot_media_urls_translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PrivacyPolicyUrl                string                     `protobuf:"bytes,87,opt,name=privacy_policy_url,json=privacyPolicyUrl,proto3" json:"privacy_policy_url,omitempty"`
	SupportEmail                    string                     `protobuf:"bytes,88,opt,name=support_email,json=supportEmail,proto3" json:"support_email,omitempty"`
	Regions                         []string                   `protobuf:"bytes,89,rep,name=regions,proto3" json:"regions,omitempty"`
	Languages                       []string                   `protobuf:"bytes,90,rep,name=languages,proto3" json:"languages,omitempty"`
	ExternalUrl                     string                     `protobuf:"bytes,91,opt,name=external_url,json=externalUrl,proto3" json:"external_url,omitempty"`
	EmbeddedUrl                     string                     `protobuf:"bytes,92,opt,name=embedded_url,json=embeddedUrl,proto3" json:"embedded_url,omitempty"`
	GrantsRequired                  map[string]*ListOfString   `protobuf:"bytes,93,rep,name=grants_required,json=grantsRequired,proto3" json:"grants_required,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Scopes                          string                     `protobuf:"bytes,94,opt,name=scopes,proto3" json:"scopes,omitempty"`
	RenderScopes                    []string                   `protobuf:"bytes,95,rep,name=render_scopes,json=renderScopes,proto3" json:"render_scopes,omitempty"`
	SupportedVersions               []string                   `protobuf:"bytes,100,rep,name=supported_versions,json=supportedVersions,proto3" json:"supported_versions,omitempty"`
	Name                            string                     `protobuf:"bytes,101,opt,name=name,proto3" json:"name,omitempty"`
	RedirectUri                     string                     `protobuf:"bytes,102,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`
	SeoSlug                         string                     `protobuf:"bytes,103,opt,name=seo_slug,json=seoSlug,proto3" json:"seo_slug,omitempty"`
	SeoKeywords                     string                     `protobuf:"bytes,104,opt,name=seo_keywords,json=seoKeywords,proto3" json:"seo_keywords,omitempty"`
	SeoTitleTranslations            map[string]string          `protobuf:"bytes,105,rep,name=seo_title_translations,json=seoTitleTranslations,proto3" json:"seo_title_translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SeoDescriptionTranslations      map[string]string          `protobuf:"bytes,106,rep,name=seo_description_translations,json=seoDescriptionTranslations,proto3" json:"seo_description_translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FaqLinkTranslations             map[string]string          `protobuf:"bytes,107,rep,name=faq_link_translations,json=faqLinkTranslations,proto3" json:"faq_link_translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	InstallSuccessMsgTranslations   map[string]string          `protobuf:"bytes,108,rep,name=install_success_msg_translations,json=installSuccessMsgTranslations,proto3" json:"install_success_msg_translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Key                             string                     `protobuf:"bytes,140,opt,name=key,proto3" json:"key,omitempty"`
	RolloutKeys                     []string                   `protobuf:"bytes,141,rep,name=rollout_keys,json=rolloutKeys,proto3" json:"rollout_keys,omitempty"`
	AvailabilityRolloutKey          string                     `protobuf:"bytes,142,opt,name=availability_rollout_key,json=availabilityRolloutKey,proto3" json:"availability_rollout_key,omitempty"`
	InstallType                     string                     `protobuf:"bytes,146,opt,name=install_type,json=installType,proto3" json:"install_type,omitempty"`
	RequiresSetup                   bool                       `protobuf:"varint,147,opt,name=requires_setup,json=requiresSetup,proto3" json:"requires_setup,omitempty"`
	ActionButtonSettings            *ActionButtonSettings      `protobuf:"bytes,148,opt,name=action_button_settings,json=actionButtonSettings,proto3" json:"action_button_settings,omitempty"`
	// gRPC inability to retain key for empty array, use map as a solution
	AvailableBaseCurrencyCodes         map[string]bool                     `protobuf:"bytes,150,rep,name=available_base_currency_codes,json=availableBaseCurrencyCodes,proto3" json:"available_base_currency_codes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AvailableSubscriptionCurrencyCodes map[string]bool                     `protobuf:"bytes,151,rep,name=available_subscription_currency_codes,json=availableSubscriptionCurrencyCodes,proto3" json:"available_subscription_currency_codes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	InstallationContactType            Application_InstallationContactType `protobuf:"varint,152,opt,name=installation_contact_type,json=installationContactType,proto3,enum=DeveloperApi.Application_InstallationContactType" json:"installation_contact_type,omitempty"`
	InstallationContactEmail           string                              `protobuf:"bytes,153,opt,name=installation_contact_email,json=installationContactEmail,proto3" json:"installation_contact_email,omitempty"`
	Uninstallable                      bool                                `protobuf:"varint,154,opt,name=uninstallable,proto3" json:"uninstallable,omitempty"`
	PurchasableContext                 map[string]string                   `protobuf:"bytes,155,rep,name=purchasable_context,json=purchasableContext,proto3" json:"purchasable_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	WhitelistedMerchantIds             string                              `protobuf:"bytes,156,opt,name=whitelisted_merchant_ids,json=whitelistedMerchantIds,proto3" json:"whitelisted_merchant_ids,omitempty"`
	EmergencyDeveloperName             string                              `protobuf:"bytes,157,opt,name=emergency_developer_name,json=emergencyDeveloperName,proto3" json:"emergency_developer_name,omitempty"`
	EmergencyDeveloperEmail            string                              `protobuf:"bytes,158,opt,name=emergency_developer_email,json=emergencyDeveloperEmail,proto3" json:"emergency_developer_email,omitempty"`
	PurchasableContextWithAllCycles    map[string]*CurrencyToPriceMap      `protobuf:"bytes,159,rep,name=purchasable_context_with_all_cycles,json=purchasableContextWithAllCycles,proto3" json:"purchasable_context_with_all_cycles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BusinessName                       string                              `protobuf:"bytes,160,opt,name=business_name,json=businessName,proto3" json:"business_name,omitempty"`
	AppTermAndConditions               string                              `protobuf:"bytes,161,opt,name=app_term_and_conditions,json=appTermAndConditions,proto3" json:"app_term_and_conditions,omitempty"`
	IsFreeTrialable                    bool                                `protobuf:"varint,162,opt,name=is_free_trialable,json=isFreeTrialable,proto3" json:"is_free_trialable,omitempty"`
	// Deprecated: Do not use.
	AppBlock         *AppBlockUpdateRequest         `protobuf:"bytes,163,opt,name=app_block,json=appBlock,proto3" json:"app_block,omitempty"`
	AdminLink        *AdminLinkUpdateRequest        `protobuf:"bytes,164,opt,name=admin_link,json=adminLink,proto3" json:"admin_link,omitempty"`
	AdminEmbeddedApp *AdminEmbeddedAppUpdateRequest `protobuf:"bytes,165,opt,name=admin_embedded_app,json=adminEmbeddedApp,proto3" json:"admin_embedded_app,omitempty"`
	AppScript        *AppScriptUpdateRequest        `protobuf:"bytes,166,opt,name=app_script,json=appScript,proto3" json:"app_script,omitempty"`
}

func (x *AppUpdateRequest) Reset() {
	*x = AppUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppUpdateRequest) ProtoMessage() {}

func (x *AppUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppUpdateRequest.ProtoReflect.Descriptor instead.
func (*AppUpdateRequest) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{6}
}

func (x *AppUpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AppUpdateRequest) GetDeveloperId() string {
	if x != nil {
		return x.DeveloperId
	}
	return ""
}

func (x *AppUpdateRequest) GetPerformerId() string {
	if x != nil {
		return x.PerformerId
	}
	return ""
}

func (x *AppUpdateRequest) GetModes() []Application_MODES {
	if x != nil {
		return x.Modes
	}
	return nil
}

func (x *AppUpdateRequest) GetVisibility() Application_VISIBILITY {
	if x != nil {
		return x.Visibility
	}
	return Application_LISTED
}

func (x *AppUpdateRequest) GetPublishStatus() PUBLISHSTATUS {
	if x != nil {
		return x.PublishStatus
	}
	return PUBLISHSTATUS_PUBLISHED
}

func (x *AppUpdateRequest) GetListingStatus() LISTINGSTATUS {
	if x != nil {
		return x.ListingStatus
	}
	return LISTINGSTATUS_LISTED
}

func (x *AppUpdateRequest) GetVersionNumber() string {
	if x != nil {
		return x.VersionNumber
	}
	return ""
}

func (x *AppUpdateRequest) GetNameTranslations() map[string]string {
	if x != nil {
		return x.NameTranslations
	}
	return nil
}

func (x *AppUpdateRequest) GetSummaryTranslations() map[string]string {
	if x != nil {
		return x.SummaryTranslations
	}
	return nil
}

func (x *AppUpdateRequest) GetDescriptionTranslations() map[string]string {
	if x != nil {
		return x.DescriptionTranslations
	}
	return nil
}

func (x *AppUpdateRequest) GetInstructionTranslations() map[string]string {
	if x != nil {
		return x.InstructionTranslations
	}
	return nil
}

func (x *AppUpdateRequest) GetCategoryIds() []string {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

func (x *AppUpdateRequest) GetLogoMediaUrlTranslations() map[string]string {
	if x != nil {
		return x.LogoMediaUrlTranslations
	}
	return nil
}

func (x *AppUpdateRequest) GetCoverMediaUrlTranslations() map[string]string {
	if x != nil {
		return x.CoverMediaUrlTranslations
	}
	return nil
}

func (x *AppUpdateRequest) GetScreenshotMediaUrlsTranslations() map[string]*ScreenshotUrls {
	if x != nil {
		return x.ScreenshotMediaUrlsTranslations
	}
	return nil
}

func (x *AppUpdateRequest) GetPrivacyPolicyUrl() string {
	if x != nil {
		return x.PrivacyPolicyUrl
	}
	return ""
}

func (x *AppUpdateRequest) GetSupportEmail() string {
	if x != nil {
		return x.SupportEmail
	}
	return ""
}

func (x *AppUpdateRequest) GetRegions() []string {
	if x != nil {
		return x.Regions
	}
	return nil
}

func (x *AppUpdateRequest) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *AppUpdateRequest) GetExternalUrl() string {
	if x != nil {
		return x.ExternalUrl
	}
	return ""
}

func (x *AppUpdateRequest) GetEmbeddedUrl() string {
	if x != nil {
		return x.EmbeddedUrl
	}
	return ""
}

func (x *AppUpdateRequest) GetGrantsRequired() map[string]*ListOfString {
	if x != nil {
		return x.GrantsRequired
	}
	return nil
}

func (x *AppUpdateRequest) GetScopes() string {
	if x != nil {
		return x.Scopes
	}
	return ""
}

func (x *AppUpdateRequest) GetRenderScopes() []string {
	if x != nil {
		return x.RenderScopes
	}
	return nil
}

func (x *AppUpdateRequest) GetSupportedVersions() []string {
	if x != nil {
		return x.SupportedVersions
	}
	return nil
}

func (x *AppUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AppUpdateRequest) GetRedirectUri() string {
	if x != nil {
		return x.RedirectUri
	}
	return ""
}

func (x *AppUpdateRequest) GetSeoSlug() string {
	if x != nil {
		return x.SeoSlug
	}
	return ""
}

func (x *AppUpdateRequest) GetSeoKeywords() string {
	if x != nil {
		return x.SeoKeywords
	}
	return ""
}

func (x *AppUpdateRequest) GetSeoTitleTranslations() map[string]string {
	if x != nil {
		return x.SeoTitleTranslations
	}
	return nil
}

func (x *AppUpdateRequest) GetSeoDescriptionTranslations() map[string]string {
	if x != nil {
		return x.SeoDescriptionTranslations
	}
	return nil
}

func (x *AppUpdateRequest) GetFaqLinkTranslations() map[string]string {
	if x != nil {
		return x.FaqLinkTranslations
	}
	return nil
}

func (x *AppUpdateRequest) GetInstallSuccessMsgTranslations() map[string]string {
	if x != nil {
		return x.InstallSuccessMsgTranslations
	}
	return nil
}

func (x *AppUpdateRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AppUpdateRequest) GetRolloutKeys() []string {
	if x != nil {
		return x.RolloutKeys
	}
	return nil
}

func (x *AppUpdateRequest) GetAvailabilityRolloutKey() string {
	if x != nil {
		return x.AvailabilityRolloutKey
	}
	return ""
}

func (x *AppUpdateRequest) GetInstallType() string {
	if x != nil {
		return x.InstallType
	}
	return ""
}

func (x *AppUpdateRequest) GetRequiresSetup() bool {
	if x != nil {
		return x.RequiresSetup
	}
	return false
}

func (x *AppUpdateRequest) GetActionButtonSettings() *ActionButtonSettings {
	if x != nil {
		return x.ActionButtonSettings
	}
	return nil
}

func (x *AppUpdateRequest) GetAvailableBaseCurrencyCodes() map[string]bool {
	if x != nil {
		return x.AvailableBaseCurrencyCodes
	}
	return nil
}

func (x *AppUpdateRequest) GetAvailableSubscriptionCurrencyCodes() map[string]bool {
	if x != nil {
		return x.AvailableSubscriptionCurrencyCodes
	}
	return nil
}

func (x *AppUpdateRequest) GetInstallationContactType() Application_InstallationContactType {
	if x != nil {
		return x.InstallationContactType
	}
	return Application_INTERCOM
}

func (x *AppUpdateRequest) GetInstallationContactEmail() string {
	if x != nil {
		return x.InstallationContactEmail
	}
	return ""
}

func (x *AppUpdateRequest) GetUninstallable() bool {
	if x != nil {
		return x.Uninstallable
	}
	return false
}

func (x *AppUpdateRequest) GetPurchasableContext() map[string]string {
	if x != nil {
		return x.PurchasableContext
	}
	return nil
}

func (x *AppUpdateRequest) GetWhitelistedMerchantIds() string {
	if x != nil {
		return x.WhitelistedMerchantIds
	}
	return ""
}

func (x *AppUpdateRequest) GetEmergencyDeveloperName() string {
	if x != nil {
		return x.EmergencyDeveloperName
	}
	return ""
}

func (x *AppUpdateRequest) GetEmergencyDeveloperEmail() string {
	if x != nil {
		return x.EmergencyDeveloperEmail
	}
	return ""
}

func (x *AppUpdateRequest) GetPurchasableContextWithAllCycles() map[string]*CurrencyToPriceMap {
	if x != nil {
		return x.PurchasableContextWithAllCycles
	}
	return nil
}

func (x *AppUpdateRequest) GetBusinessName() string {
	if x != nil {
		return x.BusinessName
	}
	return ""
}

func (x *AppUpdateRequest) GetAppTermAndConditions() string {
	if x != nil {
		return x.AppTermAndConditions
	}
	return ""
}

func (x *AppUpdateRequest) GetIsFreeTrialable() bool {
	if x != nil {
		return x.IsFreeTrialable
	}
	return false
}

// Deprecated: Do not use.
func (x *AppUpdateRequest) GetAppBlock() *AppBlockUpdateRequest {
	if x != nil {
		return x.AppBlock
	}
	return nil
}

func (x *AppUpdateRequest) GetAdminLink() *AdminLinkUpdateRequest {
	if x != nil {
		return x.AdminLink
	}
	return nil
}

func (x *AppUpdateRequest) GetAdminEmbeddedApp() *AdminEmbeddedAppUpdateRequest {
	if x != nil {
		return x.AdminEmbeddedApp
	}
	return nil
}

func (x *AppUpdateRequest) GetAppScript() *AppScriptUpdateRequest {
	if x != nil {
		return x.AppScript
	}
	return nil
}

type AppIdentifiableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DeveloperId  string   `protobuf:"bytes,2,opt,name=developer_id,json=developerId,proto3" json:"developer_id,omitempty"`
	PerformerId  string   `protobuf:"bytes,3,opt,name=performer_id,json=performerId,proto3" json:"performer_id,omitempty"`
	RenderScopes []string `protobuf:"bytes,4,rep,name=render_scopes,json=renderScopes,proto3" json:"render_scopes,omitempty"`
}

func (x *AppIdentifiableRequest) Reset() {
	*x = AppIdentifiableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppIdentifiableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppIdentifiableRequest) ProtoMessage() {}

func (x *AppIdentifiableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppIdentifiableRequest.ProtoReflect.Descriptor instead.
func (*AppIdentifiableRequest) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{7}
}

func (x *AppIdentifiableRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AppIdentifiableRequest) GetDeveloperId() string {
	if x != nil {
		return x.DeveloperId
	}
	return ""
}

func (x *AppIdentifiableRequest) GetPerformerId() string {
	if x != nil {
		return x.PerformerId
	}
	return ""
}

func (x *AppIdentifiableRequest) GetRenderScopes() []string {
	if x != nil {
		return x.RenderScopes
	}
	return nil
}

type AppSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword      string   `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	DeveloperId  string   `protobuf:"bytes,2,opt,name=developer_id,json=developerId,proto3" json:"developer_id,omitempty"`
	UserId       string   `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RenderScopes []string `protobuf:"bytes,11,rep,name=render_scopes,json=renderScopes,proto3" json:"render_scopes,omitempty"`
	CategoryIds  []string `protobuf:"bytes,83,rep,name=category_ids,json=categoryIds,proto3" json:"category_ids,omitempty"`
	Regions      []string `protobuf:"bytes,89,rep,name=regions,proto3" json:"regions,omitempty"`
	Plan         string   `protobuf:"bytes,143,opt,name=plan,proto3" json:"plan,omitempty"`
	AppType      string   `protobuf:"bytes,144,opt,name=app_type,json=appType,proto3" json:"app_type,omitempty"`
	PerPage      int32    `protobuf:"varint,146,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	Page         int32    `protobuf:"varint,147,opt,name=page,proto3" json:"page,omitempty"`
	BeforeToken  string   `protobuf:"bytes,148,opt,name=before_token,json=beforeToken,proto3" json:"before_token,omitempty"`
	AfterToken   string   `protobuf:"bytes,149,opt,name=after_token,json=afterToken,proto3" json:"after_token,omitempty"`
	Status       string   `protobuf:"bytes,150,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AppSearchRequest) Reset() {
	*x = AppSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppSearchRequest) ProtoMessage() {}

func (x *AppSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppSearchRequest.ProtoReflect.Descriptor instead.
func (*AppSearchRequest) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{8}
}

func (x *AppSearchRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *AppSearchRequest) GetDeveloperId() string {
	if x != nil {
		return x.DeveloperId
	}
	return ""
}

func (x *AppSearchRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AppSearchRequest) GetRenderScopes() []string {
	if x != nil {
		return x.RenderScopes
	}
	return nil
}

func (x *AppSearchRequest) GetCategoryIds() []string {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

func (x *AppSearchRequest) GetRegions() []string {
	if x != nil {
		return x.Regions
	}
	return nil
}

func (x *AppSearchRequest) GetPlan() string {
	if x != nil {
		return x.Plan
	}
	return ""
}

func (x *AppSearchRequest) GetAppType() string {
	if x != nil {
		return x.AppType
	}
	return ""
}

func (x *AppSearchRequest) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *AppSearchRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *AppSearchRequest) GetBeforeToken() string {
	if x != nil {
		return x.BeforeToken
	}
	return ""
}

func (x *AppSearchRequest) GetAfterToken() string {
	if x != nil {
		return x.AfterToken
	}
	return ""
}

func (x *AppSearchRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type Application struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                                string                              `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
	Slug                               string                              `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	Modes                              []Application_MODES                 `protobuf:"varint,10,rep,packed,name=modes,proto3,enum=DeveloperApi.Application_MODES" json:"modes,omitempty"`
	DeveloperId                        string                              `protobuf:"bytes,20,opt,name=developer_id,json=developerId,proto3" json:"developer_id,omitempty"`
	DoorkeeperApplicationId            string                              `protobuf:"bytes,25,opt,name=doorkeeper_application_id,json=doorkeeperApplicationId,proto3" json:"doorkeeper_application_id,omitempty"`
	LiveVersionId                      string                              `protobuf:"bytes,30,opt,name=live_version_id,json=liveVersionId,proto3" json:"live_version_id,omitempty"`
	SubscriptionApplicationId          string                              `protobuf:"bytes,31,opt,name=subscription_application_id,json=subscriptionApplicationId,proto3" json:"subscription_application_id,omitempty"`
	Visibility                         Application_VISIBILITY              `protobuf:"varint,35,opt,name=visibility,proto3,enum=DeveloperApi.Application_VISIBILITY" json:"visibility,omitempty"`
	PublishStatus                      PUBLISHSTATUS                       `protobuf:"varint,36,opt,name=publish_status,json=publishStatus,proto3,enum=DeveloperApi.PUBLISHSTATUS" json:"publish_status,omitempty"`
	ListingStatus                      LISTINGSTATUS                       `protobuf:"varint,37,opt,name=listing_status,json=listingStatus,proto3,enum=DeveloperApi.LISTINGSTATUS" json:"listing_status,omitempty"`
	Status                             Application_STATUS                  `protobuf:"varint,40,opt,name=status,proto3,enum=DeveloperApi.Application_STATUS" json:"status,omitempty"`
	Developer                          *Developer                          `protobuf:"bytes,41,opt,name=developer,proto3" json:"developer,omitempty"`
	LastEditedBy                       *User                               `protobuf:"bytes,60,opt,name=last_edited_by,json=lastEditedBy,proto3" json:"last_edited_by,omitempty"`
	LastEditedAt                       *timestamppb.Timestamp              `protobuf:"bytes,61,opt,name=last_edited_at,json=lastEditedAt,proto3" json:"last_edited_at,omitempty"`
	TotalReviewCount                   int32                               `protobuf:"varint,70,opt,name=total_review_count,json=totalReviewCount,proto3" json:"total_review_count,omitempty"`
	TotalDownloadCount                 int32                               `protobuf:"varint,71,opt,name=total_download_count,json=totalDownloadCount,proto3" json:"total_download_count,omitempty"`
	VersionNumber                      string                              `protobuf:"bytes,72,opt,name=version_number,json=versionNumber,proto3" json:"version_number,omitempty"`
	SubmittedAt                        *timestamppb.Timestamp              `protobuf:"bytes,73,opt,name=submitted_at,json=submittedAt,proto3" json:"submitted_at,omitempty"`
	ApprovedAt                         *timestamppb.Timestamp              `protobuf:"bytes,74,opt,name=approved_at,json=approvedAt,proto3" json:"approved_at,omitempty"`
	DeprecatedAt                       *timestamppb.Timestamp              `protobuf:"bytes,75,opt,name=deprecated_at,json=deprecatedAt,proto3" json:"deprecated_at,omitempty"`
	DeclinedAt                         *timestamppb.Timestamp              `protobuf:"bytes,76,opt,name=declined_at,json=declinedAt,proto3" json:"declined_at,omitempty"`
	ReviewerId                         string                              `protobuf:"bytes,77,opt,name=reviewer_id,json=reviewerId,proto3" json:"reviewer_id,omitempty"`
	ApplicationId                      string                              `protobuf:"bytes,78,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	NameTranslations                   map[string]string                   `protobuf:"bytes,79,rep,name=name_translations,json=nameTranslations,proto3" json:"name_translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SummaryTranslations                map[string]string                   `protobuf:"bytes,80,rep,name=summary_translations,json=summaryTranslations,proto3" json:"summary_translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DescriptionTranslations            map[string]string                   `protobuf:"bytes,81,rep,name=description_translations,json=descriptionTranslations,proto3" json:"description_translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	InstructionTranslations            map[string]string                   `protobuf:"bytes,82,rep,name=instruction_translations,json=instructionTranslations,proto3" json:"instruction_translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CategoryIds                        []string                            `protobuf:"bytes,83,rep,name=category_ids,json=categoryIds,proto3" json:"category_ids,omitempty"`
	LogoMediaUrlTranslations           map[string]string                   `protobuf:"bytes,84,rep,name=logo_media_url_translations,json=logoMediaUrlTranslations,proto3" json:"logo_media_url_translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CoverMediaUrlTranslations          map[string]string                   `protobuf:"bytes,85,rep,name=cover_media_url_translations,json=coverMediaUrlTranslations,proto3" json:"cover_media_url_translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ScreenshotMediaUrlsTranslations    map[string]*ScreenshotUrls          `protobuf:"bytes,86,rep,name=screenshot_media_urls_translations,json=screenshotMediaUrlsTranslations,proto3" json:"screenshot_media_urls_translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PrivacyPolicyUrl                   string                              `protobuf:"bytes,87,opt,name=privacy_policy_url,json=privacyPolicyUrl,proto3" json:"privacy_policy_url,omitempty"`
	SupportEmail                       string                              `protobuf:"bytes,88,opt,name=support_email,json=supportEmail,proto3" json:"support_email,omitempty"`
	Regions                            []string                            `protobuf:"bytes,89,rep,name=regions,proto3" json:"regions,omitempty"`
	Languages                          []string                            `protobuf:"bytes,90,rep,name=languages,proto3" json:"languages,omitempty"`
	ExternalUrl                        string                              `protobuf:"bytes,91,opt,name=external_url,json=externalUrl,proto3" json:"external_url,omitempty"`
	EmbeddedUrl                        string                              `protobuf:"bytes,92,opt,name=embedded_url,json=embeddedUrl,proto3" json:"embedded_url,omitempty"`
	GrantsRequired                     map[string]*ListOfString            `protobuf:"bytes,93,rep,name=grants_required,json=grantsRequired,proto3" json:"grants_required,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Scopes                             string                              `protobuf:"bytes,94,opt,name=scopes,proto3" json:"scopes,omitempty"`
	DeletedAt                          *timestamppb.Timestamp              `protobuf:"bytes,98,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	UpdatedAt                          *timestamppb.Timestamp              `protobuf:"bytes,99,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt                          *timestamppb.Timestamp              `protobuf:"bytes,100,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Uid                                string                              `protobuf:"bytes,101,opt,name=uid,proto3" json:"uid,omitempty"`
	Secret                             string                              `protobuf:"bytes,102,opt,name=secret,proto3" json:"secret,omitempty"`
	RedirectUri                        string                              `protobuf:"bytes,103,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`
	SupportedVersions                  []string                            `protobuf:"bytes,110,rep,name=supported_versions,json=supportedVersions,proto3" json:"supported_versions,omitempty"`
	Name                               string                              `protobuf:"bytes,111,opt,name=name,proto3" json:"name,omitempty"`
	ListingUrl                         string                              `protobuf:"bytes,112,opt,name=listing_url,json=listingUrl,proto3" json:"listing_url,omitempty"`
	LaunchUrl                          string                              `protobuf:"bytes,113,opt,name=launch_url,json=launchUrl,proto3" json:"launch_url,omitempty"`
	SeoSlug                            string                              `protobuf:"bytes,120,opt,name=seo_slug,json=seoSlug,proto3" json:"seo_slug,omitempty"`
	SeoKeywords                        string                              `protobuf:"bytes,121,opt,name=seo_keywords,json=seoKeywords,proto3" json:"seo_keywords,omitempty"`
	SeoTitleTranslations               map[string]string                   `protobuf:"bytes,122,rep,name=seo_title_translations,json=seoTitleTranslations,proto3" json:"seo_title_translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SeoDescriptionTranslations         map[string]string                   `protobuf:"bytes,123,rep,name=seo_description_translations,json=seoDescriptionTranslations,proto3" json:"seo_description_translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FaqLinkTranslations                map[string]string                   `protobuf:"bytes,124,rep,name=faq_link_translations,json=faqLinkTranslations,proto3" json:"faq_link_translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	InstallSuccessMsgTranslations      map[string]string                   `protobuf:"bytes,125,rep,name=install_success_msg_translations,json=installSuccessMsgTranslations,proto3" json:"install_success_msg_translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AvgReviewRating                    int32                               `protobuf:"varint,130,opt,name=avg_review_rating,json=avgReviewRating,proto3" json:"avg_review_rating,omitempty"`
	ReviewRatings                      *ApplicationReviewRatings           `protobuf:"bytes,131,opt,name=review_ratings,json=reviewRatings,proto3" json:"review_ratings,omitempty"`
	Key                                string                              `protobuf:"bytes,140,opt,name=key,proto3" json:"key,omitempty"`
	RolloutKeys                        []string                            `protobuf:"bytes,141,rep,name=rollout_keys,json=rolloutKeys,proto3" json:"rollout_keys,omitempty"`
	AvailabilityRolloutKey             string                              `protobuf:"bytes,142,opt,name=availability_rollout_key,json=availabilityRolloutKey,proto3" json:"availability_rollout_key,omitempty"`
	InstallType                        string                              `protobuf:"bytes,146,opt,name=install_type,json=installType,proto3" json:"install_type,omitempty"`
	RequiresSetup                      bool                                `protobuf:"varint,147,opt,name=requires_setup,json=requiresSetup,proto3" json:"requires_setup,omitempty"`
	ActionButtonSettings               *ActionButtonSettings               `protobuf:"bytes,149,opt,name=action_button_settings,json=actionButtonSettings,proto3" json:"action_button_settings,omitempty"`
	AvailableBaseCurrencyCodes         map[string]bool                     `protobuf:"bytes,150,rep,name=available_base_currency_codes,json=availableBaseCurrencyCodes,proto3" json:"available_base_currency_codes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AvailableSubscriptionCurrencyCodes map[string]bool                     `protobuf:"bytes,151,rep,name=available_subscription_currency_codes,json=availableSubscriptionCurrencyCodes,proto3" json:"available_subscription_currency_codes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	InstallationContactType            Application_InstallationContactType `protobuf:"varint,152,opt,name=installation_contact_type,json=installationContactType,proto3,enum=DeveloperApi.Application_InstallationContactType" json:"installation_contact_type,omitempty"`
	InstallationContactEmail           string                              `protobuf:"bytes,153,opt,name=installation_contact_email,json=installationContactEmail,proto3" json:"installation_contact_email,omitempty"`
	Uninstallable                      bool                                `protobuf:"varint,154,opt,name=uninstallable,proto3" json:"uninstallable,omitempty"`
	InstalledAt                        *timestamppb.Timestamp              `protobuf:"bytes,155,opt,name=installed_at,json=installedAt,proto3" json:"installed_at,omitempty"`
	SubscriptionStatus                 string                              `protobuf:"bytes,156,opt,name=subscription_status,json=subscriptionStatus,proto3" json:"subscription_status,omitempty"`
	PurchasableContext                 map[string]string                   `protobuf:"bytes,157,rep,name=purchasable_context,json=purchasableContext,proto3" json:"purchasable_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsEverLive                         bool                                `protobuf:"varint,158,opt,name=is_ever_live,json=isEverLive,proto3" json:"is_ever_live,omitempty"`
	DetailedPurchasableContexts        []*DetailedPurchasableContext       `protobuf:"bytes,159,rep,name=detailed_purchasable_contexts,json=detailedPurchasableContexts,proto3" json:"detailed_purchasable_contexts,omitempty"`
	WhitelistedMerchantIds             string                              `protobuf:"bytes,160,opt,name=whitelisted_merchant_ids,json=whitelistedMerchantIds,proto3" json:"whitelisted_merchant_ids,omitempty"`
	EmergencyDeveloperName             string                              `protobuf:"bytes,161,opt,name=emergency_developer_name,json=emergencyDeveloperName,proto3" json:"emergency_developer_name,omitempty"`
	EmergencyDeveloperEmail            string                              `protobuf:"bytes,162,opt,name=emergency_developer_email,json=emergencyDeveloperEmail,proto3" json:"emergency_developer_email,omitempty"`
	PurchasableContextWithAllCycles    map[string]*CurrencyToPriceMap      `protobuf:"bytes,163,rep,name=purchasable_context_with_all_cycles,json=purchasableContextWithAllCycles,proto3" json:"purchasable_context_with_all_cycles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BusinessName                       string                              `protobuf:"bytes,164,opt,name=business_name,json=businessName,proto3" json:"business_name,omitempty"`
	AppTermAndConditions               string                              `protobuf:"bytes,165,opt,name=app_term_and_conditions,json=appTermAndConditions,proto3" json:"app_term_and_conditions,omitempty"`
	RequiresReauth                     bool                                `protobuf:"varint,166,opt,name=requires_reauth,json=requiresReauth,proto3" json:"requires_reauth,omitempty"`
	InstalledBy                        string                              `protobuf:"bytes,167,opt,name=installed_by,json=installedBy,proto3" json:"installed_by,omitempty"`
	IsFreeTrialable                    bool                                `protobuf:"varint,168,opt,name=is_free_trialable,json=isFreeTrialable,proto3" json:"is_free_trialable,omitempty"`
	SubscriptionEndAt                  *timestamppb.Timestamp              `protobuf:"bytes,169,opt,name=subscription_end_at,json=subscriptionEndAt,proto3" json:"subscription_end_at,omitempty"`
	IsWebhookBreak                     bool                                `protobuf:"varint,170,opt,name=is_webhook_break,json=isWebhookBreak,proto3" json:"is_webhook_break,omitempty"`
	// Deprecated: Do not use.
	AppBlocks                 []*AppBlock            `protobuf:"bytes,171,rep,name=app_blocks,json=appBlocks,proto3" json:"app_blocks,omitempty"`
	AppWebhookStatus          *WebhookStatus         `protobuf:"bytes,172,opt,name=app_webhook_status,json=appWebhookStatus,proto3" json:"app_webhook_status,omitempty"`
	IsAlwaysShow              bool                   `protobuf:"varint,173,opt,name=is_always_show,json=isAlwaysShow,proto3" json:"is_always_show,omitempty"`
	SupportedStorefrontThemes []string               `protobuf:"bytes,174,rep,name=supported_storefront_themes,json=supportedStorefrontThemes,proto3" json:"supported_storefront_themes,omitempty"`
	AdminLinks                []*AdminLink           `protobuf:"bytes,175,rep,name=admin_links,json=adminLinks,proto3" json:"admin_links,omitempty"`
	AdminEmbeddedApps         []*AdminEmbeddedApp    `protobuf:"bytes,176,rep,name=admin_embedded_apps,json=adminEmbeddedApps,proto3" json:"admin_embedded_apps,omitempty"`
	AppSettings               *AppSettings           `protobuf:"bytes,177,opt,name=app_settings,json=appSettings,proto3" json:"app_settings,omitempty"`
	IsAppScriptsSet           bool                   `protobuf:"varint,178,opt,name=is_app_scripts_set,json=isAppScriptsSet,proto3" json:"is_app_scripts_set,omitempty"`
	AppScripts                []*AppScript           `protobuf:"bytes,179,rep,name=app_scripts,json=appScripts,proto3" json:"app_scripts,omitempty"`
	AppStoreDisplayText       string                 `protobuf:"bytes,180,opt,name=app_store_display_text,json=appStoreDisplayText,proto3" json:"app_store_display_text,omitempty"`
	IsAppInstalled            bool                   `protobuf:"varint,181,opt,name=is_app_installed,json=isAppInstalled,proto3" json:"is_app_installed,omitempty"`
	ScopeUpdatedAt            *timestamppb.Timestamp `protobuf:"bytes,182,opt,name=scope_updated_at,json=scopeUpdatedAt,proto3" json:"scope_updated_at,omitempty"`
}

func (x *Application) Reset() {
	*x = Application{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Application) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Application) ProtoMessage() {}

func (x *Application) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Application.ProtoReflect.Descriptor instead.
func (*Application) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{9}
}

func (x *Application) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

func (x *Application) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Application) GetModes() []Application_MODES {
	if x != nil {
		return x.Modes
	}
	return nil
}

func (x *Application) GetDeveloperId() string {
	if x != nil {
		return x.DeveloperId
	}
	return ""
}

func (x *Application) GetDoorkeeperApplicationId() string {
	if x != nil {
		return x.DoorkeeperApplicationId
	}
	return ""
}

func (x *Application) GetLiveVersionId() string {
	if x != nil {
		return x.LiveVersionId
	}
	return ""
}

func (x *Application) GetSubscriptionApplicationId() string {
	if x != nil {
		return x.SubscriptionApplicationId
	}
	return ""
}

func (x *Application) GetVisibility() Application_VISIBILITY {
	if x != nil {
		return x.Visibility
	}
	return Application_LISTED
}

func (x *Application) GetPublishStatus() PUBLISHSTATUS {
	if x != nil {
		return x.PublishStatus
	}
	return PUBLISHSTATUS_PUBLISHED
}

func (x *Application) GetListingStatus() LISTINGSTATUS {
	if x != nil {
		return x.ListingStatus
	}
	return LISTINGSTATUS_LISTED
}

func (x *Application) GetStatus() Application_STATUS {
	if x != nil {
		return x.Status
	}
	return Application_UNKNOWN
}

func (x *Application) GetDeveloper() *Developer {
	if x != nil {
		return x.Developer
	}
	return nil
}

func (x *Application) GetLastEditedBy() *User {
	if x != nil {
		return x.LastEditedBy
	}
	return nil
}

func (x *Application) GetLastEditedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastEditedAt
	}
	return nil
}

func (x *Application) GetTotalReviewCount() int32 {
	if x != nil {
		return x.TotalReviewCount
	}
	return 0
}

func (x *Application) GetTotalDownloadCount() int32 {
	if x != nil {
		return x.TotalDownloadCount
	}
	return 0
}

func (x *Application) GetVersionNumber() string {
	if x != nil {
		return x.VersionNumber
	}
	return ""
}

func (x *Application) GetSubmittedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SubmittedAt
	}
	return nil
}

func (x *Application) GetApprovedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApprovedAt
	}
	return nil
}

func (x *Application) GetDeprecatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeprecatedAt
	}
	return nil
}

func (x *Application) GetDeclinedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeclinedAt
	}
	return nil
}

func (x *Application) GetReviewerId() string {
	if x != nil {
		return x.ReviewerId
	}
	return ""
}

func (x *Application) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *Application) GetNameTranslations() map[string]string {
	if x != nil {
		return x.NameTranslations
	}
	return nil
}

func (x *Application) GetSummaryTranslations() map[string]string {
	if x != nil {
		return x.SummaryTranslations
	}
	return nil
}

func (x *Application) GetDescriptionTranslations() map[string]string {
	if x != nil {
		return x.DescriptionTranslations
	}
	return nil
}

func (x *Application) GetInstructionTranslations() map[string]string {
	if x != nil {
		return x.InstructionTranslations
	}
	return nil
}

func (x *Application) GetCategoryIds() []string {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

func (x *Application) GetLogoMediaUrlTranslations() map[string]string {
	if x != nil {
		return x.LogoMediaUrlTranslations
	}
	return nil
}

func (x *Application) GetCoverMediaUrlTranslations() map[string]string {
	if x != nil {
		return x.CoverMediaUrlTranslations
	}
	return nil
}

func (x *Application) GetScreenshotMediaUrlsTranslations() map[string]*ScreenshotUrls {
	if x != nil {
		return x.ScreenshotMediaUrlsTranslations
	}
	return nil
}

func (x *Application) GetPrivacyPolicyUrl() string {
	if x != nil {
		return x.PrivacyPolicyUrl
	}
	return ""
}

func (x *Application) GetSupportEmail() string {
	if x != nil {
		return x.SupportEmail
	}
	return ""
}

func (x *Application) GetRegions() []string {
	if x != nil {
		return x.Regions
	}
	return nil
}

func (x *Application) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *Application) GetExternalUrl() string {
	if x != nil {
		return x.ExternalUrl
	}
	return ""
}

func (x *Application) GetEmbeddedUrl() string {
	if x != nil {
		return x.EmbeddedUrl
	}
	return ""
}

func (x *Application) GetGrantsRequired() map[string]*ListOfString {
	if x != nil {
		return x.GrantsRequired
	}
	return nil
}

func (x *Application) GetScopes() string {
	if x != nil {
		return x.Scopes
	}
	return ""
}

func (x *Application) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *Application) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Application) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Application) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Application) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *Application) GetRedirectUri() string {
	if x != nil {
		return x.RedirectUri
	}
	return ""
}

func (x *Application) GetSupportedVersions() []string {
	if x != nil {
		return x.SupportedVersions
	}
	return nil
}

func (x *Application) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Application) GetListingUrl() string {
	if x != nil {
		return x.ListingUrl
	}
	return ""
}

func (x *Application) GetLaunchUrl() string {
	if x != nil {
		return x.LaunchUrl
	}
	return ""
}

func (x *Application) GetSeoSlug() string {
	if x != nil {
		return x.SeoSlug
	}
	return ""
}

func (x *Application) GetSeoKeywords() string {
	if x != nil {
		return x.SeoKeywords
	}
	return ""
}

func (x *Application) GetSeoTitleTranslations() map[string]string {
	if x != nil {
		return x.SeoTitleTranslations
	}
	return nil
}

func (x *Application) GetSeoDescriptionTranslations() map[string]string {
	if x != nil {
		return x.SeoDescriptionTranslations
	}
	return nil
}

func (x *Application) GetFaqLinkTranslations() map[string]string {
	if x != nil {
		return x.FaqLinkTranslations
	}
	return nil
}

func (x *Application) GetInstallSuccessMsgTranslations() map[string]string {
	if x != nil {
		return x.InstallSuccessMsgTranslations
	}
	return nil
}

func (x *Application) GetAvgReviewRating() int32 {
	if x != nil {
		return x.AvgReviewRating
	}
	return 0
}

func (x *Application) GetReviewRatings() *ApplicationReviewRatings {
	if x != nil {
		return x.ReviewRatings
	}
	return nil
}

func (x *Application) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Application) GetRolloutKeys() []string {
	if x != nil {
		return x.RolloutKeys
	}
	return nil
}

func (x *Application) GetAvailabilityRolloutKey() string {
	if x != nil {
		return x.AvailabilityRolloutKey
	}
	return ""
}

func (x *Application) GetInstallType() string {
	if x != nil {
		return x.InstallType
	}
	return ""
}

func (x *Application) GetRequiresSetup() bool {
	if x != nil {
		return x.RequiresSetup
	}
	return false
}

func (x *Application) GetActionButtonSettings() *ActionButtonSettings {
	if x != nil {
		return x.ActionButtonSettings
	}
	return nil
}

func (x *Application) GetAvailableBaseCurrencyCodes() map[string]bool {
	if x != nil {
		return x.AvailableBaseCurrencyCodes
	}
	return nil
}

func (x *Application) GetAvailableSubscriptionCurrencyCodes() map[string]bool {
	if x != nil {
		return x.AvailableSubscriptionCurrencyCodes
	}
	return nil
}

func (x *Application) GetInstallationContactType() Application_InstallationContactType {
	if x != nil {
		return x.InstallationContactType
	}
	return Application_INTERCOM
}

func (x *Application) GetInstallationContactEmail() string {
	if x != nil {
		return x.InstallationContactEmail
	}
	return ""
}

func (x *Application) GetUninstallable() bool {
	if x != nil {
		return x.Uninstallable
	}
	return false
}

func (x *Application) GetInstalledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InstalledAt
	}
	return nil
}

func (x *Application) GetSubscriptionStatus() string {
	if x != nil {
		return x.SubscriptionStatus
	}
	return ""
}

func (x *Application) GetPurchasableContext() map[string]string {
	if x != nil {
		return x.PurchasableContext
	}
	return nil
}

func (x *Application) GetIsEverLive() bool {
	if x != nil {
		return x.IsEverLive
	}
	return false
}

func (x *Application) GetDetailedPurchasableContexts() []*DetailedPurchasableContext {
	if x != nil {
		return x.DetailedPurchasableContexts
	}
	return nil
}

func (x *Application) GetWhitelistedMerchantIds() string {
	if x != nil {
		return x.WhitelistedMerchantIds
	}
	return ""
}

func (x *Application) GetEmergencyDeveloperName() string {
	if x != nil {
		return x.EmergencyDeveloperName
	}
	return ""
}

func (x *Application) GetEmergencyDeveloperEmail() string {
	if x != nil {
		return x.EmergencyDeveloperEmail
	}
	return ""
}

func (x *Application) GetPurchasableContextWithAllCycles() map[string]*CurrencyToPriceMap {
	if x != nil {
		return x.PurchasableContextWithAllCycles
	}
	return nil
}

func (x *Application) GetBusinessName() string {
	if x != nil {
		return x.BusinessName
	}
	return ""
}

func (x *Application) GetAppTermAndConditions() string {
	if x != nil {
		return x.AppTermAndConditions
	}
	return ""
}

func (x *Application) GetRequiresReauth() bool {
	if x != nil {
		return x.RequiresReauth
	}
	return false
}

func (x *Application) GetInstalledBy() string {
	if x != nil {
		return x.InstalledBy
	}
	return ""
}

func (x *Application) GetIsFreeTrialable() bool {
	if x != nil {
		return x.IsFreeTrialable
	}
	return false
}

func (x *Application) GetSubscriptionEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SubscriptionEndAt
	}
	return nil
}

func (x *Application) GetIsWebhookBreak() bool {
	if x != nil {
		return x.IsWebhookBreak
	}
	return false
}

// Deprecated: Do not use.
func (x *Application) GetAppBlocks() []*AppBlock {
	if x != nil {
		return x.AppBlocks
	}
	return nil
}

func (x *Application) GetAppWebhookStatus() *WebhookStatus {
	if x != nil {
		return x.AppWebhookStatus
	}
	return nil
}

func (x *Application) GetIsAlwaysShow() bool {
	if x != nil {
		return x.IsAlwaysShow
	}
	return false
}

func (x *Application) GetSupportedStorefrontThemes() []string {
	if x != nil {
		return x.SupportedStorefrontThemes
	}
	return nil
}

func (x *Application) GetAdminLinks() []*AdminLink {
	if x != nil {
		return x.AdminLinks
	}
	return nil
}

func (x *Application) GetAdminEmbeddedApps() []*AdminEmbeddedApp {
	if x != nil {
		return x.AdminEmbeddedApps
	}
	return nil
}

func (x *Application) GetAppSettings() *AppSettings {
	if x != nil {
		return x.AppSettings
	}
	return nil
}

func (x *Application) GetIsAppScriptsSet() bool {
	if x != nil {
		return x.IsAppScriptsSet
	}
	return false
}

func (x *Application) GetAppScripts() []*AppScript {
	if x != nil {
		return x.AppScripts
	}
	return nil
}

func (x *Application) GetAppStoreDisplayText() string {
	if x != nil {
		return x.AppStoreDisplayText
	}
	return ""
}

func (x *Application) GetIsAppInstalled() bool {
	if x != nil {
		return x.IsAppInstalled
	}
	return false
}

func (x *Application) GetScopeUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ScopeUpdatedAt
	}
	return nil
}

type ApplicationReviewRatings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	V   int32 `protobuf:"varint,1,opt,name=v,proto3" json:"v,omitempty"`
	Iv  int32 `protobuf:"varint,2,opt,name=iv,proto3" json:"iv,omitempty"`
	Iii int32 `protobuf:"varint,3,opt,name=iii,proto3" json:"iii,omitempty"`
	Ii  int32 `protobuf:"varint,4,opt,name=ii,proto3" json:"ii,omitempty"`
	I   int32 `protobuf:"varint,5,opt,name=i,proto3" json:"i,omitempty"`
}

func (x *ApplicationReviewRatings) Reset() {
	*x = ApplicationReviewRatings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationReviewRatings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationReviewRatings) ProtoMessage() {}

func (x *ApplicationReviewRatings) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationReviewRatings.ProtoReflect.Descriptor instead.
func (*ApplicationReviewRatings) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{10}
}

func (x *ApplicationReviewRatings) GetV() int32 {
	if x != nil {
		return x.V
	}
	return 0
}

func (x *ApplicationReviewRatings) GetIv() int32 {
	if x != nil {
		return x.Iv
	}
	return 0
}

func (x *ApplicationReviewRatings) GetIii() int32 {
	if x != nil {
		return x.Iii
	}
	return 0
}

func (x *ApplicationReviewRatings) GetIi() int32 {
	if x != nil {
		return x.Ii
	}
	return 0
}

func (x *ApplicationReviewRatings) GetI() int32 {
	if x != nil {
		return x.I
	}
	return 0
}

type MerchantServiceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OecPlans           []string `protobuf:"bytes,1,rep,name=oec_plans,json=oecPlans,proto3" json:"oec_plans,omitempty"`
	BasketProductLines []string `protobuf:"bytes,2,rep,name=basket_product_lines,json=basketProductLines,proto3" json:"basket_product_lines,omitempty"`
	BasketModules      []string `protobuf:"bytes,3,rep,name=basket_modules,json=basketModules,proto3" json:"basket_modules,omitempty"`
}

func (x *MerchantServiceConfig) Reset() {
	*x = MerchantServiceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantServiceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantServiceConfig) ProtoMessage() {}

func (x *MerchantServiceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantServiceConfig.ProtoReflect.Descriptor instead.
func (*MerchantServiceConfig) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{11}
}

func (x *MerchantServiceConfig) GetOecPlans() []string {
	if x != nil {
		return x.OecPlans
	}
	return nil
}

func (x *MerchantServiceConfig) GetBasketProductLines() []string {
	if x != nil {
		return x.BasketProductLines
	}
	return nil
}

func (x *MerchantServiceConfig) GetBasketModules() []string {
	if x != nil {
		return x.BasketModules
	}
	return nil
}

type ActionButtonSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkTo                 string        `protobuf:"bytes,1,opt,name=link_to,json=linkTo,proto3" json:"link_to,omitempty"`
	LinkHandle             string        `protobuf:"bytes,2,opt,name=link_handle,json=linkHandle,proto3" json:"link_handle,omitempty"`
	ButtonTextTranslations *Translatable `protobuf:"bytes,3,opt,name=button_text_translations,json=buttonTextTranslations,proto3" json:"button_text_translations,omitempty"`
	// Deprecated: Do not use.
	IframeHandle       string `protobuf:"bytes,4,opt,name=iframe_handle,json=iframeHandle,proto3" json:"iframe_handle,omitempty"`
	AdminEmbeddedAppId string `protobuf:"bytes,5,opt,name=admin_embedded_app_id,json=adminEmbeddedAppId,proto3" json:"admin_embedded_app_id,omitempty"`
}

func (x *ActionButtonSettings) Reset() {
	*x = ActionButtonSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionButtonSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionButtonSettings) ProtoMessage() {}

func (x *ActionButtonSettings) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionButtonSettings.ProtoReflect.Descriptor instead.
func (*ActionButtonSettings) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{12}
}

func (x *ActionButtonSettings) GetLinkTo() string {
	if x != nil {
		return x.LinkTo
	}
	return ""
}

func (x *ActionButtonSettings) GetLinkHandle() string {
	if x != nil {
		return x.LinkHandle
	}
	return ""
}

func (x *ActionButtonSettings) GetButtonTextTranslations() *Translatable {
	if x != nil {
		return x.ButtonTextTranslations
	}
	return nil
}

// Deprecated: Do not use.
func (x *ActionButtonSettings) GetIframeHandle() string {
	if x != nil {
		return x.IframeHandle
	}
	return ""
}

func (x *ActionButtonSettings) GetAdminEmbeddedAppId() string {
	if x != nil {
		return x.AdminEmbeddedAppId
	}
	return ""
}

type ApplicationEmptyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApplicationEmptyReply) Reset() {
	*x = ApplicationEmptyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationEmptyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationEmptyReply) ProtoMessage() {}

func (x *ApplicationEmptyReply) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationEmptyReply.ProtoReflect.Descriptor instead.
func (*ApplicationEmptyReply) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{13}
}

type DevOauthAppIndexReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items      []*DevOauthApplication `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Pagination *PaginationReply       `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *DevOauthAppIndexReply) Reset() {
	*x = DevOauthAppIndexReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevOauthAppIndexReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevOauthAppIndexReply) ProtoMessage() {}

func (x *DevOauthAppIndexReply) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevOauthAppIndexReply.ProtoReflect.Descriptor instead.
func (*DevOauthAppIndexReply) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{14}
}

func (x *DevOauthAppIndexReply) GetItems() []*DevOauthApplication {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *DevOauthAppIndexReply) GetPagination() *PaginationReply {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type DevOauthApplication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                        string                         `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
	Slug                       string                         `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	Modes                      []DevOauthApplication_MODES    `protobuf:"varint,10,rep,packed,name=modes,proto3,enum=DeveloperApi.DevOauthApplication_MODES" json:"modes,omitempty"`
	DeveloperId                string                         `protobuf:"bytes,20,opt,name=developer_id,json=developerId,proto3" json:"developer_id,omitempty"`
	DoorkeeperApplicationId    string                         `protobuf:"bytes,25,opt,name=doorkeeper_application_id,json=doorkeeperApplicationId,proto3" json:"doorkeeper_application_id,omitempty"`
	LiveVersionId              string                         `protobuf:"bytes,30,opt,name=live_version_id,json=liveVersionId,proto3" json:"live_version_id,omitempty"`
	Visibility                 DevOauthApplication_VISIBILITY `protobuf:"varint,35,opt,name=visibility,proto3,enum=DeveloperApi.DevOauthApplication_VISIBILITY" json:"visibility,omitempty"`
	Status                     DevOauthApplication_STATUS     `protobuf:"varint,40,opt,name=status,proto3,enum=DeveloperApi.DevOauthApplication_STATUS" json:"status,omitempty"`
	Developer                  *Developer                     `protobuf:"bytes,41,opt,name=developer,proto3" json:"developer,omitempty"`
	LastEditedBy               *User                          `protobuf:"bytes,60,opt,name=last_edited_by,json=lastEditedBy,proto3" json:"last_edited_by,omitempty"`
	LastEditedAt               *timestamppb.Timestamp         `protobuf:"bytes,61,opt,name=last_edited_at,json=lastEditedAt,proto3" json:"last_edited_at,omitempty"`
	TotalReviewCount           int32                          `protobuf:"varint,70,opt,name=total_review_count,json=totalReviewCount,proto3" json:"total_review_count,omitempty"`
	TotalDownloadCount         int32                          `protobuf:"varint,71,opt,name=total_download_count,json=totalDownloadCount,proto3" json:"total_download_count,omitempty"`
	VersionNumber              string                         `protobuf:"bytes,72,opt,name=version_number,json=versionNumber,proto3" json:"version_number,omitempty"`
	SubmittedAt                *timestamppb.Timestamp         `protobuf:"bytes,73,opt,name=submitted_at,json=submittedAt,proto3" json:"submitted_at,omitempty"`
	ApprovedAt                 *timestamppb.Timestamp         `protobuf:"bytes,74,opt,name=approved_at,json=approvedAt,proto3" json:"approved_at,omitempty"`
	DeprecatedAt               *timestamppb.Timestamp         `protobuf:"bytes,75,opt,name=deprecated_at,json=deprecatedAt,proto3" json:"deprecated_at,omitempty"`
	DeclinedAt                 *timestamppb.Timestamp         `protobuf:"bytes,76,opt,name=declined_at,json=declinedAt,proto3" json:"declined_at,omitempty"`
	ReviewerId                 string                         `protobuf:"bytes,77,opt,name=reviewer_id,json=reviewerId,proto3" json:"reviewer_id,omitempty"`
	ApplicationId              string                         `protobuf:"bytes,78,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	NameTranslations           *Translatable                  `protobuf:"bytes,79,opt,name=name_translations,json=nameTranslations,proto3" json:"name_translations,omitempty"`
	SummaryTranslations        *Translatable                  `protobuf:"bytes,80,opt,name=summary_translations,json=summaryTranslations,proto3" json:"summary_translations,omitempty"`
	DescriptionTranslations    *Translatable                  `protobuf:"bytes,81,opt,name=description_translations,json=descriptionTranslations,proto3" json:"description_translations,omitempty"`
	InstructionTranslations    *Translatable                  `protobuf:"bytes,82,opt,name=instruction_translations,json=instructionTranslations,proto3" json:"instruction_translations,omitempty"`
	CategoryIds                []string                       `protobuf:"bytes,83,rep,name=category_ids,json=categoryIds,proto3" json:"category_ids,omitempty"`
	LogoMediaUrl               string                         `protobuf:"bytes,84,opt,name=logo_media_url,json=logoMediaUrl,proto3" json:"logo_media_url,omitempty"`
	LogoMediaUrlTranslations   map[string]string              `protobuf:"bytes,160,rep,name=logo_media_url_translations,json=logoMediaUrlTranslations,proto3" json:"logo_media_url_translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CoverMediaUrl              string                         `protobuf:"bytes,85,opt,name=cover_media_url,json=coverMediaUrl,proto3" json:"cover_media_url,omitempty"`
	ScreenshotMediaUrls        []string                       `protobuf:"bytes,86,rep,name=screenshot_media_urls,json=screenshotMediaUrls,proto3" json:"screenshot_media_urls,omitempty"`
	PrivacyPolicyUrl           string                         `protobuf:"bytes,87,opt,name=privacy_policy_url,json=privacyPolicyUrl,proto3" json:"privacy_policy_url,omitempty"`
	SupportEmail               string                         `protobuf:"bytes,88,opt,name=support_email,json=supportEmail,proto3" json:"support_email,omitempty"`
	Regions                    []string                       `protobuf:"bytes,89,rep,name=regions,proto3" json:"regions,omitempty"`
	Languages                  []string                       `protobuf:"bytes,90,rep,name=languages,proto3" json:"languages,omitempty"`
	ExternalUrl                string                         `protobuf:"bytes,91,opt,name=external_url,json=externalUrl,proto3" json:"external_url,omitempty"`
	EmbeddedUrl                string                         `protobuf:"bytes,92,opt,name=embedded_url,json=embeddedUrl,proto3" json:"embedded_url,omitempty"`
	GrantsRequired             map[string]*ListOfString       `protobuf:"bytes,93,rep,name=grants_required,json=grantsRequired,proto3" json:"grants_required,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Scopes                     string                         `protobuf:"bytes,94,opt,name=scopes,proto3" json:"scopes,omitempty"`
	DeletedAt                  *timestamppb.Timestamp         `protobuf:"bytes,98,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	UpdatedAt                  *timestamppb.Timestamp         `protobuf:"bytes,99,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt                  *timestamppb.Timestamp         `protobuf:"bytes,100,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Uid                        string                         `protobuf:"bytes,101,opt,name=uid,proto3" json:"uid,omitempty"`
	Secret                     string                         `protobuf:"bytes,102,opt,name=secret,proto3" json:"secret,omitempty"`
	RedirectUri                string                         `protobuf:"bytes,103,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`
	SupportedVersions          []string                       `protobuf:"bytes,110,rep,name=supported_versions,json=supportedVersions,proto3" json:"supported_versions,omitempty"`
	Name                       string                         `protobuf:"bytes,111,opt,name=name,proto3" json:"name,omitempty"`
	ListingUrl                 string                         `protobuf:"bytes,112,opt,name=listing_url,json=listingUrl,proto3" json:"listing_url,omitempty"`
	LaunchUrl                  string                         `protobuf:"bytes,113,opt,name=launch_url,json=launchUrl,proto3" json:"launch_url,omitempty"`
	SeoSlug                    string                         `protobuf:"bytes,120,opt,name=seo_slug,json=seoSlug,proto3" json:"seo_slug,omitempty"`
	SeoKeywords                string                         `protobuf:"bytes,121,opt,name=seo_keywords,json=seoKeywords,proto3" json:"seo_keywords,omitempty"`
	SeoTitleTranslations       *Translatable                  `protobuf:"bytes,122,opt,name=seo_title_translations,json=seoTitleTranslations,proto3" json:"seo_title_translations,omitempty"`
	SeoDescriptionTranslations *Translatable                  `protobuf:"bytes,123,opt,name=seo_description_translations,json=seoDescriptionTranslations,proto3" json:"seo_description_translations,omitempty"`
	AvgReviewRating            int32                          `protobuf:"varint,124,opt,name=avg_review_rating,json=avgReviewRating,proto3" json:"avg_review_rating,omitempty"`
	ReviewRatings              *ApplicationReviewRatings      `protobuf:"bytes,125,opt,name=review_ratings,json=reviewRatings,proto3" json:"review_ratings,omitempty"`
	Key                        string                         `protobuf:"bytes,140,opt,name=key,proto3" json:"key,omitempty"`
	RolloutKeys                []string                       `protobuf:"bytes,141,rep,name=rollout_keys,json=rolloutKeys,proto3" json:"rollout_keys,omitempty"`
	AvailabilityRolloutKey     string                         `protobuf:"bytes,142,opt,name=availability_rollout_key,json=availabilityRolloutKey,proto3" json:"availability_rollout_key,omitempty"`
	BuiltIn                    *MerchantServiceConfig         `protobuf:"bytes,143,opt,name=built_in,json=builtIn,proto3" json:"built_in,omitempty"`
	Available                  *MerchantServiceConfig         `protobuf:"bytes,144,opt,name=available,proto3" json:"available,omitempty"`
	Visible                    *MerchantServiceConfig         `protobuf:"bytes,145,opt,name=visible,proto3" json:"visible,omitempty"`
	InstallType                string                         `protobuf:"bytes,146,opt,name=install_type,json=installType,proto3" json:"install_type,omitempty"`
	RequiresSetup              bool                           `protobuf:"varint,147,opt,name=requires_setup,json=requiresSetup,proto3" json:"requires_setup,omitempty"`
	FaqLinkTranslations        *Translatable                  `protobuf:"bytes,148,opt,name=faq_link_translations,json=faqLinkTranslations,proto3" json:"faq_link_translations,omitempty"`
	ActionButtonSettings       *ActionButtonSettings          `protobuf:"bytes,149,opt,name=action_button_settings,json=actionButtonSettings,proto3" json:"action_button_settings,omitempty"`
	AppTermAndConditions       string                         `protobuf:"bytes,150,opt,name=app_term_and_conditions,json=appTermAndConditions,proto3" json:"app_term_and_conditions,omitempty"`
	BusinessName               string                         `protobuf:"bytes,151,opt,name=business_name,json=businessName,proto3" json:"business_name,omitempty"`
}

func (x *DevOauthApplication) Reset() {
	*x = DevOauthApplication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevOauthApplication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevOauthApplication) ProtoMessage() {}

func (x *DevOauthApplication) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevOauthApplication.ProtoReflect.Descriptor instead.
func (*DevOauthApplication) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{15}
}

func (x *DevOauthApplication) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

func (x *DevOauthApplication) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *DevOauthApplication) GetModes() []DevOauthApplication_MODES {
	if x != nil {
		return x.Modes
	}
	return nil
}

func (x *DevOauthApplication) GetDeveloperId() string {
	if x != nil {
		return x.DeveloperId
	}
	return ""
}

func (x *DevOauthApplication) GetDoorkeeperApplicationId() string {
	if x != nil {
		return x.DoorkeeperApplicationId
	}
	return ""
}

func (x *DevOauthApplication) GetLiveVersionId() string {
	if x != nil {
		return x.LiveVersionId
	}
	return ""
}

func (x *DevOauthApplication) GetVisibility() DevOauthApplication_VISIBILITY {
	if x != nil {
		return x.Visibility
	}
	return DevOauthApplication_LISTED
}

func (x *DevOauthApplication) GetStatus() DevOauthApplication_STATUS {
	if x != nil {
		return x.Status
	}
	return DevOauthApplication_UNKNOWN
}

func (x *DevOauthApplication) GetDeveloper() *Developer {
	if x != nil {
		return x.Developer
	}
	return nil
}

func (x *DevOauthApplication) GetLastEditedBy() *User {
	if x != nil {
		return x.LastEditedBy
	}
	return nil
}

func (x *DevOauthApplication) GetLastEditedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastEditedAt
	}
	return nil
}

func (x *DevOauthApplication) GetTotalReviewCount() int32 {
	if x != nil {
		return x.TotalReviewCount
	}
	return 0
}

func (x *DevOauthApplication) GetTotalDownloadCount() int32 {
	if x != nil {
		return x.TotalDownloadCount
	}
	return 0
}

func (x *DevOauthApplication) GetVersionNumber() string {
	if x != nil {
		return x.VersionNumber
	}
	return ""
}

func (x *DevOauthApplication) GetSubmittedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SubmittedAt
	}
	return nil
}

func (x *DevOauthApplication) GetApprovedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApprovedAt
	}
	return nil
}

func (x *DevOauthApplication) GetDeprecatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeprecatedAt
	}
	return nil
}

func (x *DevOauthApplication) GetDeclinedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeclinedAt
	}
	return nil
}

func (x *DevOauthApplication) GetReviewerId() string {
	if x != nil {
		return x.ReviewerId
	}
	return ""
}

func (x *DevOauthApplication) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *DevOauthApplication) GetNameTranslations() *Translatable {
	if x != nil {
		return x.NameTranslations
	}
	return nil
}

func (x *DevOauthApplication) GetSummaryTranslations() *Translatable {
	if x != nil {
		return x.SummaryTranslations
	}
	return nil
}

func (x *DevOauthApplication) GetDescriptionTranslations() *Translatable {
	if x != nil {
		return x.DescriptionTranslations
	}
	return nil
}

func (x *DevOauthApplication) GetInstructionTranslations() *Translatable {
	if x != nil {
		return x.InstructionTranslations
	}
	return nil
}

func (x *DevOauthApplication) GetCategoryIds() []string {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

func (x *DevOauthApplication) GetLogoMediaUrl() string {
	if x != nil {
		return x.LogoMediaUrl
	}
	return ""
}

func (x *DevOauthApplication) GetLogoMediaUrlTranslations() map[string]string {
	if x != nil {
		return x.LogoMediaUrlTranslations
	}
	return nil
}

func (x *DevOauthApplication) GetCoverMediaUrl() string {
	if x != nil {
		return x.CoverMediaUrl
	}
	return ""
}

func (x *DevOauthApplication) GetScreenshotMediaUrls() []string {
	if x != nil {
		return x.ScreenshotMediaUrls
	}
	return nil
}

func (x *DevOauthApplication) GetPrivacyPolicyUrl() string {
	if x != nil {
		return x.PrivacyPolicyUrl
	}
	return ""
}

func (x *DevOauthApplication) GetSupportEmail() string {
	if x != nil {
		return x.SupportEmail
	}
	return ""
}

func (x *DevOauthApplication) GetRegions() []string {
	if x != nil {
		return x.Regions
	}
	return nil
}

func (x *DevOauthApplication) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *DevOauthApplication) GetExternalUrl() string {
	if x != nil {
		return x.ExternalUrl
	}
	return ""
}

func (x *DevOauthApplication) GetEmbeddedUrl() string {
	if x != nil {
		return x.EmbeddedUrl
	}
	return ""
}

func (x *DevOauthApplication) GetGrantsRequired() map[string]*ListOfString {
	if x != nil {
		return x.GrantsRequired
	}
	return nil
}

func (x *DevOauthApplication) GetScopes() string {
	if x != nil {
		return x.Scopes
	}
	return ""
}

func (x *DevOauthApplication) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *DevOauthApplication) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *DevOauthApplication) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DevOauthApplication) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *DevOauthApplication) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *DevOauthApplication) GetRedirectUri() string {
	if x != nil {
		return x.RedirectUri
	}
	return ""
}

func (x *DevOauthApplication) GetSupportedVersions() []string {
	if x != nil {
		return x.SupportedVersions
	}
	return nil
}

func (x *DevOauthApplication) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DevOauthApplication) GetListingUrl() string {
	if x != nil {
		return x.ListingUrl
	}
	return ""
}

func (x *DevOauthApplication) GetLaunchUrl() string {
	if x != nil {
		return x.LaunchUrl
	}
	return ""
}

func (x *DevOauthApplication) GetSeoSlug() string {
	if x != nil {
		return x.SeoSlug
	}
	return ""
}

func (x *DevOauthApplication) GetSeoKeywords() string {
	if x != nil {
		return x.SeoKeywords
	}
	return ""
}

func (x *DevOauthApplication) GetSeoTitleTranslations() *Translatable {
	if x != nil {
		return x.SeoTitleTranslations
	}
	return nil
}

func (x *DevOauthApplication) GetSeoDescriptionTranslations() *Translatable {
	if x != nil {
		return x.SeoDescriptionTranslations
	}
	return nil
}

func (x *DevOauthApplication) GetAvgReviewRating() int32 {
	if x != nil {
		return x.AvgReviewRating
	}
	return 0
}

func (x *DevOauthApplication) GetReviewRatings() *ApplicationReviewRatings {
	if x != nil {
		return x.ReviewRatings
	}
	return nil
}

func (x *DevOauthApplication) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DevOauthApplication) GetRolloutKeys() []string {
	if x != nil {
		return x.RolloutKeys
	}
	return nil
}

func (x *DevOauthApplication) GetAvailabilityRolloutKey() string {
	if x != nil {
		return x.AvailabilityRolloutKey
	}
	return ""
}

func (x *DevOauthApplication) GetBuiltIn() *MerchantServiceConfig {
	if x != nil {
		return x.BuiltIn
	}
	return nil
}

func (x *DevOauthApplication) GetAvailable() *MerchantServiceConfig {
	if x != nil {
		return x.Available
	}
	return nil
}

func (x *DevOauthApplication) GetVisible() *MerchantServiceConfig {
	if x != nil {
		return x.Visible
	}
	return nil
}

func (x *DevOauthApplication) GetInstallType() string {
	if x != nil {
		return x.InstallType
	}
	return ""
}

func (x *DevOauthApplication) GetRequiresSetup() bool {
	if x != nil {
		return x.RequiresSetup
	}
	return false
}

func (x *DevOauthApplication) GetFaqLinkTranslations() *Translatable {
	if x != nil {
		return x.FaqLinkTranslations
	}
	return nil
}

func (x *DevOauthApplication) GetActionButtonSettings() *ActionButtonSettings {
	if x != nil {
		return x.ActionButtonSettings
	}
	return nil
}

func (x *DevOauthApplication) GetAppTermAndConditions() string {
	if x != nil {
		return x.AppTermAndConditions
	}
	return ""
}

func (x *DevOauthApplication) GetBusinessName() string {
	if x != nil {
		return x.BusinessName
	}
	return ""
}

type PurchasableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationIds      []string `protobuf:"bytes,1,rep,name=application_ids,json=applicationIds,proto3" json:"application_ids,omitempty"`
	BundleIds           []string `protobuf:"bytes,2,rep,name=bundle_ids,json=bundleIds,proto3" json:"bundle_ids,omitempty"`
	BillingCurrencyCode string   `protobuf:"bytes,3,opt,name=billing_currency_code,json=billingCurrencyCode,proto3" json:"billing_currency_code,omitempty"`
	BillingCycle        string   `protobuf:"bytes,4,opt,name=billing_cycle,json=billingCycle,proto3" json:"billing_cycle,omitempty"`
}

func (x *PurchasableRequest) Reset() {
	*x = PurchasableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchasableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchasableRequest) ProtoMessage() {}

func (x *PurchasableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchasableRequest.ProtoReflect.Descriptor instead.
func (*PurchasableRequest) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{16}
}

func (x *PurchasableRequest) GetApplicationIds() []string {
	if x != nil {
		return x.ApplicationIds
	}
	return nil
}

func (x *PurchasableRequest) GetBundleIds() []string {
	if x != nil {
		return x.BundleIds
	}
	return nil
}

func (x *PurchasableRequest) GetBillingCurrencyCode() string {
	if x != nil {
		return x.BillingCurrencyCode
	}
	return ""
}

func (x *PurchasableRequest) GetBillingCycle() string {
	if x != nil {
		return x.BillingCycle
	}
	return ""
}

type PurchasableReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result map[string]bool `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *PurchasableReply) Reset() {
	*x = PurchasableReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchasableReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchasableReply) ProtoMessage() {}

func (x *PurchasableReply) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchasableReply.ProtoReflect.Descriptor instead.
func (*PurchasableReply) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{17}
}

func (x *PurchasableReply) GetResult() map[string]bool {
	if x != nil {
		return x.Result
	}
	return nil
}

type ScreenshotUrls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Urls []string `protobuf:"bytes,1,rep,name=urls,proto3" json:"urls,omitempty"`
}

func (x *ScreenshotUrls) Reset() {
	*x = ScreenshotUrls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenshotUrls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenshotUrls) ProtoMessage() {}

func (x *ScreenshotUrls) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenshotUrls.ProtoReflect.Descriptor instead.
func (*ScreenshotUrls) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{18}
}

func (x *ScreenshotUrls) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

type DetailedPurchasableContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values map[string]string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DetailedPurchasableContext) Reset() {
	*x = DetailedPurchasableContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailedPurchasableContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailedPurchasableContext) ProtoMessage() {}

func (x *DetailedPurchasableContext) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailedPurchasableContext.ProtoReflect.Descriptor instead.
func (*DetailedPurchasableContext) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{19}
}

func (x *DetailedPurchasableContext) GetValues() map[string]string {
	if x != nil {
		return x.Values
	}
	return nil
}

type WebhookStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *WebhookStatus) Reset() {
	*x = WebhookStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookStatus) ProtoMessage() {}

func (x *WebhookStatus) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookStatus.ProtoReflect.Descriptor instead.
func (*WebhookStatus) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{20}
}

func (x *WebhookStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *WebhookStatus) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// Deprecated: Do not use.
type AppBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId          string                 `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
	Enable       bool                   `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
	Name         string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Pages        []string               `protobuf:"bytes,4,rep,name=pages,proto3" json:"pages,omitempty"`
	Target       string                 `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
	Template     string                 `protobuf:"bytes,6,opt,name=template,proto3" json:"template,omitempty"`
	LastEditedBy *User                  `protobuf:"bytes,7,opt,name=last_edited_by,json=lastEditedBy,proto3" json:"last_edited_by,omitempty"`
	LastEditedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_edited_at,json=lastEditedAt,proto3" json:"last_edited_at,omitempty"`
}

func (x *AppBlock) Reset() {
	*x = AppBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppBlock) ProtoMessage() {}

func (x *AppBlock) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppBlock.ProtoReflect.Descriptor instead.
func (*AppBlock) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{21}
}

func (x *AppBlock) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

func (x *AppBlock) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *AppBlock) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AppBlock) GetPages() []string {
	if x != nil {
		return x.Pages
	}
	return nil
}

func (x *AppBlock) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *AppBlock) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *AppBlock) GetLastEditedBy() *User {
	if x != nil {
		return x.LastEditedBy
	}
	return nil
}

func (x *AppBlock) GetLastEditedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastEditedAt
	}
	return nil
}

type AppScript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId          string                 `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
	Enable       bool                   `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
	Name         string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Pages        []string               `protobuf:"bytes,4,rep,name=pages,proto3" json:"pages,omitempty"`
	Target       string                 `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
	Template     string                 `protobuf:"bytes,6,opt,name=template,proto3" json:"template,omitempty"`
	LastEditedBy *User                  `protobuf:"bytes,7,opt,name=last_edited_by,json=lastEditedBy,proto3" json:"last_edited_by,omitempty"`
	LastEditedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_edited_at,json=lastEditedAt,proto3" json:"last_edited_at,omitempty"`
}

func (x *AppScript) Reset() {
	*x = AppScript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppScript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppScript) ProtoMessage() {}

func (x *AppScript) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppScript.ProtoReflect.Descriptor instead.
func (*AppScript) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{22}
}

func (x *AppScript) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

func (x *AppScript) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *AppScript) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AppScript) GetPages() []string {
	if x != nil {
		return x.Pages
	}
	return nil
}

func (x *AppScript) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *AppScript) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *AppScript) GetLastEditedBy() *User {
	if x != nil {
		return x.LastEditedBy
	}
	return nil
}

func (x *AppScript) GetLastEditedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastEditedAt
	}
	return nil
}

// Deprecated: Do not use.
type AppBlockUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId  string                                   `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
	Type AppBlockUpdateRequest_AppBlockUpdateType `protobuf:"varint,2,opt,name=type,proto3,enum=DeveloperApi.AppBlockUpdateRequest_AppBlockUpdateType" json:"type,omitempty"`
	Data *AppBlockUpdateData                      `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AppBlockUpdateRequest) Reset() {
	*x = AppBlockUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppBlockUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppBlockUpdateRequest) ProtoMessage() {}

func (x *AppBlockUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppBlockUpdateRequest.ProtoReflect.Descriptor instead.
func (*AppBlockUpdateRequest) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{23}
}

func (x *AppBlockUpdateRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

func (x *AppBlockUpdateRequest) GetType() AppBlockUpdateRequest_AppBlockUpdateType {
	if x != nil {
		return x.Type
	}
	return AppBlockUpdateRequest_ADD
}

func (x *AppBlockUpdateRequest) GetData() *AppBlockUpdateData {
	if x != nil {
		return x.Data
	}
	return nil
}

type AppScriptUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId  string                                     `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
	Type AppScriptUpdateRequest_AppScriptUpdateType `protobuf:"varint,2,opt,name=type,proto3,enum=DeveloperApi.AppScriptUpdateRequest_AppScriptUpdateType" json:"type,omitempty"`
	Data *AppScriptUpdateData                       `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AppScriptUpdateRequest) Reset() {
	*x = AppScriptUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppScriptUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppScriptUpdateRequest) ProtoMessage() {}

func (x *AppScriptUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppScriptUpdateRequest.ProtoReflect.Descriptor instead.
func (*AppScriptUpdateRequest) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{24}
}

func (x *AppScriptUpdateRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

func (x *AppScriptUpdateRequest) GetType() AppScriptUpdateRequest_AppScriptUpdateType {
	if x != nil {
		return x.Type
	}
	return AppScriptUpdateRequest_ADD
}

func (x *AppScriptUpdateRequest) GetData() *AppScriptUpdateData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Deprecated: Do not use.
type AppBlockUpdateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable   bool     `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	Name     string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Pages    []string `protobuf:"bytes,3,rep,name=pages,proto3" json:"pages,omitempty"`
	Target   string   `protobuf:"bytes,4,opt,name=target,proto3" json:"target,omitempty"`
	Template string   `protobuf:"bytes,5,opt,name=template,proto3" json:"template,omitempty"`
}

func (x *AppBlockUpdateData) Reset() {
	*x = AppBlockUpdateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppBlockUpdateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppBlockUpdateData) ProtoMessage() {}

func (x *AppBlockUpdateData) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppBlockUpdateData.ProtoReflect.Descriptor instead.
func (*AppBlockUpdateData) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{25}
}

func (x *AppBlockUpdateData) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *AppBlockUpdateData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AppBlockUpdateData) GetPages() []string {
	if x != nil {
		return x.Pages
	}
	return nil
}

func (x *AppBlockUpdateData) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *AppBlockUpdateData) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

type AppScriptUpdateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable   bool     `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	Name     string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Pages    []string `protobuf:"bytes,3,rep,name=pages,proto3" json:"pages,omitempty"`
	Target   string   `protobuf:"bytes,4,opt,name=target,proto3" json:"target,omitempty"`
	Template string   `protobuf:"bytes,5,opt,name=template,proto3" json:"template,omitempty"`
}

func (x *AppScriptUpdateData) Reset() {
	*x = AppScriptUpdateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppScriptUpdateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppScriptUpdateData) ProtoMessage() {}

func (x *AppScriptUpdateData) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppScriptUpdateData.ProtoReflect.Descriptor instead.
func (*AppScriptUpdateData) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{26}
}

func (x *AppScriptUpdateData) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *AppScriptUpdateData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AppScriptUpdateData) GetPages() []string {
	if x != nil {
		return x.Pages
	}
	return nil
}

func (x *AppScriptUpdateData) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *AppScriptUpdateData) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

type AdminLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId                string                 `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
	Name               string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type               string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	AppUrlType         string                 `protobuf:"bytes,4,opt,name=app_url_type,json=appUrlType,proto3" json:"app_url_type,omitempty"`
	MethodType         string                 `protobuf:"bytes,5,opt,name=method_type,json=methodType,proto3" json:"method_type,omitempty"`
	AppUrl             string                 `protobuf:"bytes,6,opt,name=app_url,json=appUrl,proto3" json:"app_url,omitempty"`
	CallbackUrl        string                 `protobuf:"bytes,8,opt,name=callback_url,json=callbackUrl,proto3" json:"callback_url,omitempty"`
	IsTaskUrlSet       bool                   `protobuf:"varint,9,opt,name=is_task_url_set,json=isTaskUrlSet,proto3" json:"is_task_url_set,omitempty"`
	PageKey            string                 `protobuf:"bytes,10,opt,name=page_key,json=pageKey,proto3" json:"page_key,omitempty"`
	UiHookKey          string                 `protobuf:"bytes,11,opt,name=ui_hook_key,json=uiHookKey,proto3" json:"ui_hook_key,omitempty"`
	UiHookPosition     string                 `protobuf:"bytes,12,opt,name=ui_hook_position,json=uiHookPosition,proto3" json:"ui_hook_position,omitempty"`
	LabelTranslations  map[string]string      `protobuf:"bytes,13,rep,name=label_translations,json=labelTranslations,proto3" json:"label_translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IconUrl            string                 `protobuf:"bytes,14,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	LastEditedBy       *User                  `protobuf:"bytes,15,opt,name=last_edited_by,json=lastEditedBy,proto3" json:"last_edited_by,omitempty"`
	LastEditedAt       *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=last_edited_at,json=lastEditedAt,proto3" json:"last_edited_at,omitempty"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	AdminEmbeddedAppId string                 `protobuf:"bytes,18,opt,name=admin_embedded_app_id,json=adminEmbeddedAppId,proto3" json:"admin_embedded_app_id,omitempty"`
}

func (x *AdminLink) Reset() {
	*x = AdminLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminLink) ProtoMessage() {}

func (x *AdminLink) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminLink.ProtoReflect.Descriptor instead.
func (*AdminLink) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{27}
}

func (x *AdminLink) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

func (x *AdminLink) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AdminLink) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AdminLink) GetAppUrlType() string {
	if x != nil {
		return x.AppUrlType
	}
	return ""
}

func (x *AdminLink) GetMethodType() string {
	if x != nil {
		return x.MethodType
	}
	return ""
}

func (x *AdminLink) GetAppUrl() string {
	if x != nil {
		return x.AppUrl
	}
	return ""
}

func (x *AdminLink) GetCallbackUrl() string {
	if x != nil {
		return x.CallbackUrl
	}
	return ""
}

func (x *AdminLink) GetIsTaskUrlSet() bool {
	if x != nil {
		return x.IsTaskUrlSet
	}
	return false
}

func (x *AdminLink) GetPageKey() string {
	if x != nil {
		return x.PageKey
	}
	return ""
}

func (x *AdminLink) GetUiHookKey() string {
	if x != nil {
		return x.UiHookKey
	}
	return ""
}

func (x *AdminLink) GetUiHookPosition() string {
	if x != nil {
		return x.UiHookPosition
	}
	return ""
}

func (x *AdminLink) GetLabelTranslations() map[string]string {
	if x != nil {
		return x.LabelTranslations
	}
	return nil
}

func (x *AdminLink) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *AdminLink) GetLastEditedBy() *User {
	if x != nil {
		return x.LastEditedBy
	}
	return nil
}

func (x *AdminLink) GetLastEditedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastEditedAt
	}
	return nil
}

func (x *AdminLink) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AdminLink) GetAdminEmbeddedAppId() string {
	if x != nil {
		return x.AdminEmbeddedAppId
	}
	return ""
}

type AdminLinkUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId  string                                     `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
	Type AdminLinkUpdateRequest_AdminLinkUpdateType `protobuf:"varint,2,opt,name=type,proto3,enum=DeveloperApi.AdminLinkUpdateRequest_AdminLinkUpdateType" json:"type,omitempty"`
	Data *AdminLinkUpdateData                       `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AdminLinkUpdateRequest) Reset() {
	*x = AdminLinkUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminLinkUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminLinkUpdateRequest) ProtoMessage() {}

func (x *AdminLinkUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminLinkUpdateRequest.ProtoReflect.Descriptor instead.
func (*AdminLinkUpdateRequest) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{28}
}

func (x *AdminLinkUpdateRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

func (x *AdminLinkUpdateRequest) GetType() AdminLinkUpdateRequest_AdminLinkUpdateType {
	if x != nil {
		return x.Type
	}
	return AdminLinkUpdateRequest_ADD
}

func (x *AdminLinkUpdateRequest) GetData() *AdminLinkUpdateData {
	if x != nil {
		return x.Data
	}
	return nil
}

type AdminLinkUpdateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type               string            `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	AppUrlType         string            `protobuf:"bytes,3,opt,name=app_url_type,json=appUrlType,proto3" json:"app_url_type,omitempty"`
	MethodType         string            `protobuf:"bytes,4,opt,name=method_type,json=methodType,proto3" json:"method_type,omitempty"`
	AppUrl             string            `protobuf:"bytes,5,opt,name=app_url,json=appUrl,proto3" json:"app_url,omitempty"`
	CallbackUrl        string            `protobuf:"bytes,7,opt,name=callback_url,json=callbackUrl,proto3" json:"callback_url,omitempty"`
	IsTaskUrlSet       bool              `protobuf:"varint,8,opt,name=is_task_url_set,json=isTaskUrlSet,proto3" json:"is_task_url_set,omitempty"`
	PageKey            string            `protobuf:"bytes,9,opt,name=page_key,json=pageKey,proto3" json:"page_key,omitempty"`
	UiHookKey          string            `protobuf:"bytes,10,opt,name=ui_hook_key,json=uiHookKey,proto3" json:"ui_hook_key,omitempty"`
	UiHookPosition     string            `protobuf:"bytes,11,opt,name=ui_hook_position,json=uiHookPosition,proto3" json:"ui_hook_position,omitempty"`
	LabelTranslations  map[string]string `protobuf:"bytes,12,rep,name=label_translations,json=labelTranslations,proto3" json:"label_translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IconUrl            string            `protobuf:"bytes,13,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	AdminEmbeddedAppId string            `protobuf:"bytes,14,opt,name=admin_embedded_app_id,json=adminEmbeddedAppId,proto3" json:"admin_embedded_app_id,omitempty"`
}

func (x *AdminLinkUpdateData) Reset() {
	*x = AdminLinkUpdateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminLinkUpdateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminLinkUpdateData) ProtoMessage() {}

func (x *AdminLinkUpdateData) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminLinkUpdateData.ProtoReflect.Descriptor instead.
func (*AdminLinkUpdateData) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{29}
}

func (x *AdminLinkUpdateData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AdminLinkUpdateData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AdminLinkUpdateData) GetAppUrlType() string {
	if x != nil {
		return x.AppUrlType
	}
	return ""
}

func (x *AdminLinkUpdateData) GetMethodType() string {
	if x != nil {
		return x.MethodType
	}
	return ""
}

func (x *AdminLinkUpdateData) GetAppUrl() string {
	if x != nil {
		return x.AppUrl
	}
	return ""
}

func (x *AdminLinkUpdateData) GetCallbackUrl() string {
	if x != nil {
		return x.CallbackUrl
	}
	return ""
}

func (x *AdminLinkUpdateData) GetIsTaskUrlSet() bool {
	if x != nil {
		return x.IsTaskUrlSet
	}
	return false
}

func (x *AdminLinkUpdateData) GetPageKey() string {
	if x != nil {
		return x.PageKey
	}
	return ""
}

func (x *AdminLinkUpdateData) GetUiHookKey() string {
	if x != nil {
		return x.UiHookKey
	}
	return ""
}

func (x *AdminLinkUpdateData) GetUiHookPosition() string {
	if x != nil {
		return x.UiHookPosition
	}
	return ""
}

func (x *AdminLinkUpdateData) GetLabelTranslations() map[string]string {
	if x != nil {
		return x.LabelTranslations
	}
	return nil
}

func (x *AdminLinkUpdateData) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *AdminLinkUpdateData) GetAdminEmbeddedAppId() string {
	if x != nil {
		return x.AdminEmbeddedAppId
	}
	return ""
}

type AdminEmbeddedApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId          string                 `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
	Route        string                 `protobuf:"bytes,2,opt,name=route,proto3" json:"route,omitempty"`
	AppUrl       string                 `protobuf:"bytes,3,opt,name=app_url,json=appUrl,proto3" json:"app_url,omitempty"`
	LastEditedBy *User                  `protobuf:"bytes,4,opt,name=last_edited_by,json=lastEditedBy,proto3" json:"last_edited_by,omitempty"`
	LastEditedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_edited_at,json=lastEditedAt,proto3" json:"last_edited_at,omitempty"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *AdminEmbeddedApp) Reset() {
	*x = AdminEmbeddedApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminEmbeddedApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminEmbeddedApp) ProtoMessage() {}

func (x *AdminEmbeddedApp) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminEmbeddedApp.ProtoReflect.Descriptor instead.
func (*AdminEmbeddedApp) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{30}
}

func (x *AdminEmbeddedApp) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

func (x *AdminEmbeddedApp) GetRoute() string {
	if x != nil {
		return x.Route
	}
	return ""
}

func (x *AdminEmbeddedApp) GetAppUrl() string {
	if x != nil {
		return x.AppUrl
	}
	return ""
}

func (x *AdminEmbeddedApp) GetLastEditedBy() *User {
	if x != nil {
		return x.LastEditedBy
	}
	return nil
}

func (x *AdminEmbeddedApp) GetLastEditedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastEditedAt
	}
	return nil
}

func (x *AdminEmbeddedApp) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type AdminEmbeddedAppUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XId  string                                                   `protobuf:"bytes,1,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
	Type AdminEmbeddedAppUpdateRequest_AdminEmbeddedAppUpdateType `protobuf:"varint,2,opt,name=type,proto3,enum=DeveloperApi.AdminEmbeddedAppUpdateRequest_AdminEmbeddedAppUpdateType" json:"type,omitempty"`
	Data *AdminEmbeddedAppUpdateData                              `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AdminEmbeddedAppUpdateRequest) Reset() {
	*x = AdminEmbeddedAppUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminEmbeddedAppUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminEmbeddedAppUpdateRequest) ProtoMessage() {}

func (x *AdminEmbeddedAppUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminEmbeddedAppUpdateRequest.ProtoReflect.Descriptor instead.
func (*AdminEmbeddedAppUpdateRequest) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{31}
}

func (x *AdminEmbeddedAppUpdateRequest) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

func (x *AdminEmbeddedAppUpdateRequest) GetType() AdminEmbeddedAppUpdateRequest_AdminEmbeddedAppUpdateType {
	if x != nil {
		return x.Type
	}
	return AdminEmbeddedAppUpdateRequest_ADD
}

func (x *AdminEmbeddedAppUpdateRequest) GetData() *AdminEmbeddedAppUpdateData {
	if x != nil {
		return x.Data
	}
	return nil
}

type AdminEmbeddedAppUpdateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppUrl string `protobuf:"bytes,1,opt,name=app_url,json=appUrl,proto3" json:"app_url,omitempty"`
	Route  string `protobuf:"bytes,2,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *AdminEmbeddedAppUpdateData) Reset() {
	*x = AdminEmbeddedAppUpdateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminEmbeddedAppUpdateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminEmbeddedAppUpdateData) ProtoMessage() {}

func (x *AdminEmbeddedAppUpdateData) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminEmbeddedAppUpdateData.ProtoReflect.Descriptor instead.
func (*AdminEmbeddedAppUpdateData) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{32}
}

func (x *AdminEmbeddedAppUpdateData) GetAppUrl() string {
	if x != nil {
		return x.AppUrl
	}
	return ""
}

func (x *AdminEmbeddedAppUpdateData) GetRoute() string {
	if x != nil {
		return x.Route
	}
	return ""
}

type AppUpdateListingStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // this is the application_id
	ListingStatus          LISTINGSTATUS `protobuf:"varint,2,opt,name=listing_status,json=listingStatus,proto3,enum=DeveloperApi.LISTINGSTATUS" json:"listing_status,omitempty"`
	WhitelistedMerchantIds string        `protobuf:"bytes,3,opt,name=whitelisted_merchant_ids,json=whitelistedMerchantIds,proto3" json:"whitelisted_merchant_ids,omitempty"`
}

func (x *AppUpdateListingStatusRequest) Reset() {
	*x = AppUpdateListingStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppUpdateListingStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppUpdateListingStatusRequest) ProtoMessage() {}

func (x *AppUpdateListingStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppUpdateListingStatusRequest.ProtoReflect.Descriptor instead.
func (*AppUpdateListingStatusRequest) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{33}
}

func (x *AppUpdateListingStatusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AppUpdateListingStatusRequest) GetListingStatus() LISTINGSTATUS {
	if x != nil {
		return x.ListingStatus
	}
	return LISTINGSTATUS_LISTED
}

func (x *AppUpdateListingStatusRequest) GetWhitelistedMerchantIds() string {
	if x != nil {
		return x.WhitelistedMerchantIds
	}
	return ""
}

type AppUpdateListingStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // this is the application_id
	ListingStatus          LISTINGSTATUS `protobuf:"varint,2,opt,name=listing_status,json=listingStatus,proto3,enum=DeveloperApi.LISTINGSTATUS" json:"listing_status,omitempty"`
	WhitelistedMerchantIds string        `protobuf:"bytes,3,opt,name=whitelisted_merchant_ids,json=whitelistedMerchantIds,proto3" json:"whitelisted_merchant_ids,omitempty"`
}

func (x *AppUpdateListingStatusResponse) Reset() {
	*x = AppUpdateListingStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppUpdateListingStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppUpdateListingStatusResponse) ProtoMessage() {}

func (x *AppUpdateListingStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppUpdateListingStatusResponse.ProtoReflect.Descriptor instead.
func (*AppUpdateListingStatusResponse) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{34}
}

func (x *AppUpdateListingStatusResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AppUpdateListingStatusResponse) GetListingStatus() LISTINGSTATUS {
	if x != nil {
		return x.ListingStatus
	}
	return LISTINGSTATUS_LISTED
}

func (x *AppUpdateListingStatusResponse) GetWhitelistedMerchantIds() string {
	if x != nil {
		return x.WhitelistedMerchantIds
	}
	return ""
}

type AppUnpublishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // this is the application_id
	DeveloperId string `protobuf:"bytes,37,opt,name=developer_id,json=developerId,proto3" json:"developer_id,omitempty"`
	PerformerId string `protobuf:"bytes,38,opt,name=performer_id,json=performerId,proto3" json:"performer_id,omitempty"`
}

func (x *AppUnpublishRequest) Reset() {
	*x = AppUnpublishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppUnpublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppUnpublishRequest) ProtoMessage() {}

func (x *AppUnpublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppUnpublishRequest.ProtoReflect.Descriptor instead.
func (*AppUnpublishRequest) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{35}
}

func (x *AppUnpublishRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AppUnpublishRequest) GetDeveloperId() string {
	if x != nil {
		return x.DeveloperId
	}
	return ""
}

func (x *AppUnpublishRequest) GetPerformerId() string {
	if x != nil {
		return x.PerformerId
	}
	return ""
}

type AppUnpublishResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // this is the application_id
	PublishStatus PUBLISHSTATUS `protobuf:"varint,36,opt,name=publish_status,json=publishStatus,proto3,enum=DeveloperApi.PUBLISHSTATUS" json:"publish_status,omitempty"`
}

func (x *AppUnpublishResponse) Reset() {
	*x = AppUnpublishResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppUnpublishResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppUnpublishResponse) ProtoMessage() {}

func (x *AppUnpublishResponse) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppUnpublishResponse.ProtoReflect.Descriptor instead.
func (*AppUnpublishResponse) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{36}
}

func (x *AppUnpublishResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AppUnpublishResponse) GetPublishStatus() PUBLISHSTATUS {
	if x != nil {
		return x.PublishStatus
	}
	return PUBLISHSTATUS_PUBLISHED
}

type AppRecoverWebhookStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // this is the application_id
	DeveloperId string `protobuf:"bytes,2,opt,name=developer_id,json=developerId,proto3" json:"developer_id,omitempty"`
	PerformerId string `protobuf:"bytes,3,opt,name=performer_id,json=performerId,proto3" json:"performer_id,omitempty"`
}

func (x *AppRecoverWebhookStatusRequest) Reset() {
	*x = AppRecoverWebhookStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppRecoverWebhookStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppRecoverWebhookStatusRequest) ProtoMessage() {}

func (x *AppRecoverWebhookStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppRecoverWebhookStatusRequest.ProtoReflect.Descriptor instead.
func (*AppRecoverWebhookStatusRequest) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{37}
}

func (x *AppRecoverWebhookStatusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AppRecoverWebhookStatusRequest) GetDeveloperId() string {
	if x != nil {
		return x.DeveloperId
	}
	return ""
}

func (x *AppRecoverWebhookStatusRequest) GetPerformerId() string {
	if x != nil {
		return x.PerformerId
	}
	return ""
}

type EmergencyContactIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmergencyContactIndexRequest) Reset() {
	*x = EmergencyContactIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmergencyContactIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmergencyContactIndexRequest) ProtoMessage() {}

func (x *EmergencyContactIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmergencyContactIndexRequest.ProtoReflect.Descriptor instead.
func (*EmergencyContactIndexRequest) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{38}
}

type EmergencyContactIndexReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*EmergencyContact `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *EmergencyContactIndexReply) Reset() {
	*x = EmergencyContactIndexReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmergencyContactIndexReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmergencyContactIndexReply) ProtoMessage() {}

func (x *EmergencyContactIndexReply) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmergencyContactIndexReply.ProtoReflect.Descriptor instead.
func (*EmergencyContactIndexReply) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{39}
}

func (x *EmergencyContactIndexReply) GetItems() []*EmergencyContact {
	if x != nil {
		return x.Items
	}
	return nil
}

type EmergencyContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeveloperName           string `protobuf:"bytes,1,opt,name=developer_name,json=developerName,proto3" json:"developer_name,omitempty"`
	AppName                 string `protobuf:"bytes,2,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	EmergencyDeveloperName  string `protobuf:"bytes,3,opt,name=emergency_developer_name,json=emergencyDeveloperName,proto3" json:"emergency_developer_name,omitempty"`
	EmergencyDeveloperEmail string `protobuf:"bytes,4,opt,name=emergency_developer_email,json=emergencyDeveloperEmail,proto3" json:"emergency_developer_email,omitempty"`
	ApplicationId           string `protobuf:"bytes,5,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
}

func (x *EmergencyContact) Reset() {
	*x = EmergencyContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmergencyContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmergencyContact) ProtoMessage() {}

func (x *EmergencyContact) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmergencyContact.ProtoReflect.Descriptor instead.
func (*EmergencyContact) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{40}
}

func (x *EmergencyContact) GetDeveloperName() string {
	if x != nil {
		return x.DeveloperName
	}
	return ""
}

func (x *EmergencyContact) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *EmergencyContact) GetEmergencyDeveloperName() string {
	if x != nil {
		return x.EmergencyDeveloperName
	}
	return ""
}

func (x *EmergencyContact) GetEmergencyDeveloperEmail() string {
	if x != nil {
		return x.EmergencyDeveloperEmail
	}
	return ""
}

func (x *EmergencyContact) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

type BasicAppReportIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartDate string `protobuf:"bytes,7,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate   string `protobuf:"bytes,8,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
}

func (x *BasicAppReportIndexRequest) Reset() {
	*x = BasicAppReportIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicAppReportIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicAppReportIndexRequest) ProtoMessage() {}

func (x *BasicAppReportIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicAppReportIndexRequest.ProtoReflect.Descriptor instead.
func (*BasicAppReportIndexRequest) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{41}
}

func (x *BasicAppReportIndexRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *BasicAppReportIndexRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

type BasicAppReportIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*BacicAppReport `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *BasicAppReportIndexResponse) Reset() {
	*x = BasicAppReportIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicAppReportIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicAppReportIndexResponse) ProtoMessage() {}

func (x *BasicAppReportIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicAppReportIndexResponse.ProtoReflect.Descriptor instead.
func (*BasicAppReportIndexResponse) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{42}
}

func (x *BasicAppReportIndexResponse) GetItems() []*BacicAppReport {
	if x != nil {
		return x.Items
	}
	return nil
}

type BacicAppReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationId                string `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	AppName                      string `protobuf:"bytes,2,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	InstallationCount            int32  `protobuf:"varint,3,opt,name=installation_count,json=installationCount,proto3" json:"installation_count,omitempty"`
	AccumulatedInstallationCount int32  `protobuf:"varint,4,opt,name=accumulated_installation_count,json=accumulatedInstallationCount,proto3" json:"accumulated_installation_count,omitempty"`
}

func (x *BacicAppReport) Reset() {
	*x = BacicAppReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BacicAppReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BacicAppReport) ProtoMessage() {}

func (x *BacicAppReport) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BacicAppReport.ProtoReflect.Descriptor instead.
func (*BacicAppReport) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{43}
}

func (x *BacicAppReport) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *BacicAppReport) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *BacicAppReport) GetInstallationCount() int32 {
	if x != nil {
		return x.InstallationCount
	}
	return 0
}

func (x *BacicAppReport) GetAccumulatedInstallationCount() int32 {
	if x != nil {
		return x.AccumulatedInstallationCount
	}
	return 0
}

type AppStoreListingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PerPage                  int32    `protobuf:"varint,1,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	Page                     int32    `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	MerchantId               string   `protobuf:"bytes,3,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	BaseCurrencyCode         string   `protobuf:"bytes,4,opt,name=base_currency_code,json=baseCurrencyCode,proto3" json:"base_currency_code,omitempty"`
	SubscriptionCurrencyCode string   `protobuf:"bytes,5,opt,name=subscription_currency_code,json=subscriptionCurrencyCode,proto3" json:"subscription_currency_code,omitempty"`
	CategoryIds              []string `protobuf:"bytes,6,rep,name=category_ids,json=categoryIds,proto3" json:"category_ids,omitempty"`
}

func (x *AppStoreListingRequest) Reset() {
	*x = AppStoreListingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppStoreListingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppStoreListingRequest) ProtoMessage() {}

func (x *AppStoreListingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppStoreListingRequest.ProtoReflect.Descriptor instead.
func (*AppStoreListingRequest) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{44}
}

func (x *AppStoreListingRequest) GetPerPage() int32 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *AppStoreListingRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *AppStoreListingRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *AppStoreListingRequest) GetBaseCurrencyCode() string {
	if x != nil {
		return x.BaseCurrencyCode
	}
	return ""
}

func (x *AppStoreListingRequest) GetSubscriptionCurrencyCode() string {
	if x != nil {
		return x.SubscriptionCurrencyCode
	}
	return ""
}

func (x *AppStoreListingRequest) GetCategoryIds() []string {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

type AppStoreDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Slug                     string `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	MerchantId               string `protobuf:"bytes,3,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	BaseCurrencyCode         string `protobuf:"bytes,4,opt,name=base_currency_code,json=baseCurrencyCode,proto3" json:"base_currency_code,omitempty"`
	SubscriptionCurrencyCode string `protobuf:"bytes,5,opt,name=subscription_currency_code,json=subscriptionCurrencyCode,proto3" json:"subscription_currency_code,omitempty"`
}

func (x *AppStoreDetailRequest) Reset() {
	*x = AppStoreDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_applications_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppStoreDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppStoreDetailRequest) ProtoMessage() {}

func (x *AppStoreDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_applications_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppStoreDetailRequest.ProtoReflect.Descriptor instead.
func (*AppStoreDetailRequest) Descriptor() ([]byte, []int) {
	return file_applications_proto_rawDescGZIP(), []int{45}
}

func (x *AppStoreDetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AppStoreDetailRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *AppStoreDetailRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

func (x *AppStoreDetailRequest) GetBaseCurrencyCode() string {
	if x != nil {
		return x.BaseCurrencyCode
	}
	return ""
}

func (x *AppStoreDetailRequest) GetSubscriptionCurrencyCode() string {
	if x != nil {
		return x.SubscriptionCurrencyCode
	}
	return ""
}

var File_applications_proto protoreflect.FileDescriptor

var file_applications_proto_rawDesc = []byte{
	0x0a, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41,
	0x70, 0x69, 0x1a, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xee, 0x05, 0x0a, 0x0f, 0x41,
	0x70, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x66, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x42, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41,
	0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x59, 0x53, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x3a, 0x0a,
	0x19, 0x64, 0x6f, 0x6f, 0x72, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x64, 0x6f, 0x6f, 0x72, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0a, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x49, 0x53,
	0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6c, 0x75, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67,
	0x12, 0x2c, 0x0a, 0x12, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x61,
	0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3c,
	0x0a, 0x1a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x73, 0x22, 0x1e, 0x0a, 0x09, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x59, 0x53, 0x12,
	0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43,
	0x10, 0x01, 0x22, 0x37, 0x0a, 0x0a, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x55, 0x4e, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02, 0x22, 0x7f, 0x0a, 0x0d, 0x41,
	0x70, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x44, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x98, 0x01, 0x0a,
	0x10, 0x41, 0x70, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xac, 0x02, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x53,
	0x68, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c,
	0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x74, 0x0a, 0x16, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0x95, 0x01, 0x0a,
	0x12, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x6f, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x4d, 0x61, 0x70, 0x12, 0x44, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41,
	0x70, 0x69, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x6f, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x4d, 0x61, 0x70, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xa5, 0x29, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x35, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x4f, 0x44, 0x45, 0x53, 0x52,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
	0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x0e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x41, 0x70, 0x69, 0x2e, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x42, 0x0a, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x4c, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x11, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x4f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6e, 0x61,
	0x6d, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6a,
	0x0a, 0x14, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x50, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x44,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x76, 0x0a, 0x18, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x51, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x44,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x76, 0x0a, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x52,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x53, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x12, 0x7b, 0x0a,
	0x1b, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x54, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70,
	0x69, 0x2e, 0x41, 0x70, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x18, 0x6c, 0x6f, 0x67, 0x6f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x7e, 0x0a, 0x1c, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x55, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e,
	0x41, 0x70, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x19, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x22, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f,
	0x75, 0x72, 0x6c, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x56, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68,
	0x6f, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1f, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c,
	0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x57, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x58, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x59, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x5a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x65,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x5c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x5b,
	0x0a, 0x0f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x5d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x18, 0x5f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x64,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x65, 0x6f, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x65, 0x6f, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6f,
	0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x65, 0x6f, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x6e, 0x0a, 0x16,
	0x73, 0x65, 0x6f, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x69, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x44,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x6f,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x73, 0x65, 0x6f, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x80, 0x01, 0x0a,
	0x1c, 0x73, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x6a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41,
	0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x6f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x1a, 0x73, 0x65, 0x6f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x6b, 0x0a, 0x15, 0x66, 0x61, 0x71, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x6b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70,
	0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46,
	0x61, 0x71, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x66, 0x61, 0x71, 0x4c, 0x69, 0x6e, 0x6b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x8a, 0x01, 0x0a,
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x6c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x73, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1d, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x73, 0x67, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x11, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x8d, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x73,
	0x12, 0x39, 0x0a, 0x18, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x8e, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x92, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x75,
	0x70, 0x18, 0x93, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x73, 0x53, 0x65, 0x74, 0x75, 0x70, 0x12, 0x59, 0x0a, 0x16, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x94, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x14, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x1d, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x96, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x44, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1a, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x9a, 0x01, 0x0a, 0x25, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x97, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x22, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x6e, 0x0a, 0x19, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x17, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x1a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x6e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x68, 0x0a, 0x13, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x9b, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x12, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x39, 0x0a, 0x18, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12,
	0x39, 0x0a, 0x18, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x64, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x9d, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x19, 0x65, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x92, 0x01, 0x0a, 0x23, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x18,
	0x9f, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x57, 0x69, 0x74, 0x68, 0x41, 0x6c, 0x6c,
	0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1f, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x41, 0x6c, 0x6c, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xa0, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x70, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x61,
	0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xa1, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x70, 0x70, 0x54, 0x65, 0x72, 0x6d, 0x41, 0x6e, 0x64,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x73,
	0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0xa2, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x46, 0x72, 0x65, 0x65, 0x54, 0x72,
	0x69, 0x61, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x44, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x61, 0x70, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x44,
	0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0xa4, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41,
	0x70, 0x69, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x5a, 0x0a, 0x12, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x18, 0xa5, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69,
	0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x41, 0x70,
	0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x41, 0x70, 0x70,
	0x12, 0x44, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0xa6,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x61, 0x70, 0x70,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x1a, 0x43, 0x0a, 0x15, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x18, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x4a, 0x0a, 0x1c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x4a, 0x0a, 0x1c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a, 0x1d, 0x4c,
	0x6f, 0x67, 0x6f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4c, 0x0a, 0x1e, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x70, 0x0a, 0x24, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x73, 0x68, 0x6f, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x73, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x55, 0x72, 0x6c, 0x73, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5d, 0x0a, 0x13, 0x47, 0x72, 0x61, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19, 0x53, 0x65, 0x6f, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x4d, 0x0a, 0x1f, 0x53, 0x65, 0x6f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x46, 0x0a, 0x18, 0x46, 0x61, 0x71, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x50, 0x0a, 0x22, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x73, 0x67, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4d, 0x0a, 0x1f, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x27, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x45, 0x0a, 0x17, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x74, 0x0a, 0x24, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x41, 0x6c, 0x6c, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x6f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x61,
	0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x93, 0x01, 0x0a,
	0x16, 0x41, 0x70, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x22, 0x8b, 0x03, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x53, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x59, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x13, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x6c, 0x61, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x92, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x13, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x93, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x94, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x95, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xf5, 0x3a, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x35, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4d, 0x4f, 0x44, 0x45, 0x53, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x3a, 0x0a, 0x19, 0x64, 0x6f, 0x6f, 0x72, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x64, 0x6f, 0x6f, 0x72, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6c,
	0x69, 0x76, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x69, 0x76, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x52, 0x0a, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x0e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69,
	0x2e, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x0d,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a,
	0x0e, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x41, 0x70, 0x69, 0x2e, 0x4c, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x52, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x64,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x44, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x09, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x12, 0x38, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0c,
	0x6c, 0x61, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x40, 0x0a, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x47, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x4d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x4f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70,
	0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x10, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x65, 0x0a, 0x14, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x50, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41,
	0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x71, 0x0a, 0x18,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x51, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x71, 0x0a, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x52, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x53, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x73, 0x12, 0x76, 0x0a, 0x1b, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x54, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55,
	0x72, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x18, 0x6c, 0x6f, 0x67, 0x6f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72,
	0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x79, 0x0a,
	0x1c, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x72, 0x6c,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x55, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41,
	0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x19, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x22, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x72,
	0x6c, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x56, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x55, 0x72, 0x6c, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f,
	0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x57, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x58, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x59, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x5a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6d, 0x62, 0x65,
	0x64, 0x64, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x56, 0x0a, 0x0f, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x5d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x61, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0e, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x55, 0x72, 0x69, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x6e, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x6f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x70, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x71, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x6f, 0x5f,
	0x73, 0x6c, 0x75, 0x67, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x6f, 0x53,
	0x6c, 0x75, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6f, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x79, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x6f, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x69, 0x0a, 0x16, 0x73, 0x65, 0x6f, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x7a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x65, 0x6f, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x73, 0x65, 0x6f,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x7b, 0x0a, 0x1c, 0x73, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x7b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x1a, 0x73, 0x65, 0x6f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x66,
	0x0a, 0x15, 0x66, 0x61, 0x71, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x7c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x61, 0x71, 0x4c, 0x69, 0x6e, 0x6b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x13, 0x66, 0x61, 0x71, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x7d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x73, 0x67, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x1d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d,
	0x73, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b,
	0x0a, 0x11, 0x61, 0x76, 0x67, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x76, 0x67, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x4e, 0x0a, 0x0e, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x83, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0d, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x11, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22,
	0x0a, 0x0c, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x8d,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x4b, 0x65,
	0x79, 0x73, 0x12, 0x39, 0x0a, 0x18, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x8e,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x92, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x74, 0x75, 0x70, 0x18, 0x93, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x73, 0x53, 0x65, 0x74, 0x75, 0x70, 0x12, 0x59, 0x0a, 0x16, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x95, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x14,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x7d, 0x0a, 0x1d, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x96, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x44,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1a, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x25, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x97, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x22, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x6e, 0x0a, 0x19, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x31, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x1a, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0d, 0x75, 0x6e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x9a, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x63, 0x0a, 0x13, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x9d, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x65,
	0x76, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x45, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x6d, 0x0a, 0x1d, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x9f, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41,
	0x70, 0x69, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x1b, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x18, 0x77, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x77,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x18, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x6e, 0x63, 0x79, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x19, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x64, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0xa2, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x44,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x8d, 0x01,
	0x0a, 0x23, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x73, 0x18, 0xa3, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x44,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x57, 0x69, 0x74, 0x68, 0x41, 0x6c,
	0x6c, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1f, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x41, 0x6c, 0x6c, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xa4,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x70, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xa5,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x70, 0x70, 0x54, 0x65, 0x72, 0x6d, 0x41, 0x6e,
	0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x75, 0x74, 0x68, 0x18, 0xa6,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x61, 0x75, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x73, 0x5f,
	0x66, 0x72, 0x65, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0xa8,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x46, 0x72, 0x65, 0x65, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xa9, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x11, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x64, 0x41, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x69, 0x73, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x3a,
	0x0a, 0x0a, 0x61, 0x70, 0x70, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0xab, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41,
	0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x09, 0x61, 0x70, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x61, 0x70,
	0x70, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0xac, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x61, 0x70, 0x70, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x77,
	0x61, 0x79, 0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x18, 0xad, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x69, 0x73, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x3f, 0x0a,
	0x1b, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x18, 0xae, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x19, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x12, 0x39,
	0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0xaf, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x41, 0x70, 0x69, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0a, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x4f, 0x0a, 0x13, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x73,
	0x18, 0xb0, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x64, 0x65, 0x64, 0x41, 0x70, 0x70, 0x52, 0x11, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x41, 0x70, 0x70, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x61, 0x70,
	0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0xb1, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69,
	0x2e, 0x41, 0x70, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0b, 0x61, 0x70,
	0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0xb2, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x41, 0x70, 0x70, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x73, 0x53, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x18, 0xb3, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0xb4, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x70, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0xb5, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x10, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x43, 0x0a, 0x15, 0x4e, 0x61,
	0x6d, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x46, 0x0a, 0x18, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4a, 0x0a, 0x1c, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x4a, 0x0a, 0x1c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x4b, 0x0a, 0x1d, 0x4c, 0x6f, 0x67, 0x6f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4c, 0x0a, 0x1e,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x70, 0x0a, 0x24, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c,
	0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41,
	0x70, 0x69, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x55, 0x72, 0x6c,
	0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5d, 0x0a, 0x13,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x41, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19, 0x53,
	0x65, 0x6f, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4d, 0x0a, 0x1f, 0x53, 0x65, 0x6f, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x18, 0x46, 0x61, 0x71, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x50, 0x0a, 0x22, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x73, 0x67,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4d, 0x0a,
	0x1f, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x27,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a, 0x17, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x74, 0x0a, 0x24, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x41, 0x6c, 0x6c, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41,
	0x70, 0x69, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x6f, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x51, 0x0a, 0x05, 0x4d, 0x4f, 0x44, 0x45, 0x53, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4d, 0x42,
	0x45, 0x44, 0x44, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x41, 0x4c, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4e, 0x54, 0x41,
	0x43, 0x54, 0x5f, 0x53, 0x41, 0x4c, 0x45, 0x53, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x52,
	0x50, 0x10, 0x04, 0x22, 0x37, 0x0a, 0x0a, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x55, 0x4e, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x55,
	0x4e, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02, 0x22, 0x66, 0x0a, 0x06,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x52,
	0x45, 0x56, 0x49, 0x45, 0x57, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55,
	0x42, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41,
	0x46, 0x54, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x06, 0x22, 0x32, 0x0a, 0x17, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x43, 0x4f, 0x4d, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x01, 0x22, 0x68, 0x0a, 0x18, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x01, 0x76, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x69, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x69, 0x69, 0x69, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x69, 0x12, 0x0c, 0x0a, 0x01, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x01, 0x69, 0x22, 0x8d, 0x01, 0x0a, 0x15, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09,
	0x6f, 0x65, 0x63, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x6f, 0x65, 0x63, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x62,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x22, 0x82, 0x02, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69,
	0x6e, 0x6b, 0x54, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x54, 0x0a, 0x18, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x16, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0d, 0x69,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x69, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64,
	0x65, 0x64, 0x41, 0x70, 0x70, 0x49, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x8f, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x76, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x41, 0x70, 0x70,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x4f, 0x61, 0x75, 0x74,
	0x68, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xd8, 0x1d, 0x0a, 0x13, 0x44, 0x65, 0x76, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12,
	0x3d, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x44, 0x65,
	0x76, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4d, 0x4f, 0x44, 0x45, 0x53, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x3a, 0x0a, 0x19, 0x64, 0x6f, 0x6f, 0x72, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x5f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x64, 0x6f, 0x6f, 0x72, 0x6b, 0x65, 0x65, 0x70, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x69, 0x76, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x4f, 0x61, 0x75, 0x74,
	0x68, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x49, 0x53,
	0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41,
	0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x52, 0x09, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x41, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x64,
	0x69, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x40, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65,
	0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x45, 0x64, 0x69, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x46,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x47,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x3d, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b,
	0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x4a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x64,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x4b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b,
	0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x4c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64,
	0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x4e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x47, 0x0a, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x44,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x10, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x14, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x13, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x55, 0x0a, 0x18, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x44, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x17, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x55, 0x0a, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x52, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70,
	0x69, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x17,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x53, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x6f,
	0x67, 0x6f, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x54, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x6f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c,
	0x12, 0x7f, 0x0a, 0x1b, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75,
	0x72, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0xa0, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x18, 0x6c, 0x6f, 0x67, 0x6f, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x55, 0x72, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x55, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x72,
	0x6c, 0x73, 0x18, 0x56, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x73, 0x68, 0x6f, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x57, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x58, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x59, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x5a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x65,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x5c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x5e,
	0x0a, 0x0f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x5d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x55, 0x72, 0x69, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x6e, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x6f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x70, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x71, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x6f, 0x5f, 0x73,
	0x6c, 0x75, 0x67, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x6f, 0x53, 0x6c,
	0x75, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6f, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x79, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x6f, 0x4b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x16, 0x73, 0x65, 0x6f, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x14, 0x73, 0x65, 0x6f, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5c, 0x0a, 0x1c, 0x73, 0x65, 0x6f, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x1a, 0x73, 0x65, 0x6f, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x76, 0x67, 0x5f, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x61, 0x76, 0x67, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x4d, 0x0a, 0x0e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x11, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x8d, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f, 0x6c, 0x6c,
	0x6f, 0x75, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x39, 0x0a, 0x18, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x3f, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x8f,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c,
	0x74, 0x49, 0x6e, 0x12, 0x42, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x92, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x18, 0x93, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x53, 0x65,
	0x74, 0x75, 0x70, 0x12, 0x4f, 0x0a, 0x15, 0x66, 0x61, 0x71, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x94, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41,
	0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x13, 0x66, 0x61, 0x71, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x16, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x95,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x14, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x36, 0x0a, 0x17, 0x61, 0x70, 0x70, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x61, 0x70, 0x70, 0x54, 0x65, 0x72, 0x6d, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x4b, 0x0a,
	0x1d, 0x4c, 0x6f, 0x67, 0x6f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x72, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5d, 0x0a, 0x13, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70,
	0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x51, 0x0a, 0x05, 0x4d, 0x4f, 0x44,
	0x45, 0x53, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4d, 0x42, 0x45, 0x44, 0x44, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x41, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x02,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x5f, 0x53, 0x41, 0x4c, 0x45,
	0x53, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x52, 0x50, 0x10, 0x04, 0x22, 0x37, 0x0a, 0x0a,
	0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x49,
	0x53, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4e, 0x4c, 0x49, 0x53, 0x54,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53,
	0x48, 0x45, 0x44, 0x10, 0x02, 0x22, 0x66, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49,
	0x56, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x05, 0x12, 0x0e, 0x0a,
	0x0a, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x06, 0x22, 0xb5, 0x01,
	0x0a, 0x12, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x15,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x43, 0x79, 0x63, 0x6c, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x10, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x42, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x39,
	0x0a, 0x0b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x24, 0x0a, 0x0e, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x72, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x22,
	0xa5, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4c,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x62, 0x0a, 0x0d, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x91, 0x02, 0x0a, 0x08,
	0x41, 0x70, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x38, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x45, 0x64, 0x69, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x40, 0x0a, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x02, 0x18, 0x01, 0x22,
	0x8e, 0x02, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x0f, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x64, 0x69,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x44,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x40,
	0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0xe5, 0x01, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41,
	0x70, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x35, 0x0a,
	0x12, 0x41, 0x70, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x02, 0x3a, 0x02, 0x18, 0x01, 0x22, 0xe6, 0x01, 0x0a, 0x16, 0x41, 0x70, 0x70,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x38, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70,
	0x69, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e,
	0x41, 0x70, 0x70, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x36, 0x0a, 0x13, 0x41, 0x70, 0x70,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x02, 0x22, 0x8e, 0x01, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x3a, 0x02,
	0x18, 0x01, 0x22, 0x8b, 0x01, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x22, 0xf9, 0x05, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x0f,
	0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x75,
	0x72, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x70, 0x70, 0x55, 0x72, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70,
	0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70,
	0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x69, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x72, 0x6c, 0x53, 0x65, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0b, 0x75, 0x69, 0x5f, 0x68,
	0x6f, 0x6f, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75,
	0x69, 0x48, 0x6f, 0x6f, 0x6b, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x69, 0x5f, 0x68,
	0x6f, 0x6f, 0x6b, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x75, 0x69, 0x48, 0x6f, 0x6f, 0x6b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x12, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x41, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x64,
	0x69, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x40, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65,
	0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x45, 0x64, 0x69, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x6d, 0x62,
	0x65, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65,
	0x64, 0x41, 0x70, 0x70, 0x49, 0x64, 0x1a, 0x44, 0x0a, 0x16, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe6, 0x01, 0x0a,
	0x16, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x41, 0x70, 0x69, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x36, 0x0a,
	0x13, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x10, 0x02, 0x22, 0xc5, 0x04, 0x0a, 0x13, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c,
	0x69, 0x6e, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x75, 0x72, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70,
	0x55, 0x72, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x55, 0x72,
	0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x75, 0x72, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x73, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x72, 0x6c, 0x53, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0b, 0x75, 0x69, 0x5f, 0x68, 0x6f, 0x6f,
	0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x69, 0x48,
	0x6f, 0x6f, 0x6b, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x69, 0x5f, 0x68, 0x6f, 0x6f,
	0x6b, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x75, 0x69, 0x48, 0x6f, 0x6f, 0x6b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x67, 0x0a, 0x12, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x44,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f,
	0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f,
	0x6e, 0x55, 0x72, 0x6c, 0x12, 0x31, 0x0a, 0x15, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64,
	0x65, 0x64, 0x41, 0x70, 0x70, 0x49, 0x64, 0x1a, 0x44, 0x0a, 0x16, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x89, 0x02,
	0x0a, 0x10, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x41,
	0x70, 0x70, 0x12, 0x0f, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x70,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x55,
	0x72, 0x6c, 0x12, 0x38, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0c,
	0x6c, 0x61, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x40, 0x0a, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x89, 0x02, 0x0a, 0x1d, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x41, 0x70, 0x70, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x03, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x41, 0x70, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x64, 0x65, 0x64, 0x41, 0x70, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x64, 0x65, 0x64, 0x41, 0x70, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3d, 0x0a, 0x1a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x41, 0x70, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x10, 0x02, 0x22, 0x4b, 0x0a, 0x1a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x41, 0x70, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x1d, 0x41, 0x70, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x44,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x4c, 0x49, 0x53, 0x54,
	0x49, 0x4e, 0x47, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x77, 0x68, 0x69, 0x74,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x77, 0x68, 0x69, 0x74,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x1e, 0x41, 0x70, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x4c, 0x49, 0x53,
	0x54, 0x49, 0x4e, 0x47, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x0d, 0x6c, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x77, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x77, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x22, 0x6b, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x6a, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x0d, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x76, 0x0a, 0x1e,
	0x41, 0x70, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x52, 0x0a, 0x1a, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69,
	0x2e, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x10, 0x45, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x18, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x64, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x65, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x65, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x1a,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x70, 0x70, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x22, 0x51, 0x0a, 0x1b, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70,
	0x69, 0x2e, 0x42, 0x61, 0x63, 0x69, 0x63, 0x41, 0x70, 0x70, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x0e, 0x42, 0x61, 0x63, 0x69,
	0x63, 0x41, 0x70, 0x70, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x1e, 0x61,
	0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x1c, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xf7, 0x01, 0x0a, 0x16, 0x41, 0x70, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x61, 0x73, 0x65, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x15,
	0x41, 0x70, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2a, 0x2f, 0x0a, 0x0d, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53,
	0x48, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x53, 0x48, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x29, 0x0a, 0x0d, 0x4c, 0x49, 0x53, 0x54, 0x49,
	0x4e, 0x47, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x49, 0x53, 0x54,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4e, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x32, 0xaa, 0x10, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x2e, 0x44,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x44, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x04, 0x53, 0x68,
	0x6f, 0x77, 0x12, 0x1c, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70,
	0x69, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x45, 0x0a,
	0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e,
	0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70,
	0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x06, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x44, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0a, 0x55, 0x6e, 0x64, 0x6f,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x44,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x07, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x12, 0x24, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x06, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x24, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69,
	0x2e, 0x41, 0x70, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0c, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x24, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x1e, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69,
	0x2e, 0x41, 0x70, 0x70, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69,
	0x2e, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x55, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x10, 0x53, 0x75, 0x70, 0x65, 0x72,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x44, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x2e, 0x44, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69,
	0x2e, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x6f, 0x0a, 0x15, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2a, 0x2e, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x41, 0x70, 0x69, 0x2e, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x53, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x41, 0x70, 0x70,
	0x12, 0x1d, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e,
	0x41, 0x70, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x44,
	0x65, 0x76, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0b, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x41, 0x70, 0x69, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2b, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e,
	0x41, 0x70, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a,
	0x09, 0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x21, 0x2e, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x55, 0x6e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70,
	0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x17, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x41, 0x70,
	0x70, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c,
	0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70,
	0x70, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x44,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x13, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x70, 0x70, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x2e, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41,
	0x70, 0x70, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x41, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x70, 0x70, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x58, 0x0a, 0x10, 0x54, 0x61, 0x6b, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x41, 0x70, 0x70,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x24, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x44, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x56, 0x0a, 0x11, 0x54,
	0x61, 0x6b, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x41, 0x70, 0x70, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x12, 0x24, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x44,
	0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0e, 0x41,
	0x70, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x2e,
	0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x70,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x41, 0x70,
	0x69, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x42,
	0x23, 0x5a, 0x21, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_applications_proto_rawDescOnce sync.Once
	file_applications_proto_rawDescData = file_applications_proto_rawDesc
)

func file_applications_proto_rawDescGZIP() []byte {
	file_applications_proto_rawDescOnce.Do(func() {
		file_applications_proto_rawDescData = protoimpl.X.CompressGZIP(file_applications_proto_rawDescData)
	})
	return file_applications_proto_rawDescData
}

var file_applications_proto_enumTypes = make([]protoimpl.EnumInfo, 15)
var file_applications_proto_msgTypes = make([]protoimpl.MessageInfo, 85)
var file_applications_proto_goTypes = []interface{}{
	(PUBLISHSTATUS)(0),                                            // 0: DeveloperApi.PUBLISHSTATUS
	(LISTINGSTATUS)(0),                                            // 1: DeveloperApi.LISTINGSTATUS
	(AppIndexRequest_ORDER_BYS)(0),                                // 2: DeveloperApi.AppIndexRequest.ORDER_BYS
	(AppIndexRequest_VISIBILITY)(0),                               // 3: DeveloperApi.AppIndexRequest.VISIBILITY
	(Application_MODES)(0),                                        // 4: DeveloperApi.Application.MODES
	(Application_VISIBILITY)(0),                                   // 5: DeveloperApi.Application.VISIBILITY
	(Application_STATUS)(0),                                       // 6: DeveloperApi.Application.STATUS
	(Application_InstallationContactType)(0),                      // 7: DeveloperApi.Application.InstallationContactType
	(DevOauthApplication_MODES)(0),                                // 8: DeveloperApi.DevOauthApplication.MODES
	(DevOauthApplication_VISIBILITY)(0),                           // 9: DeveloperApi.DevOauthApplication.VISIBILITY
	(DevOauthApplication_STATUS)(0),                               // 10: DeveloperApi.DevOauthApplication.STATUS
	(AppBlockUpdateRequest_AppBlockUpdateType)(0),                 // 11: DeveloperApi.AppBlockUpdateRequest.AppBlockUpdateType
	(AppScriptUpdateRequest_AppScriptUpdateType)(0),               // 12: DeveloperApi.AppScriptUpdateRequest.AppScriptUpdateType
	(AdminLinkUpdateRequest_AdminLinkUpdateType)(0),               // 13: DeveloperApi.AdminLinkUpdateRequest.AdminLinkUpdateType
	(AdminEmbeddedAppUpdateRequest_AdminEmbeddedAppUpdateType)(0), // 14: DeveloperApi.AdminEmbeddedAppUpdateRequest.AdminEmbeddedAppUpdateType
	(*AppIndexRequest)(nil),                                       // 15: DeveloperApi.AppIndexRequest
	(*AppIndexReply)(nil),                                         // 16: DeveloperApi.AppIndexReply
	(*AppCreateRequest)(nil),                                      // 17: DeveloperApi.AppCreateRequest
	(*AppShowRequest)(nil),                                        // 18: DeveloperApi.AppShowRequest
	(*AppVersionIndexRequest)(nil),                                // 19: DeveloperApi.AppVersionIndexRequest
	(*CurrencyToPriceMap)(nil),                                    // 20: DeveloperApi.CurrencyToPriceMap
	(*AppUpdateRequest)(nil),                                      // 21: DeveloperApi.AppUpdateRequest
	(*AppIdentifiableRequest)(nil),                                // 22: DeveloperApi.AppIdentifiableRequest
	(*AppSearchRequest)(nil),                                      // 23: DeveloperApi.AppSearchRequest
	(*Application)(nil),                                           // 24: DeveloperApi.Application
	(*ApplicationReviewRatings)(nil),                              // 25: DeveloperApi.ApplicationReviewRatings
	(*MerchantServiceConfig)(nil),                                 // 26: DeveloperApi.MerchantServiceConfig
	(*ActionButtonSettings)(nil),                                  // 27: DeveloperApi.ActionButtonSettings
	(*ApplicationEmptyReply)(nil),                                 // 28: DeveloperApi.ApplicationEmptyReply
	(*DevOauthAppIndexReply)(nil),                                 // 29: DeveloperApi.DevOauthAppIndexReply
	(*DevOauthApplication)(nil),                                   // 30: DeveloperApi.DevOauthApplication
	(*PurchasableRequest)(nil),                                    // 31: DeveloperApi.PurchasableRequest
	(*PurchasableReply)(nil),                                      // 32: DeveloperApi.PurchasableReply
	(*ScreenshotUrls)(nil),                                        // 33: DeveloperApi.ScreenshotUrls
	(*DetailedPurchasableContext)(nil),                            // 34: DeveloperApi.DetailedPurchasableContext
	(*WebhookStatus)(nil),                                         // 35: DeveloperApi.WebhookStatus
	(*AppBlock)(nil),                                              // 36: DeveloperApi.AppBlock
	(*AppScript)(nil),                                             // 37: DeveloperApi.AppScript
	(*AppBlockUpdateRequest)(nil),                                 // 38: DeveloperApi.AppBlockUpdateRequest
	(*AppScriptUpdateRequest)(nil),                                // 39: DeveloperApi.AppScriptUpdateRequest
	(*AppBlockUpdateData)(nil),                                    // 40: DeveloperApi.AppBlockUpdateData
	(*AppScriptUpdateData)(nil),                                   // 41: DeveloperApi.AppScriptUpdateData
	(*AdminLink)(nil),                                             // 42: DeveloperApi.AdminLink
	(*AdminLinkUpdateRequest)(nil),                                // 43: DeveloperApi.AdminLinkUpdateRequest
	(*AdminLinkUpdateData)(nil),                                   // 44: DeveloperApi.AdminLinkUpdateData
	(*AdminEmbeddedApp)(nil),                                      // 45: DeveloperApi.AdminEmbeddedApp
	(*AdminEmbeddedAppUpdateRequest)(nil),                         // 46: DeveloperApi.AdminEmbeddedAppUpdateRequest
	(*AdminEmbeddedAppUpdateData)(nil),                            // 47: DeveloperApi.AdminEmbeddedAppUpdateData
	(*AppUpdateListingStatusRequest)(nil),                         // 48: DeveloperApi.AppUpdateListingStatusRequest
	(*AppUpdateListingStatusResponse)(nil),                        // 49: DeveloperApi.AppUpdateListingStatusResponse
	(*AppUnpublishRequest)(nil),                                   // 50: DeveloperApi.AppUnpublishRequest
	(*AppUnpublishResponse)(nil),                                  // 51: DeveloperApi.AppUnpublishResponse
	(*AppRecoverWebhookStatusRequest)(nil),                        // 52: DeveloperApi.AppRecoverWebhookStatusRequest
	(*EmergencyContactIndexRequest)(nil),                          // 53: DeveloperApi.EmergencyContactIndexRequest
	(*EmergencyContactIndexReply)(nil),                            // 54: DeveloperApi.EmergencyContactIndexReply
	(*EmergencyContact)(nil),                                      // 55: DeveloperApi.EmergencyContact
	(*BasicAppReportIndexRequest)(nil),                            // 56: DeveloperApi.BasicAppReportIndexRequest
	(*BasicAppReportIndexResponse)(nil),                           // 57: DeveloperApi.BasicAppReportIndexResponse
	(*BacicAppReport)(nil),                                        // 58: DeveloperApi.BacicAppReport
	(*AppStoreListingRequest)(nil),                                // 59: DeveloperApi.AppStoreListingRequest
	(*AppStoreDetailRequest)(nil),                                 // 60: DeveloperApi.AppStoreDetailRequest
	nil,                                                           // 61: DeveloperApi.CurrencyToPriceMap.ValuesEntry
	nil,                                                           // 62: DeveloperApi.AppUpdateRequest.NameTranslationsEntry
	nil,                                                           // 63: DeveloperApi.AppUpdateRequest.SummaryTranslationsEntry
	nil,                                                           // 64: DeveloperApi.AppUpdateRequest.DescriptionTranslationsEntry
	nil,                                                           // 65: DeveloperApi.AppUpdateRequest.InstructionTranslationsEntry
	nil,                                                           // 66: DeveloperApi.AppUpdateRequest.LogoMediaUrlTranslationsEntry
	nil,                                                           // 67: DeveloperApi.AppUpdateRequest.CoverMediaUrlTranslationsEntry
	nil,                                                           // 68: DeveloperApi.AppUpdateRequest.ScreenshotMediaUrlsTranslationsEntry
	nil,                                                           // 69: DeveloperApi.AppUpdateRequest.GrantsRequiredEntry
	nil,                                                           // 70: DeveloperApi.AppUpdateRequest.SeoTitleTranslationsEntry
	nil,                                                           // 71: DeveloperApi.AppUpdateRequest.SeoDescriptionTranslationsEntry
	nil,                                                           // 72: DeveloperApi.AppUpdateRequest.FaqLinkTranslationsEntry
	nil,                                                           // 73: DeveloperApi.AppUpdateRequest.InstallSuccessMsgTranslationsEntry
	nil,                                                           // 74: DeveloperApi.AppUpdateRequest.AvailableBaseCurrencyCodesEntry
	nil,                                                           // 75: DeveloperApi.AppUpdateRequest.AvailableSubscriptionCurrencyCodesEntry
	nil,                                                           // 76: DeveloperApi.AppUpdateRequest.PurchasableContextEntry
	nil,                                                           // 77: DeveloperApi.AppUpdateRequest.PurchasableContextWithAllCyclesEntry
	nil,                                                           // 78: DeveloperApi.Application.NameTranslationsEntry
	nil,                                                           // 79: DeveloperApi.Application.SummaryTranslationsEntry
	nil,                                                           // 80: DeveloperApi.Application.DescriptionTranslationsEntry
	nil,                                                           // 81: DeveloperApi.Application.InstructionTranslationsEntry
	nil,                                                           // 82: DeveloperApi.Application.LogoMediaUrlTranslationsEntry
	nil,                                                           // 83: DeveloperApi.Application.CoverMediaUrlTranslationsEntry
	nil,                                                           // 84: DeveloperApi.Application.ScreenshotMediaUrlsTranslationsEntry
	nil,                                                           // 85: DeveloperApi.Application.GrantsRequiredEntry
	nil,                                                           // 86: DeveloperApi.Application.SeoTitleTranslationsEntry
	nil,                                                           // 87: DeveloperApi.Application.SeoDescriptionTranslationsEntry
	nil,                                                           // 88: DeveloperApi.Application.FaqLinkTranslationsEntry
	nil,                                                           // 89: DeveloperApi.Application.InstallSuccessMsgTranslationsEntry
	nil,                                                           // 90: DeveloperApi.Application.AvailableBaseCurrencyCodesEntry
	nil,                                                           // 91: DeveloperApi.Application.AvailableSubscriptionCurrencyCodesEntry
	nil,                                                           // 92: DeveloperApi.Application.PurchasableContextEntry
	nil,                                                           // 93: DeveloperApi.Application.PurchasableContextWithAllCyclesEntry
	nil,                                                           // 94: DeveloperApi.DevOauthApplication.LogoMediaUrlTranslationsEntry
	nil,                                                           // 95: DeveloperApi.DevOauthApplication.GrantsRequiredEntry
	nil,                                                           // 96: DeveloperApi.PurchasableReply.ResultEntry
	nil,                                                           // 97: DeveloperApi.DetailedPurchasableContext.ValuesEntry
	nil,                                                           // 98: DeveloperApi.AdminLink.LabelTranslationsEntry
	nil,                                                           // 99: DeveloperApi.AdminLinkUpdateData.LabelTranslationsEntry
	(*PaginationReply)(nil),                                       // 100: DeveloperApi.PaginationReply
	(*Developer)(nil),                                             // 101: DeveloperApi.Developer
	(*User)(nil),                                                  // 102: DeveloperApi.User
	(*timestamppb.Timestamp)(nil),                                 // 103: google.protobuf.Timestamp
	(*AppSettings)(nil),                                           // 104: DeveloperApi.AppSettings
	(*Translatable)(nil),                                          // 105: DeveloperApi.Translatable
	(*ListOfString)(nil),                                          // 106: DeveloperApi.ListOfString
}
var file_applications_proto_depIdxs = []int32{
	2,   // 0: DeveloperApi.AppIndexRequest.order_by:type_name -> DeveloperApi.AppIndexRequest.ORDER_BYS
	3,   // 1: DeveloperApi.AppIndexRequest.visibility:type_name -> DeveloperApi.AppIndexRequest.VISIBILITY
	24,  // 2: DeveloperApi.AppIndexReply.items:type_name -> DeveloperApi.Application
	100, // 3: DeveloperApi.AppIndexReply.pagination:type_name -> DeveloperApi.PaginationReply
	61,  // 4: DeveloperApi.CurrencyToPriceMap.values:type_name -> DeveloperApi.CurrencyToPriceMap.ValuesEntry
	4,   // 5: DeveloperApi.AppUpdateRequest.modes:type_name -> DeveloperApi.Application.MODES
	5,   // 6: DeveloperApi.AppUpdateRequest.visibility:type_name -> DeveloperApi.Application.VISIBILITY
	0,   // 7: DeveloperApi.AppUpdateRequest.publish_status:type_name -> DeveloperApi.PUBLISHSTATUS
	1,   // 8: DeveloperApi.AppUpdateRequest.listing_status:type_name -> DeveloperApi.LISTINGSTATUS
	62,  // 9: DeveloperApi.AppUpdateRequest.name_translations:type_name -> DeveloperApi.AppUpdateRequest.NameTranslationsEntry
	63,  // 10: DeveloperApi.AppUpdateRequest.summary_translations:type_name -> DeveloperApi.AppUpdateRequest.SummaryTranslationsEntry
	64,  // 11: DeveloperApi.AppUpdateRequest.description_translations:type_name -> DeveloperApi.AppUpdateRequest.DescriptionTranslationsEntry
	65,  // 12: DeveloperApi.AppUpdateRequest.instruction_translations:type_name -> DeveloperApi.AppUpdateRequest.InstructionTranslationsEntry
	66,  // 13: DeveloperApi.AppUpdateRequest.logo_media_url_translations:type_name -> DeveloperApi.AppUpdateRequest.LogoMediaUrlTranslationsEntry
	67,  // 14: DeveloperApi.AppUpdateRequest.cover_media_url_translations:type_name -> DeveloperApi.AppUpdateRequest.CoverMediaUrlTranslationsEntry
	68,  // 15: DeveloperApi.AppUpdateRequest.screenshot_media_urls_translations:type_name -> DeveloperApi.AppUpdateRequest.ScreenshotMediaUrlsTranslationsEntry
	69,  // 16: DeveloperApi.AppUpdateRequest.grants_required:type_name -> DeveloperApi.AppUpdateRequest.GrantsRequiredEntry
	70,  // 17: DeveloperApi.AppUpdateRequest.seo_title_translations:type_name -> DeveloperApi.AppUpdateRequest.SeoTitleTranslationsEntry
	71,  // 18: DeveloperApi.AppUpdateRequest.seo_description_translations:type_name -> DeveloperApi.AppUpdateRequest.SeoDescriptionTranslationsEntry
	72,  // 19: DeveloperApi.AppUpdateRequest.faq_link_translations:type_name -> DeveloperApi.AppUpdateRequest.FaqLinkTranslationsEntry
	73,  // 20: DeveloperApi.AppUpdateRequest.install_success_msg_translations:type_name -> DeveloperApi.AppUpdateRequest.InstallSuccessMsgTranslationsEntry
	27,  // 21: DeveloperApi.AppUpdateRequest.action_button_settings:type_name -> DeveloperApi.ActionButtonSettings
	74,  // 22: DeveloperApi.AppUpdateRequest.available_base_currency_codes:type_name -> DeveloperApi.AppUpdateRequest.AvailableBaseCurrencyCodesEntry
	75,  // 23: DeveloperApi.AppUpdateRequest.available_subscription_currency_codes:type_name -> DeveloperApi.AppUpdateRequest.AvailableSubscriptionCurrencyCodesEntry
	7,   // 24: DeveloperApi.AppUpdateRequest.installation_contact_type:type_name -> DeveloperApi.Application.InstallationContactType
	76,  // 25: DeveloperApi.AppUpdateRequest.purchasable_context:type_name -> DeveloperApi.AppUpdateRequest.PurchasableContextEntry
	77,  // 26: DeveloperApi.AppUpdateRequest.purchasable_context_with_all_cycles:type_name -> DeveloperApi.AppUpdateRequest.PurchasableContextWithAllCyclesEntry
	38,  // 27: DeveloperApi.AppUpdateRequest.app_block:type_name -> DeveloperApi.AppBlockUpdateRequest
	43,  // 28: DeveloperApi.AppUpdateRequest.admin_link:type_name -> DeveloperApi.AdminLinkUpdateRequest
	46,  // 29: DeveloperApi.AppUpdateRequest.admin_embedded_app:type_name -> DeveloperApi.AdminEmbeddedAppUpdateRequest
	39,  // 30: DeveloperApi.AppUpdateRequest.app_script:type_name -> DeveloperApi.AppScriptUpdateRequest
	4,   // 31: DeveloperApi.Application.modes:type_name -> DeveloperApi.Application.MODES
	5,   // 32: DeveloperApi.Application.visibility:type_name -> DeveloperApi.Application.VISIBILITY
	0,   // 33: DeveloperApi.Application.publish_status:type_name -> DeveloperApi.PUBLISHSTATUS
	1,   // 34: DeveloperApi.Application.listing_status:type_name -> DeveloperApi.LISTINGSTATUS
	6,   // 35: DeveloperApi.Application.status:type_name -> DeveloperApi.Application.STATUS
	101, // 36: DeveloperApi.Application.developer:type_name -> DeveloperApi.Developer
	102, // 37: DeveloperApi.Application.last_edited_by:type_name -> DeveloperApi.User
	103, // 38: DeveloperApi.Application.last_edited_at:type_name -> google.protobuf.Timestamp
	103, // 39: DeveloperApi.Application.submitted_at:type_name -> google.protobuf.Timestamp
	103, // 40: DeveloperApi.Application.approved_at:type_name -> google.protobuf.Timestamp
	103, // 41: DeveloperApi.Application.deprecated_at:type_name -> google.protobuf.Timestamp
	103, // 42: DeveloperApi.Application.declined_at:type_name -> google.protobuf.Timestamp
	78,  // 43: DeveloperApi.Application.name_translations:type_name -> DeveloperApi.Application.NameTranslationsEntry
	79,  // 44: DeveloperApi.Application.summary_translations:type_name -> DeveloperApi.Application.SummaryTranslationsEntry
	80,  // 45: DeveloperApi.Application.description_translations:type_name -> DeveloperApi.Application.DescriptionTranslationsEntry
	81,  // 46: DeveloperApi.Application.instruction_translations:type_name -> DeveloperApi.Application.InstructionTranslationsEntry
	82,  // 47: DeveloperApi.Application.logo_media_url_translations:type_name -> DeveloperApi.Application.LogoMediaUrlTranslationsEntry
	83,  // 48: DeveloperApi.Application.cover_media_url_translations:type_name -> DeveloperApi.Application.CoverMediaUrlTranslationsEntry
	84,  // 49: DeveloperApi.Application.screenshot_media_urls_translations:type_name -> DeveloperApi.Application.ScreenshotMediaUrlsTranslationsEntry
	85,  // 50: DeveloperApi.Application.grants_required:type_name -> DeveloperApi.Application.GrantsRequiredEntry
	103, // 51: DeveloperApi.Application.deleted_at:type_name -> google.protobuf.Timestamp
	103, // 52: DeveloperApi.Application.updated_at:type_name -> google.protobuf.Timestamp
	103, // 53: DeveloperApi.Application.created_at:type_name -> google.protobuf.Timestamp
	86,  // 54: DeveloperApi.Application.seo_title_translations:type_name -> DeveloperApi.Application.SeoTitleTranslationsEntry
	87,  // 55: DeveloperApi.Application.seo_description_translations:type_name -> DeveloperApi.Application.SeoDescriptionTranslationsEntry
	88,  // 56: DeveloperApi.Application.faq_link_translations:type_name -> DeveloperApi.Application.FaqLinkTranslationsEntry
	89,  // 57: DeveloperApi.Application.install_success_msg_translations:type_name -> DeveloperApi.Application.InstallSuccessMsgTranslationsEntry
	25,  // 58: DeveloperApi.Application.review_ratings:type_name -> DeveloperApi.ApplicationReviewRatings
	27,  // 59: DeveloperApi.Application.action_button_settings:type_name -> DeveloperApi.ActionButtonSettings
	90,  // 60: DeveloperApi.Application.available_base_currency_codes:type_name -> DeveloperApi.Application.AvailableBaseCurrencyCodesEntry
	91,  // 61: DeveloperApi.Application.available_subscription_currency_codes:type_name -> DeveloperApi.Application.AvailableSubscriptionCurrencyCodesEntry
	7,   // 62: DeveloperApi.Application.installation_contact_type:type_name -> DeveloperApi.Application.InstallationContactType
	103, // 63: DeveloperApi.Application.installed_at:type_name -> google.protobuf.Timestamp
	92,  // 64: DeveloperApi.Application.purchasable_context:type_name -> DeveloperApi.Application.PurchasableContextEntry
	34,  // 65: DeveloperApi.Application.detailed_purchasable_contexts:type_name -> DeveloperApi.DetailedPurchasableContext
	93,  // 66: DeveloperApi.Application.purchasable_context_with_all_cycles:type_name -> DeveloperApi.Application.PurchasableContextWithAllCyclesEntry
	103, // 67: DeveloperApi.Application.subscription_end_at:type_name -> google.protobuf.Timestamp
	36,  // 68: DeveloperApi.Application.app_blocks:type_name -> DeveloperApi.AppBlock
	35,  // 69: DeveloperApi.Application.app_webhook_status:type_name -> DeveloperApi.WebhookStatus
	42,  // 70: DeveloperApi.Application.admin_links:type_name -> DeveloperApi.AdminLink
	45,  // 71: DeveloperApi.Application.admin_embedded_apps:type_name -> DeveloperApi.AdminEmbeddedApp
	104, // 72: DeveloperApi.Application.app_settings:type_name -> DeveloperApi.AppSettings
	37,  // 73: DeveloperApi.Application.app_scripts:type_name -> DeveloperApi.AppScript
	103, // 74: DeveloperApi.Application.scope_updated_at:type_name -> google.protobuf.Timestamp
	105, // 75: DeveloperApi.ActionButtonSettings.button_text_translations:type_name -> DeveloperApi.Translatable
	30,  // 76: DeveloperApi.DevOauthAppIndexReply.items:type_name -> DeveloperApi.DevOauthApplication
	100, // 77: DeveloperApi.DevOauthAppIndexReply.pagination:type_name -> DeveloperApi.PaginationReply
	8,   // 78: DeveloperApi.DevOauthApplication.modes:type_name -> DeveloperApi.DevOauthApplication.MODES
	9,   // 79: DeveloperApi.DevOauthApplication.visibility:type_name -> DeveloperApi.DevOauthApplication.VISIBILITY
	10,  // 80: DeveloperApi.DevOauthApplication.status:type_name -> DeveloperApi.DevOauthApplication.STATUS
	101, // 81: DeveloperApi.DevOauthApplication.developer:type_name -> DeveloperApi.Developer
	102, // 82: DeveloperApi.DevOauthApplication.last_edited_by:type_name -> DeveloperApi.User
	103, // 83: DeveloperApi.DevOauthApplication.last_edited_at:type_name -> google.protobuf.Timestamp
	103, // 84: DeveloperApi.DevOauthApplication.submitted_at:type_name -> google.protobuf.Timestamp
	103, // 85: DeveloperApi.DevOauthApplication.approved_at:type_name -> google.protobuf.Timestamp
	103, // 86: DeveloperApi.DevOauthApplication.deprecated_at:type_name -> google.protobuf.Timestamp
	103, // 87: DeveloperApi.DevOauthApplication.declined_at:type_name -> google.protobuf.Timestamp
	105, // 88: DeveloperApi.DevOauthApplication.name_translations:type_name -> DeveloperApi.Translatable
	105, // 89: DeveloperApi.DevOauthApplication.summary_translations:type_name -> DeveloperApi.Translatable
	105, // 90: DeveloperApi.DevOauthApplication.description_translations:type_name -> DeveloperApi.Translatable
	105, // 91: DeveloperApi.DevOauthApplication.instruction_translations:type_name -> DeveloperApi.Translatable
	94,  // 92: DeveloperApi.DevOauthApplication.logo_media_url_translations:type_name -> DeveloperApi.DevOauthApplication.LogoMediaUrlTranslationsEntry
	95,  // 93: DeveloperApi.DevOauthApplication.grants_required:type_name -> DeveloperApi.DevOauthApplication.GrantsRequiredEntry
	103, // 94: DeveloperApi.DevOauthApplication.deleted_at:type_name -> google.protobuf.Timestamp
	103, // 95: DeveloperApi.DevOauthApplication.updated_at:type_name -> google.protobuf.Timestamp
	103, // 96: DeveloperApi.DevOauthApplication.created_at:type_name -> google.protobuf.Timestamp
	105, // 97: DeveloperApi.DevOauthApplication.seo_title_translations:type_name -> DeveloperApi.Translatable
	105, // 98: DeveloperApi.DevOauthApplication.seo_description_translations:type_name -> DeveloperApi.Translatable
	25,  // 99: DeveloperApi.DevOauthApplication.review_ratings:type_name -> DeveloperApi.ApplicationReviewRatings
	26,  // 100: DeveloperApi.DevOauthApplication.built_in:type_name -> DeveloperApi.MerchantServiceConfig
	26,  // 101: DeveloperApi.DevOauthApplication.available:type_name -> DeveloperApi.MerchantServiceConfig
	26,  // 102: DeveloperApi.DevOauthApplication.visible:type_name -> DeveloperApi.MerchantServiceConfig
	105, // 103: DeveloperApi.DevOauthApplication.faq_link_translations:type_name -> DeveloperApi.Translatable
	27,  // 104: DeveloperApi.DevOauthApplication.action_button_settings:type_name -> DeveloperApi.ActionButtonSettings
	96,  // 105: DeveloperApi.PurchasableReply.result:type_name -> DeveloperApi.PurchasableReply.ResultEntry
	97,  // 106: DeveloperApi.DetailedPurchasableContext.values:type_name -> DeveloperApi.DetailedPurchasableContext.ValuesEntry
	103, // 107: DeveloperApi.WebhookStatus.updated_at:type_name -> google.protobuf.Timestamp
	102, // 108: DeveloperApi.AppBlock.last_edited_by:type_name -> DeveloperApi.User
	103, // 109: DeveloperApi.AppBlock.last_edited_at:type_name -> google.protobuf.Timestamp
	102, // 110: DeveloperApi.AppScript.last_edited_by:type_name -> DeveloperApi.User
	103, // 111: DeveloperApi.AppScript.last_edited_at:type_name -> google.protobuf.Timestamp
	11,  // 112: DeveloperApi.AppBlockUpdateRequest.type:type_name -> DeveloperApi.AppBlockUpdateRequest.AppBlockUpdateType
	40,  // 113: DeveloperApi.AppBlockUpdateRequest.data:type_name -> DeveloperApi.AppBlockUpdateData
	12,  // 114: DeveloperApi.AppScriptUpdateRequest.type:type_name -> DeveloperApi.AppScriptUpdateRequest.AppScriptUpdateType
	41,  // 115: DeveloperApi.AppScriptUpdateRequest.data:type_name -> DeveloperApi.AppScriptUpdateData
	98,  // 116: DeveloperApi.AdminLink.label_translations:type_name -> DeveloperApi.AdminLink.LabelTranslationsEntry
	102, // 117: DeveloperApi.AdminLink.last_edited_by:type_name -> DeveloperApi.User
	103, // 118: DeveloperApi.AdminLink.last_edited_at:type_name -> google.protobuf.Timestamp
	103, // 119: DeveloperApi.AdminLink.created_at:type_name -> google.protobuf.Timestamp
	13,  // 120: DeveloperApi.AdminLinkUpdateRequest.type:type_name -> DeveloperApi.AdminLinkUpdateRequest.AdminLinkUpdateType
	44,  // 121: DeveloperApi.AdminLinkUpdateRequest.data:type_name -> DeveloperApi.AdminLinkUpdateData
	99,  // 122: DeveloperApi.AdminLinkUpdateData.label_translations:type_name -> DeveloperApi.AdminLinkUpdateData.LabelTranslationsEntry
	102, // 123: DeveloperApi.AdminEmbeddedApp.last_edited_by:type_name -> DeveloperApi.User
	103, // 124: DeveloperApi.AdminEmbeddedApp.last_edited_at:type_name -> google.protobuf.Timestamp
	103, // 125: DeveloperApi.AdminEmbeddedApp.created_at:type_name -> google.protobuf.Timestamp
	14,  // 126: DeveloperApi.AdminEmbeddedAppUpdateRequest.type:type_name -> DeveloperApi.AdminEmbeddedAppUpdateRequest.AdminEmbeddedAppUpdateType
	47,  // 127: DeveloperApi.AdminEmbeddedAppUpdateRequest.data:type_name -> DeveloperApi.AdminEmbeddedAppUpdateData
	1,   // 128: DeveloperApi.AppUpdateListingStatusRequest.listing_status:type_name -> DeveloperApi.LISTINGSTATUS
	1,   // 129: DeveloperApi.AppUpdateListingStatusResponse.listing_status:type_name -> DeveloperApi.LISTINGSTATUS
	0,   // 130: DeveloperApi.AppUnpublishResponse.publish_status:type_name -> DeveloperApi.PUBLISHSTATUS
	55,  // 131: DeveloperApi.EmergencyContactIndexReply.items:type_name -> DeveloperApi.EmergencyContact
	58,  // 132: DeveloperApi.BasicAppReportIndexResponse.items:type_name -> DeveloperApi.BacicAppReport
	33,  // 133: DeveloperApi.AppUpdateRequest.ScreenshotMediaUrlsTranslationsEntry.value:type_name -> DeveloperApi.ScreenshotUrls
	106, // 134: DeveloperApi.AppUpdateRequest.GrantsRequiredEntry.value:type_name -> DeveloperApi.ListOfString
	20,  // 135: DeveloperApi.AppUpdateRequest.PurchasableContextWithAllCyclesEntry.value:type_name -> DeveloperApi.CurrencyToPriceMap
	33,  // 136: DeveloperApi.Application.ScreenshotMediaUrlsTranslationsEntry.value:type_name -> DeveloperApi.ScreenshotUrls
	106, // 137: DeveloperApi.Application.GrantsRequiredEntry.value:type_name -> DeveloperApi.ListOfString
	20,  // 138: DeveloperApi.Application.PurchasableContextWithAllCyclesEntry.value:type_name -> DeveloperApi.CurrencyToPriceMap
	106, // 139: DeveloperApi.DevOauthApplication.GrantsRequiredEntry.value:type_name -> DeveloperApi.ListOfString
	15,  // 140: DeveloperApi.Applications.Index:input_type -> DeveloperApi.AppIndexRequest
	18,  // 141: DeveloperApi.Applications.Show:input_type -> DeveloperApi.AppShowRequest
	17,  // 142: DeveloperApi.Applications.Create:input_type -> DeveloperApi.AppCreateRequest
	21,  // 143: DeveloperApi.Applications.Update:input_type -> DeveloperApi.AppUpdateRequest
	22,  // 144: DeveloperApi.Applications.Submit:input_type -> DeveloperApi.AppIdentifiableRequest
	22,  // 145: DeveloperApi.Applications.UndoSubmit:input_type -> DeveloperApi.AppIdentifiableRequest
	22,  // 146: DeveloperApi.Applications.Approve:input_type -> DeveloperApi.AppIdentifiableRequest
	22,  // 147: DeveloperApi.Applications.Reject:input_type -> DeveloperApi.AppIdentifiableRequest
	22,  // 148: DeveloperApi.Applications.RevokeSecret:input_type -> DeveloperApi.AppIdentifiableRequest
	23,  // 149: DeveloperApi.Applications.Search:input_type -> DeveloperApi.AppSearchRequest
	22,  // 150: DeveloperApi.Applications.Delete:input_type -> DeveloperApi.AppIdentifiableRequest
	22,  // 151: DeveloperApi.Applications.SuperadminDelete:input_type -> DeveloperApi.AppIdentifiableRequest
	19,  // 152: DeveloperApi.Applications.AppVersionIndex:input_type -> DeveloperApi.AppVersionIndexRequest
	53,  // 153: DeveloperApi.Applications.EmergencyContactIndex:input_type -> DeveloperApi.EmergencyContactIndexRequest
	15,  // 154: DeveloperApi.Applications.DevOauthApp:input_type -> DeveloperApi.AppIndexRequest
	31,  // 155: DeveloperApi.Applications.Purchasable:input_type -> DeveloperApi.PurchasableRequest
	48,  // 156: DeveloperApi.Applications.UpdateListingStatus:input_type -> DeveloperApi.AppUpdateListingStatusRequest
	50,  // 157: DeveloperApi.Applications.Unpublish:input_type -> DeveloperApi.AppUnpublishRequest
	52,  // 158: DeveloperApi.Applications.RecoverAppWebhookStatus:input_type -> DeveloperApi.AppRecoverWebhookStatusRequest
	56,  // 159: DeveloperApi.Applications.BasicAppReportIndex:input_type -> DeveloperApi.BasicAppReportIndexRequest
	22,  // 160: DeveloperApi.Applications.TakeDownAppBlock:input_type -> DeveloperApi.AppIdentifiableRequest
	22,  // 161: DeveloperApi.Applications.TakeDownAppScript:input_type -> DeveloperApi.AppIdentifiableRequest
	59,  // 162: DeveloperApi.Applications.AppStoreListing:input_type -> DeveloperApi.AppStoreListingRequest
	60,  // 163: DeveloperApi.Applications.AppStoreDetail:input_type -> DeveloperApi.AppStoreDetailRequest
	16,  // 164: DeveloperApi.Applications.Index:output_type -> DeveloperApi.AppIndexReply
	24,  // 165: DeveloperApi.Applications.Show:output_type -> DeveloperApi.Application
	24,  // 166: DeveloperApi.Applications.Create:output_type -> DeveloperApi.Application
	24,  // 167: DeveloperApi.Applications.Update:output_type -> DeveloperApi.Application
	24,  // 168: DeveloperApi.Applications.Submit:output_type -> DeveloperApi.Application
	24,  // 169: DeveloperApi.Applications.UndoSubmit:output_type -> DeveloperApi.Application
	24,  // 170: DeveloperApi.Applications.Approve:output_type -> DeveloperApi.Application
	24,  // 171: DeveloperApi.Applications.Reject:output_type -> DeveloperApi.Application
	24,  // 172: DeveloperApi.Applications.RevokeSecret:output_type -> DeveloperApi.Application
	16,  // 173: DeveloperApi.Applications.Search:output_type -> DeveloperApi.AppIndexReply
	28,  // 174: DeveloperApi.Applications.Delete:output_type -> DeveloperApi.ApplicationEmptyReply
	28,  // 175: DeveloperApi.Applications.SuperadminDelete:output_type -> DeveloperApi.ApplicationEmptyReply
	16,  // 176: DeveloperApi.Applications.AppVersionIndex:output_type -> DeveloperApi.AppIndexReply
	54,  // 177: DeveloperApi.Applications.EmergencyContactIndex:output_type -> DeveloperApi.EmergencyContactIndexReply
	29,  // 178: DeveloperApi.Applications.DevOauthApp:output_type -> DeveloperApi.DevOauthAppIndexReply
	32,  // 179: DeveloperApi.Applications.Purchasable:output_type -> DeveloperApi.PurchasableReply
	49,  // 180: DeveloperApi.Applications.UpdateListingStatus:output_type -> DeveloperApi.AppUpdateListingStatusResponse
	51,  // 181: DeveloperApi.Applications.Unpublish:output_type -> DeveloperApi.AppUnpublishResponse
	28,  // 182: DeveloperApi.Applications.RecoverAppWebhookStatus:output_type -> DeveloperApi.ApplicationEmptyReply
	57,  // 183: DeveloperApi.Applications.BasicAppReportIndex:output_type -> DeveloperApi.BasicAppReportIndexResponse
	24,  // 184: DeveloperApi.Applications.TakeDownAppBlock:output_type -> DeveloperApi.Application
	24,  // 185: DeveloperApi.Applications.TakeDownAppScript:output_type -> DeveloperApi.Application
	16,  // 186: DeveloperApi.Applications.AppStoreListing:output_type -> DeveloperApi.AppIndexReply
	24,  // 187: DeveloperApi.Applications.AppStoreDetail:output_type -> DeveloperApi.Application
	164, // [164:188] is the sub-list for method output_type
	140, // [140:164] is the sub-list for method input_type
	140, // [140:140] is the sub-list for extension type_name
	140, // [140:140] is the sub-list for extension extendee
	0,   // [0:140] is the sub-list for field type_name
}

func init() { file_applications_proto_init() }
func file_applications_proto_init() {
	if File_applications_proto != nil {
		return
	}
	file_pagination_proto_init()
	file_translatable_proto_init()
	file_users_proto_init()
	file_struct_proto_init()
	file_developers_proto_init()
	file_app_settings_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_applications_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppIndexReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppShowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppVersionIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyToPriceMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppIdentifiableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Application); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationReviewRatings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantServiceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionButtonSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationEmptyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevOauthAppIndexReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevOauthApplication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchasableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchasableReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenshotUrls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailedPurchasableContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppScript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppBlockUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppScriptUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppBlockUpdateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppScriptUpdateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminLinkUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminLinkUpdateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminEmbeddedApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminEmbeddedAppUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminEmbeddedAppUpdateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppUpdateListingStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppUpdateListingStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppUnpublishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppUnpublishResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppRecoverWebhookStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmergencyContactIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmergencyContactIndexReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmergencyContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicAppReportIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicAppReportIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BacicAppReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppStoreListingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_applications_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppStoreDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_applications_proto_rawDesc,
			NumEnums:      15,
			NumMessages:   85,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_applications_proto_goTypes,
		DependencyIndexes: file_applications_proto_depIdxs,
		EnumInfos:         file_applications_proto_enumTypes,
		MessageInfos:      file_applications_proto_msgTypes,
	}.Build()
	File_applications_proto = out.File
	file_applications_proto_rawDesc = nil
	file_applications_proto_goTypes = nil
	file_applications_proto_depIdxs = nil
}
