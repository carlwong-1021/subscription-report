// developers.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: developers.proto

package developer_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Developers_Index_FullMethodName  = "/DeveloperApi.Developers/Index"
	Developers_Show_FullMethodName   = "/DeveloperApi.Developers/Show"
	Developers_Create_FullMethodName = "/DeveloperApi.Developers/Create"
	Developers_Update_FullMethodName = "/DeveloperApi.Developers/Update"
	Developers_Delete_FullMethodName = "/DeveloperApi.Developers/Delete"
)

// DevelopersClient is the client API for Developers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DevelopersClient interface {
	Index(ctx context.Context, in *DeveloperIndexRequest, opts ...grpc.CallOption) (*DeveloperIndexReply, error)
	Show(ctx context.Context, in *DeveloperShowRequest, opts ...grpc.CallOption) (*Developer, error)
	Create(ctx context.Context, in *DeveloperCreateRequest, opts ...grpc.CallOption) (*Developer, error)
	Update(ctx context.Context, in *DeveloperUpdateRequest, opts ...grpc.CallOption) (*Developer, error)
	Delete(ctx context.Context, in *DeveloperDeleteRequest, opts ...grpc.CallOption) (*DeveloperDeleteReply, error)
}

type developersClient struct {
	cc grpc.ClientConnInterface
}

func NewDevelopersClient(cc grpc.ClientConnInterface) DevelopersClient {
	return &developersClient{cc}
}

func (c *developersClient) Index(ctx context.Context, in *DeveloperIndexRequest, opts ...grpc.CallOption) (*DeveloperIndexReply, error) {
	out := new(DeveloperIndexReply)
	err := c.cc.Invoke(ctx, Developers_Index_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developersClient) Show(ctx context.Context, in *DeveloperShowRequest, opts ...grpc.CallOption) (*Developer, error) {
	out := new(Developer)
	err := c.cc.Invoke(ctx, Developers_Show_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developersClient) Create(ctx context.Context, in *DeveloperCreateRequest, opts ...grpc.CallOption) (*Developer, error) {
	out := new(Developer)
	err := c.cc.Invoke(ctx, Developers_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developersClient) Update(ctx context.Context, in *DeveloperUpdateRequest, opts ...grpc.CallOption) (*Developer, error) {
	out := new(Developer)
	err := c.cc.Invoke(ctx, Developers_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developersClient) Delete(ctx context.Context, in *DeveloperDeleteRequest, opts ...grpc.CallOption) (*DeveloperDeleteReply, error) {
	out := new(DeveloperDeleteReply)
	err := c.cc.Invoke(ctx, Developers_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DevelopersServer is the server API for Developers service.
// All implementations must embed UnimplementedDevelopersServer
// for forward compatibility
type DevelopersServer interface {
	Index(context.Context, *DeveloperIndexRequest) (*DeveloperIndexReply, error)
	Show(context.Context, *DeveloperShowRequest) (*Developer, error)
	Create(context.Context, *DeveloperCreateRequest) (*Developer, error)
	Update(context.Context, *DeveloperUpdateRequest) (*Developer, error)
	Delete(context.Context, *DeveloperDeleteRequest) (*DeveloperDeleteReply, error)
	mustEmbedUnimplementedDevelopersServer()
}

// UnimplementedDevelopersServer must be embedded to have forward compatible implementations.
type UnimplementedDevelopersServer struct {
}

func (UnimplementedDevelopersServer) Index(context.Context, *DeveloperIndexRequest) (*DeveloperIndexReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Index not implemented")
}
func (UnimplementedDevelopersServer) Show(context.Context, *DeveloperShowRequest) (*Developer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Show not implemented")
}
func (UnimplementedDevelopersServer) Create(context.Context, *DeveloperCreateRequest) (*Developer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDevelopersServer) Update(context.Context, *DeveloperUpdateRequest) (*Developer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDevelopersServer) Delete(context.Context, *DeveloperDeleteRequest) (*DeveloperDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDevelopersServer) mustEmbedUnimplementedDevelopersServer() {}

// UnsafeDevelopersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DevelopersServer will
// result in compilation errors.
type UnsafeDevelopersServer interface {
	mustEmbedUnimplementedDevelopersServer()
}

func RegisterDevelopersServer(s grpc.ServiceRegistrar, srv DevelopersServer) {
	s.RegisterService(&Developers_ServiceDesc, srv)
}

func _Developers_Index_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeveloperIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevelopersServer).Index(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Developers_Index_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevelopersServer).Index(ctx, req.(*DeveloperIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Developers_Show_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeveloperShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevelopersServer).Show(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Developers_Show_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevelopersServer).Show(ctx, req.(*DeveloperShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Developers_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeveloperCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevelopersServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Developers_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevelopersServer).Create(ctx, req.(*DeveloperCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Developers_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeveloperUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevelopersServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Developers_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevelopersServer).Update(ctx, req.(*DeveloperUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Developers_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeveloperDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevelopersServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Developers_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevelopersServer).Delete(ctx, req.(*DeveloperDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Developers_ServiceDesc is the grpc.ServiceDesc for Developers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Developers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DeveloperApi.Developers",
	HandlerType: (*DevelopersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Index",
			Handler:    _Developers_Index_Handler,
		},
		{
			MethodName: "Show",
			Handler:    _Developers_Show_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Developers_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Developers_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Developers_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "developers.proto",
}
