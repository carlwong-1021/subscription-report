// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: token_scopes.proto

package developer_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TokenScopes_ListScopes_FullMethodName = "/DeveloperApi.TokenScopes/ListScopes"
)

// TokenScopesClient is the client API for TokenScopes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenScopesClient interface {
	ListScopes(ctx context.Context, in *TokenScopesListScopesRequest, opts ...grpc.CallOption) (*TokenScopesListScopesResponse, error)
}

type tokenScopesClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenScopesClient(cc grpc.ClientConnInterface) TokenScopesClient {
	return &tokenScopesClient{cc}
}

func (c *tokenScopesClient) ListScopes(ctx context.Context, in *TokenScopesListScopesRequest, opts ...grpc.CallOption) (*TokenScopesListScopesResponse, error) {
	out := new(TokenScopesListScopesResponse)
	err := c.cc.Invoke(ctx, TokenScopes_ListScopes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenScopesServer is the server API for TokenScopes service.
// All implementations must embed UnimplementedTokenScopesServer
// for forward compatibility
type TokenScopesServer interface {
	ListScopes(context.Context, *TokenScopesListScopesRequest) (*TokenScopesListScopesResponse, error)
	mustEmbedUnimplementedTokenScopesServer()
}

// UnimplementedTokenScopesServer must be embedded to have forward compatible implementations.
type UnimplementedTokenScopesServer struct {
}

func (UnimplementedTokenScopesServer) ListScopes(context.Context, *TokenScopesListScopesRequest) (*TokenScopesListScopesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScopes not implemented")
}
func (UnimplementedTokenScopesServer) mustEmbedUnimplementedTokenScopesServer() {}

// UnsafeTokenScopesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenScopesServer will
// result in compilation errors.
type UnsafeTokenScopesServer interface {
	mustEmbedUnimplementedTokenScopesServer()
}

func RegisterTokenScopesServer(s grpc.ServiceRegistrar, srv TokenScopesServer) {
	s.RegisterService(&TokenScopes_ServiceDesc, srv)
}

func _TokenScopes_ListScopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenScopesListScopesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenScopesServer).ListScopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenScopes_ListScopes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenScopesServer).ListScopes(ctx, req.(*TokenScopesListScopesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TokenScopes_ServiceDesc is the grpc.ServiceDesc for TokenScopes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenScopes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DeveloperApi.TokenScopes",
	HandlerType: (*TokenScopesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListScopes",
			Handler:    _TokenScopes_ListScopes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "token_scopes.proto",
}
