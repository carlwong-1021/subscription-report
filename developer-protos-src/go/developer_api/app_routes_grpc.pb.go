// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: app_routes.proto

package developer_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AppRoutes_Index_FullMethodName = "/DeveloperApi.AppRoutes/Index"
)

// AppRoutesClient is the client API for AppRoutes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppRoutesClient interface {
	Index(ctx context.Context, in *AppRoutesIndexRequest, opts ...grpc.CallOption) (*AppRoutesIndexResponse, error)
}

type appRoutesClient struct {
	cc grpc.ClientConnInterface
}

func NewAppRoutesClient(cc grpc.ClientConnInterface) AppRoutesClient {
	return &appRoutesClient{cc}
}

func (c *appRoutesClient) Index(ctx context.Context, in *AppRoutesIndexRequest, opts ...grpc.CallOption) (*AppRoutesIndexResponse, error) {
	out := new(AppRoutesIndexResponse)
	err := c.cc.Invoke(ctx, AppRoutes_Index_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppRoutesServer is the server API for AppRoutes service.
// All implementations must embed UnimplementedAppRoutesServer
// for forward compatibility
type AppRoutesServer interface {
	Index(context.Context, *AppRoutesIndexRequest) (*AppRoutesIndexResponse, error)
	mustEmbedUnimplementedAppRoutesServer()
}

// UnimplementedAppRoutesServer must be embedded to have forward compatible implementations.
type UnimplementedAppRoutesServer struct {
}

func (UnimplementedAppRoutesServer) Index(context.Context, *AppRoutesIndexRequest) (*AppRoutesIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Index not implemented")
}
func (UnimplementedAppRoutesServer) mustEmbedUnimplementedAppRoutesServer() {}

// UnsafeAppRoutesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppRoutesServer will
// result in compilation errors.
type UnsafeAppRoutesServer interface {
	mustEmbedUnimplementedAppRoutesServer()
}

func RegisterAppRoutesServer(s grpc.ServiceRegistrar, srv AppRoutesServer) {
	s.RegisterService(&AppRoutes_ServiceDesc, srv)
}

func _AppRoutes_Index_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppRoutesIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRoutesServer).Index(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppRoutes_Index_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRoutesServer).Index(ctx, req.(*AppRoutesIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppRoutes_ServiceDesc is the grpc.ServiceDesc for AppRoutes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppRoutes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DeveloperApi.AppRoutes",
	HandlerType: (*AppRoutesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Index",
			Handler:    _AppRoutes_Index_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app_routes.proto",
}
