// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: sign_token.proto

package developer_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SignToken_Create_FullMethodName     = "/DeveloperApi.SignToken/Create"
	SignToken_CreateHmac_FullMethodName = "/DeveloperApi.SignToken/CreateHmac"
)

// SignTokenClient is the client API for SignToken service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignTokenClient interface {
	Create(ctx context.Context, in *SignTokenCreateRequest, opts ...grpc.CallOption) (*SignTokenCreateResponse, error)
	CreateHmac(ctx context.Context, in *SignTokenCreateHmacRequest, opts ...grpc.CallOption) (*SignTokenCreateResponse, error)
}

type signTokenClient struct {
	cc grpc.ClientConnInterface
}

func NewSignTokenClient(cc grpc.ClientConnInterface) SignTokenClient {
	return &signTokenClient{cc}
}

func (c *signTokenClient) Create(ctx context.Context, in *SignTokenCreateRequest, opts ...grpc.CallOption) (*SignTokenCreateResponse, error) {
	out := new(SignTokenCreateResponse)
	err := c.cc.Invoke(ctx, SignToken_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signTokenClient) CreateHmac(ctx context.Context, in *SignTokenCreateHmacRequest, opts ...grpc.CallOption) (*SignTokenCreateResponse, error) {
	out := new(SignTokenCreateResponse)
	err := c.cc.Invoke(ctx, SignToken_CreateHmac_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignTokenServer is the server API for SignToken service.
// All implementations must embed UnimplementedSignTokenServer
// for forward compatibility
type SignTokenServer interface {
	Create(context.Context, *SignTokenCreateRequest) (*SignTokenCreateResponse, error)
	CreateHmac(context.Context, *SignTokenCreateHmacRequest) (*SignTokenCreateResponse, error)
	mustEmbedUnimplementedSignTokenServer()
}

// UnimplementedSignTokenServer must be embedded to have forward compatible implementations.
type UnimplementedSignTokenServer struct {
}

func (UnimplementedSignTokenServer) Create(context.Context, *SignTokenCreateRequest) (*SignTokenCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSignTokenServer) CreateHmac(context.Context, *SignTokenCreateHmacRequest) (*SignTokenCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHmac not implemented")
}
func (UnimplementedSignTokenServer) mustEmbedUnimplementedSignTokenServer() {}

// UnsafeSignTokenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignTokenServer will
// result in compilation errors.
type UnsafeSignTokenServer interface {
	mustEmbedUnimplementedSignTokenServer()
}

func RegisterSignTokenServer(s grpc.ServiceRegistrar, srv SignTokenServer) {
	s.RegisterService(&SignToken_ServiceDesc, srv)
}

func _SignToken_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignTokenCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignTokenServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignToken_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignTokenServer).Create(ctx, req.(*SignTokenCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignToken_CreateHmac_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignTokenCreateHmacRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignTokenServer).CreateHmac(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignToken_CreateHmac_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignTokenServer).CreateHmac(ctx, req.(*SignTokenCreateHmacRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SignToken_ServiceDesc is the grpc.ServiceDesc for SignToken service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SignToken_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DeveloperApi.SignToken",
	HandlerType: (*SignTokenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SignToken_Create_Handler,
		},
		{
			MethodName: "CreateHmac",
			Handler:    _SignToken_CreateHmac_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sign_token.proto",
}
