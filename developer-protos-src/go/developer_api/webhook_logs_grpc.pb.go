// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: webhook_logs.proto

package developer_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WebhookLogs_Index_FullMethodName = "/DeveloperApi.WebhookLogs/Index"
	WebhookLogs_Show_FullMethodName  = "/DeveloperApi.WebhookLogs/Show"
)

// WebhookLogsClient is the client API for WebhookLogs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebhookLogsClient interface {
	Index(ctx context.Context, in *WebhookLogsIndexRequest, opts ...grpc.CallOption) (*WebhookLogsIndexResponse, error)
	Show(ctx context.Context, in *WebhookLogsShowRequest, opts ...grpc.CallOption) (*Log, error)
}

type webhookLogsClient struct {
	cc grpc.ClientConnInterface
}

func NewWebhookLogsClient(cc grpc.ClientConnInterface) WebhookLogsClient {
	return &webhookLogsClient{cc}
}

func (c *webhookLogsClient) Index(ctx context.Context, in *WebhookLogsIndexRequest, opts ...grpc.CallOption) (*WebhookLogsIndexResponse, error) {
	out := new(WebhookLogsIndexResponse)
	err := c.cc.Invoke(ctx, WebhookLogs_Index_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookLogsClient) Show(ctx context.Context, in *WebhookLogsShowRequest, opts ...grpc.CallOption) (*Log, error) {
	out := new(Log)
	err := c.cc.Invoke(ctx, WebhookLogs_Show_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebhookLogsServer is the server API for WebhookLogs service.
// All implementations must embed UnimplementedWebhookLogsServer
// for forward compatibility
type WebhookLogsServer interface {
	Index(context.Context, *WebhookLogsIndexRequest) (*WebhookLogsIndexResponse, error)
	Show(context.Context, *WebhookLogsShowRequest) (*Log, error)
	mustEmbedUnimplementedWebhookLogsServer()
}

// UnimplementedWebhookLogsServer must be embedded to have forward compatible implementations.
type UnimplementedWebhookLogsServer struct {
}

func (UnimplementedWebhookLogsServer) Index(context.Context, *WebhookLogsIndexRequest) (*WebhookLogsIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Index not implemented")
}
func (UnimplementedWebhookLogsServer) Show(context.Context, *WebhookLogsShowRequest) (*Log, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Show not implemented")
}
func (UnimplementedWebhookLogsServer) mustEmbedUnimplementedWebhookLogsServer() {}

// UnsafeWebhookLogsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebhookLogsServer will
// result in compilation errors.
type UnsafeWebhookLogsServer interface {
	mustEmbedUnimplementedWebhookLogsServer()
}

func RegisterWebhookLogsServer(s grpc.ServiceRegistrar, srv WebhookLogsServer) {
	s.RegisterService(&WebhookLogs_ServiceDesc, srv)
}

func _WebhookLogs_Index_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookLogsIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookLogsServer).Index(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhookLogs_Index_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookLogsServer).Index(ctx, req.(*WebhookLogsIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookLogs_Show_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookLogsShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookLogsServer).Show(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhookLogs_Show_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookLogsServer).Show(ctx, req.(*WebhookLogsShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebhookLogs_ServiceDesc is the grpc.ServiceDesc for WebhookLogs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebhookLogs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DeveloperApi.WebhookLogs",
	HandlerType: (*WebhookLogsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Index",
			Handler:    _WebhookLogs_Index_Handler,
		},
		{
			MethodName: "Show",
			Handler:    _WebhookLogs_Show_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webhook_logs.proto",
}
