// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: app_action_links.proto

package developer_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AppActionLinks_Index_FullMethodName = "/DeveloperApi.AppActionLinks/Index"
	AppActionLinks_Show_FullMethodName  = "/DeveloperApi.AppActionLinks/Show"
)

// AppActionLinksClient is the client API for AppActionLinks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppActionLinksClient interface {
	Index(ctx context.Context, in *AppActionLinksIndexRequest, opts ...grpc.CallOption) (*AppActionLinksIndexRepsonse, error)
	Show(ctx context.Context, in *AppActionLinksShowRequest, opts ...grpc.CallOption) (*AppActionLink, error)
}

type appActionLinksClient struct {
	cc grpc.ClientConnInterface
}

func NewAppActionLinksClient(cc grpc.ClientConnInterface) AppActionLinksClient {
	return &appActionLinksClient{cc}
}

func (c *appActionLinksClient) Index(ctx context.Context, in *AppActionLinksIndexRequest, opts ...grpc.CallOption) (*AppActionLinksIndexRepsonse, error) {
	out := new(AppActionLinksIndexRepsonse)
	err := c.cc.Invoke(ctx, AppActionLinks_Index_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appActionLinksClient) Show(ctx context.Context, in *AppActionLinksShowRequest, opts ...grpc.CallOption) (*AppActionLink, error) {
	out := new(AppActionLink)
	err := c.cc.Invoke(ctx, AppActionLinks_Show_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppActionLinksServer is the server API for AppActionLinks service.
// All implementations must embed UnimplementedAppActionLinksServer
// for forward compatibility
type AppActionLinksServer interface {
	Index(context.Context, *AppActionLinksIndexRequest) (*AppActionLinksIndexRepsonse, error)
	Show(context.Context, *AppActionLinksShowRequest) (*AppActionLink, error)
	mustEmbedUnimplementedAppActionLinksServer()
}

// UnimplementedAppActionLinksServer must be embedded to have forward compatible implementations.
type UnimplementedAppActionLinksServer struct {
}

func (UnimplementedAppActionLinksServer) Index(context.Context, *AppActionLinksIndexRequest) (*AppActionLinksIndexRepsonse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Index not implemented")
}
func (UnimplementedAppActionLinksServer) Show(context.Context, *AppActionLinksShowRequest) (*AppActionLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Show not implemented")
}
func (UnimplementedAppActionLinksServer) mustEmbedUnimplementedAppActionLinksServer() {}

// UnsafeAppActionLinksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppActionLinksServer will
// result in compilation errors.
type UnsafeAppActionLinksServer interface {
	mustEmbedUnimplementedAppActionLinksServer()
}

func RegisterAppActionLinksServer(s grpc.ServiceRegistrar, srv AppActionLinksServer) {
	s.RegisterService(&AppActionLinks_ServiceDesc, srv)
}

func _AppActionLinks_Index_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppActionLinksIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppActionLinksServer).Index(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppActionLinks_Index_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppActionLinksServer).Index(ctx, req.(*AppActionLinksIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppActionLinks_Show_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppActionLinksShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppActionLinksServer).Show(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppActionLinks_Show_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppActionLinksServer).Show(ctx, req.(*AppActionLinksShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppActionLinks_ServiceDesc is the grpc.ServiceDesc for AppActionLinks service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppActionLinks_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DeveloperApi.AppActionLinks",
	HandlerType: (*AppActionLinksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Index",
			Handler:    _AppActionLinks_Index_Handler,
		},
		{
			MethodName: "Show",
			Handler:    _AppActionLinks_Show_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app_action_links.proto",
}
