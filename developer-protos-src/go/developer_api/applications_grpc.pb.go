// applications.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: applications.proto

package developer_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Applications_Index_FullMethodName                   = "/DeveloperApi.Applications/Index"
	Applications_Show_FullMethodName                    = "/DeveloperApi.Applications/Show"
	Applications_Create_FullMethodName                  = "/DeveloperApi.Applications/Create"
	Applications_Update_FullMethodName                  = "/DeveloperApi.Applications/Update"
	Applications_Submit_FullMethodName                  = "/DeveloperApi.Applications/Submit"
	Applications_UndoSubmit_FullMethodName              = "/DeveloperApi.Applications/UndoSubmit"
	Applications_Approve_FullMethodName                 = "/DeveloperApi.Applications/Approve"
	Applications_Reject_FullMethodName                  = "/DeveloperApi.Applications/Reject"
	Applications_RevokeSecret_FullMethodName            = "/DeveloperApi.Applications/RevokeSecret"
	Applications_Search_FullMethodName                  = "/DeveloperApi.Applications/Search"
	Applications_Delete_FullMethodName                  = "/DeveloperApi.Applications/Delete"
	Applications_SuperadminDelete_FullMethodName        = "/DeveloperApi.Applications/SuperadminDelete"
	Applications_AppVersionIndex_FullMethodName         = "/DeveloperApi.Applications/AppVersionIndex"
	Applications_EmergencyContactIndex_FullMethodName   = "/DeveloperApi.Applications/EmergencyContactIndex"
	Applications_DevOauthApp_FullMethodName             = "/DeveloperApi.Applications/DevOauthApp"
	Applications_Purchasable_FullMethodName             = "/DeveloperApi.Applications/Purchasable"
	Applications_UpdateListingStatus_FullMethodName     = "/DeveloperApi.Applications/UpdateListingStatus"
	Applications_Unpublish_FullMethodName               = "/DeveloperApi.Applications/Unpublish"
	Applications_RecoverAppWebhookStatus_FullMethodName = "/DeveloperApi.Applications/RecoverAppWebhookStatus"
	Applications_BasicAppReportIndex_FullMethodName     = "/DeveloperApi.Applications/BasicAppReportIndex"
	Applications_TakeDownAppBlock_FullMethodName        = "/DeveloperApi.Applications/TakeDownAppBlock"
	Applications_TakeDownAppScript_FullMethodName       = "/DeveloperApi.Applications/TakeDownAppScript"
	Applications_AppStoreListing_FullMethodName         = "/DeveloperApi.Applications/AppStoreListing"
	Applications_AppStoreDetail_FullMethodName          = "/DeveloperApi.Applications/AppStoreDetail"
)

// ApplicationsClient is the client API for Applications service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationsClient interface {
	Index(ctx context.Context, in *AppIndexRequest, opts ...grpc.CallOption) (*AppIndexReply, error)
	Show(ctx context.Context, in *AppShowRequest, opts ...grpc.CallOption) (*Application, error)
	Create(ctx context.Context, in *AppCreateRequest, opts ...grpc.CallOption) (*Application, error)
	Update(ctx context.Context, in *AppUpdateRequest, opts ...grpc.CallOption) (*Application, error)
	Submit(ctx context.Context, in *AppIdentifiableRequest, opts ...grpc.CallOption) (*Application, error)
	UndoSubmit(ctx context.Context, in *AppIdentifiableRequest, opts ...grpc.CallOption) (*Application, error)
	Approve(ctx context.Context, in *AppIdentifiableRequest, opts ...grpc.CallOption) (*Application, error)
	Reject(ctx context.Context, in *AppIdentifiableRequest, opts ...grpc.CallOption) (*Application, error)
	RevokeSecret(ctx context.Context, in *AppIdentifiableRequest, opts ...grpc.CallOption) (*Application, error)
	Search(ctx context.Context, in *AppSearchRequest, opts ...grpc.CallOption) (*AppIndexReply, error)
	Delete(ctx context.Context, in *AppIdentifiableRequest, opts ...grpc.CallOption) (*ApplicationEmptyReply, error)
	SuperadminDelete(ctx context.Context, in *AppIdentifiableRequest, opts ...grpc.CallOption) (*ApplicationEmptyReply, error)
	AppVersionIndex(ctx context.Context, in *AppVersionIndexRequest, opts ...grpc.CallOption) (*AppIndexReply, error)
	EmergencyContactIndex(ctx context.Context, in *EmergencyContactIndexRequest, opts ...grpc.CallOption) (*EmergencyContactIndexReply, error)
	DevOauthApp(ctx context.Context, in *AppIndexRequest, opts ...grpc.CallOption) (*DevOauthAppIndexReply, error)
	Purchasable(ctx context.Context, in *PurchasableRequest, opts ...grpc.CallOption) (*PurchasableReply, error)
	UpdateListingStatus(ctx context.Context, in *AppUpdateListingStatusRequest, opts ...grpc.CallOption) (*AppUpdateListingStatusResponse, error)
	Unpublish(ctx context.Context, in *AppUnpublishRequest, opts ...grpc.CallOption) (*AppUnpublishResponse, error)
	RecoverAppWebhookStatus(ctx context.Context, in *AppRecoverWebhookStatusRequest, opts ...grpc.CallOption) (*ApplicationEmptyReply, error)
	BasicAppReportIndex(ctx context.Context, in *BasicAppReportIndexRequest, opts ...grpc.CallOption) (*BasicAppReportIndexResponse, error)
	// Deprecated: Do not use.
	TakeDownAppBlock(ctx context.Context, in *AppIdentifiableRequest, opts ...grpc.CallOption) (*Application, error)
	TakeDownAppScript(ctx context.Context, in *AppIdentifiableRequest, opts ...grpc.CallOption) (*Application, error)
	AppStoreListing(ctx context.Context, in *AppStoreListingRequest, opts ...grpc.CallOption) (*AppIndexReply, error)
	AppStoreDetail(ctx context.Context, in *AppStoreDetailRequest, opts ...grpc.CallOption) (*Application, error)
}

type applicationsClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationsClient(cc grpc.ClientConnInterface) ApplicationsClient {
	return &applicationsClient{cc}
}

func (c *applicationsClient) Index(ctx context.Context, in *AppIndexRequest, opts ...grpc.CallOption) (*AppIndexReply, error) {
	out := new(AppIndexReply)
	err := c.cc.Invoke(ctx, Applications_Index_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) Show(ctx context.Context, in *AppShowRequest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, Applications_Show_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) Create(ctx context.Context, in *AppCreateRequest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, Applications_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) Update(ctx context.Context, in *AppUpdateRequest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, Applications_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) Submit(ctx context.Context, in *AppIdentifiableRequest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, Applications_Submit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) UndoSubmit(ctx context.Context, in *AppIdentifiableRequest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, Applications_UndoSubmit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) Approve(ctx context.Context, in *AppIdentifiableRequest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, Applications_Approve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) Reject(ctx context.Context, in *AppIdentifiableRequest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, Applications_Reject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) RevokeSecret(ctx context.Context, in *AppIdentifiableRequest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, Applications_RevokeSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) Search(ctx context.Context, in *AppSearchRequest, opts ...grpc.CallOption) (*AppIndexReply, error) {
	out := new(AppIndexReply)
	err := c.cc.Invoke(ctx, Applications_Search_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) Delete(ctx context.Context, in *AppIdentifiableRequest, opts ...grpc.CallOption) (*ApplicationEmptyReply, error) {
	out := new(ApplicationEmptyReply)
	err := c.cc.Invoke(ctx, Applications_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) SuperadminDelete(ctx context.Context, in *AppIdentifiableRequest, opts ...grpc.CallOption) (*ApplicationEmptyReply, error) {
	out := new(ApplicationEmptyReply)
	err := c.cc.Invoke(ctx, Applications_SuperadminDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) AppVersionIndex(ctx context.Context, in *AppVersionIndexRequest, opts ...grpc.CallOption) (*AppIndexReply, error) {
	out := new(AppIndexReply)
	err := c.cc.Invoke(ctx, Applications_AppVersionIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) EmergencyContactIndex(ctx context.Context, in *EmergencyContactIndexRequest, opts ...grpc.CallOption) (*EmergencyContactIndexReply, error) {
	out := new(EmergencyContactIndexReply)
	err := c.cc.Invoke(ctx, Applications_EmergencyContactIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) DevOauthApp(ctx context.Context, in *AppIndexRequest, opts ...grpc.CallOption) (*DevOauthAppIndexReply, error) {
	out := new(DevOauthAppIndexReply)
	err := c.cc.Invoke(ctx, Applications_DevOauthApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) Purchasable(ctx context.Context, in *PurchasableRequest, opts ...grpc.CallOption) (*PurchasableReply, error) {
	out := new(PurchasableReply)
	err := c.cc.Invoke(ctx, Applications_Purchasable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) UpdateListingStatus(ctx context.Context, in *AppUpdateListingStatusRequest, opts ...grpc.CallOption) (*AppUpdateListingStatusResponse, error) {
	out := new(AppUpdateListingStatusResponse)
	err := c.cc.Invoke(ctx, Applications_UpdateListingStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) Unpublish(ctx context.Context, in *AppUnpublishRequest, opts ...grpc.CallOption) (*AppUnpublishResponse, error) {
	out := new(AppUnpublishResponse)
	err := c.cc.Invoke(ctx, Applications_Unpublish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) RecoverAppWebhookStatus(ctx context.Context, in *AppRecoverWebhookStatusRequest, opts ...grpc.CallOption) (*ApplicationEmptyReply, error) {
	out := new(ApplicationEmptyReply)
	err := c.cc.Invoke(ctx, Applications_RecoverAppWebhookStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) BasicAppReportIndex(ctx context.Context, in *BasicAppReportIndexRequest, opts ...grpc.CallOption) (*BasicAppReportIndexResponse, error) {
	out := new(BasicAppReportIndexResponse)
	err := c.cc.Invoke(ctx, Applications_BasicAppReportIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *applicationsClient) TakeDownAppBlock(ctx context.Context, in *AppIdentifiableRequest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, Applications_TakeDownAppBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) TakeDownAppScript(ctx context.Context, in *AppIdentifiableRequest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, Applications_TakeDownAppScript_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) AppStoreListing(ctx context.Context, in *AppStoreListingRequest, opts ...grpc.CallOption) (*AppIndexReply, error) {
	out := new(AppIndexReply)
	err := c.cc.Invoke(ctx, Applications_AppStoreListing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) AppStoreDetail(ctx context.Context, in *AppStoreDetailRequest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, Applications_AppStoreDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationsServer is the server API for Applications service.
// All implementations must embed UnimplementedApplicationsServer
// for forward compatibility
type ApplicationsServer interface {
	Index(context.Context, *AppIndexRequest) (*AppIndexReply, error)
	Show(context.Context, *AppShowRequest) (*Application, error)
	Create(context.Context, *AppCreateRequest) (*Application, error)
	Update(context.Context, *AppUpdateRequest) (*Application, error)
	Submit(context.Context, *AppIdentifiableRequest) (*Application, error)
	UndoSubmit(context.Context, *AppIdentifiableRequest) (*Application, error)
	Approve(context.Context, *AppIdentifiableRequest) (*Application, error)
	Reject(context.Context, *AppIdentifiableRequest) (*Application, error)
	RevokeSecret(context.Context, *AppIdentifiableRequest) (*Application, error)
	Search(context.Context, *AppSearchRequest) (*AppIndexReply, error)
	Delete(context.Context, *AppIdentifiableRequest) (*ApplicationEmptyReply, error)
	SuperadminDelete(context.Context, *AppIdentifiableRequest) (*ApplicationEmptyReply, error)
	AppVersionIndex(context.Context, *AppVersionIndexRequest) (*AppIndexReply, error)
	EmergencyContactIndex(context.Context, *EmergencyContactIndexRequest) (*EmergencyContactIndexReply, error)
	DevOauthApp(context.Context, *AppIndexRequest) (*DevOauthAppIndexReply, error)
	Purchasable(context.Context, *PurchasableRequest) (*PurchasableReply, error)
	UpdateListingStatus(context.Context, *AppUpdateListingStatusRequest) (*AppUpdateListingStatusResponse, error)
	Unpublish(context.Context, *AppUnpublishRequest) (*AppUnpublishResponse, error)
	RecoverAppWebhookStatus(context.Context, *AppRecoverWebhookStatusRequest) (*ApplicationEmptyReply, error)
	BasicAppReportIndex(context.Context, *BasicAppReportIndexRequest) (*BasicAppReportIndexResponse, error)
	// Deprecated: Do not use.
	TakeDownAppBlock(context.Context, *AppIdentifiableRequest) (*Application, error)
	TakeDownAppScript(context.Context, *AppIdentifiableRequest) (*Application, error)
	AppStoreListing(context.Context, *AppStoreListingRequest) (*AppIndexReply, error)
	AppStoreDetail(context.Context, *AppStoreDetailRequest) (*Application, error)
	mustEmbedUnimplementedApplicationsServer()
}

// UnimplementedApplicationsServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationsServer struct {
}

func (UnimplementedApplicationsServer) Index(context.Context, *AppIndexRequest) (*AppIndexReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Index not implemented")
}
func (UnimplementedApplicationsServer) Show(context.Context, *AppShowRequest) (*Application, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Show not implemented")
}
func (UnimplementedApplicationsServer) Create(context.Context, *AppCreateRequest) (*Application, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedApplicationsServer) Update(context.Context, *AppUpdateRequest) (*Application, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedApplicationsServer) Submit(context.Context, *AppIdentifiableRequest) (*Application, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Submit not implemented")
}
func (UnimplementedApplicationsServer) UndoSubmit(context.Context, *AppIdentifiableRequest) (*Application, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndoSubmit not implemented")
}
func (UnimplementedApplicationsServer) Approve(context.Context, *AppIdentifiableRequest) (*Application, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Approve not implemented")
}
func (UnimplementedApplicationsServer) Reject(context.Context, *AppIdentifiableRequest) (*Application, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reject not implemented")
}
func (UnimplementedApplicationsServer) RevokeSecret(context.Context, *AppIdentifiableRequest) (*Application, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeSecret not implemented")
}
func (UnimplementedApplicationsServer) Search(context.Context, *AppSearchRequest) (*AppIndexReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedApplicationsServer) Delete(context.Context, *AppIdentifiableRequest) (*ApplicationEmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedApplicationsServer) SuperadminDelete(context.Context, *AppIdentifiableRequest) (*ApplicationEmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuperadminDelete not implemented")
}
func (UnimplementedApplicationsServer) AppVersionIndex(context.Context, *AppVersionIndexRequest) (*AppIndexReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppVersionIndex not implemented")
}
func (UnimplementedApplicationsServer) EmergencyContactIndex(context.Context, *EmergencyContactIndexRequest) (*EmergencyContactIndexReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmergencyContactIndex not implemented")
}
func (UnimplementedApplicationsServer) DevOauthApp(context.Context, *AppIndexRequest) (*DevOauthAppIndexReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DevOauthApp not implemented")
}
func (UnimplementedApplicationsServer) Purchasable(context.Context, *PurchasableRequest) (*PurchasableReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Purchasable not implemented")
}
func (UnimplementedApplicationsServer) UpdateListingStatus(context.Context, *AppUpdateListingStatusRequest) (*AppUpdateListingStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateListingStatus not implemented")
}
func (UnimplementedApplicationsServer) Unpublish(context.Context, *AppUnpublishRequest) (*AppUnpublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unpublish not implemented")
}
func (UnimplementedApplicationsServer) RecoverAppWebhookStatus(context.Context, *AppRecoverWebhookStatusRequest) (*ApplicationEmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverAppWebhookStatus not implemented")
}
func (UnimplementedApplicationsServer) BasicAppReportIndex(context.Context, *BasicAppReportIndexRequest) (*BasicAppReportIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BasicAppReportIndex not implemented")
}
func (UnimplementedApplicationsServer) TakeDownAppBlock(context.Context, *AppIdentifiableRequest) (*Application, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeDownAppBlock not implemented")
}
func (UnimplementedApplicationsServer) TakeDownAppScript(context.Context, *AppIdentifiableRequest) (*Application, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeDownAppScript not implemented")
}
func (UnimplementedApplicationsServer) AppStoreListing(context.Context, *AppStoreListingRequest) (*AppIndexReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppStoreListing not implemented")
}
func (UnimplementedApplicationsServer) AppStoreDetail(context.Context, *AppStoreDetailRequest) (*Application, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppStoreDetail not implemented")
}
func (UnimplementedApplicationsServer) mustEmbedUnimplementedApplicationsServer() {}

// UnsafeApplicationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationsServer will
// result in compilation errors.
type UnsafeApplicationsServer interface {
	mustEmbedUnimplementedApplicationsServer()
}

func RegisterApplicationsServer(s grpc.ServiceRegistrar, srv ApplicationsServer) {
	s.RegisterService(&Applications_ServiceDesc, srv)
}

func _Applications_Index_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).Index(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Applications_Index_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).Index(ctx, req.(*AppIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_Show_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).Show(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Applications_Show_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).Show(ctx, req.(*AppShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Applications_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).Create(ctx, req.(*AppCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Applications_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).Update(ctx, req.(*AppUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppIdentifiableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Applications_Submit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).Submit(ctx, req.(*AppIdentifiableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_UndoSubmit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppIdentifiableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).UndoSubmit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Applications_UndoSubmit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).UndoSubmit(ctx, req.(*AppIdentifiableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_Approve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppIdentifiableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).Approve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Applications_Approve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).Approve(ctx, req.(*AppIdentifiableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_Reject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppIdentifiableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).Reject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Applications_Reject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).Reject(ctx, req.(*AppIdentifiableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_RevokeSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppIdentifiableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).RevokeSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Applications_RevokeSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).RevokeSecret(ctx, req.(*AppIdentifiableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Applications_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).Search(ctx, req.(*AppSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppIdentifiableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Applications_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).Delete(ctx, req.(*AppIdentifiableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_SuperadminDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppIdentifiableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).SuperadminDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Applications_SuperadminDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).SuperadminDelete(ctx, req.(*AppIdentifiableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_AppVersionIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppVersionIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).AppVersionIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Applications_AppVersionIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).AppVersionIndex(ctx, req.(*AppVersionIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_EmergencyContactIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmergencyContactIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).EmergencyContactIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Applications_EmergencyContactIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).EmergencyContactIndex(ctx, req.(*EmergencyContactIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_DevOauthApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).DevOauthApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Applications_DevOauthApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).DevOauthApp(ctx, req.(*AppIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_Purchasable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchasableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).Purchasable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Applications_Purchasable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).Purchasable(ctx, req.(*PurchasableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_UpdateListingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppUpdateListingStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).UpdateListingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Applications_UpdateListingStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).UpdateListingStatus(ctx, req.(*AppUpdateListingStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_Unpublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppUnpublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).Unpublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Applications_Unpublish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).Unpublish(ctx, req.(*AppUnpublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_RecoverAppWebhookStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppRecoverWebhookStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).RecoverAppWebhookStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Applications_RecoverAppWebhookStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).RecoverAppWebhookStatus(ctx, req.(*AppRecoverWebhookStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_BasicAppReportIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BasicAppReportIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).BasicAppReportIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Applications_BasicAppReportIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).BasicAppReportIndex(ctx, req.(*BasicAppReportIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_TakeDownAppBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppIdentifiableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).TakeDownAppBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Applications_TakeDownAppBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).TakeDownAppBlock(ctx, req.(*AppIdentifiableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_TakeDownAppScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppIdentifiableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).TakeDownAppScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Applications_TakeDownAppScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).TakeDownAppScript(ctx, req.(*AppIdentifiableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_AppStoreListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppStoreListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).AppStoreListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Applications_AppStoreListing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).AppStoreListing(ctx, req.(*AppStoreListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_AppStoreDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppStoreDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).AppStoreDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Applications_AppStoreDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).AppStoreDetail(ctx, req.(*AppStoreDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Applications_ServiceDesc is the grpc.ServiceDesc for Applications service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Applications_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DeveloperApi.Applications",
	HandlerType: (*ApplicationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Index",
			Handler:    _Applications_Index_Handler,
		},
		{
			MethodName: "Show",
			Handler:    _Applications_Show_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Applications_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Applications_Update_Handler,
		},
		{
			MethodName: "Submit",
			Handler:    _Applications_Submit_Handler,
		},
		{
			MethodName: "UndoSubmit",
			Handler:    _Applications_UndoSubmit_Handler,
		},
		{
			MethodName: "Approve",
			Handler:    _Applications_Approve_Handler,
		},
		{
			MethodName: "Reject",
			Handler:    _Applications_Reject_Handler,
		},
		{
			MethodName: "RevokeSecret",
			Handler:    _Applications_RevokeSecret_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Applications_Search_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Applications_Delete_Handler,
		},
		{
			MethodName: "SuperadminDelete",
			Handler:    _Applications_SuperadminDelete_Handler,
		},
		{
			MethodName: "AppVersionIndex",
			Handler:    _Applications_AppVersionIndex_Handler,
		},
		{
			MethodName: "EmergencyContactIndex",
			Handler:    _Applications_EmergencyContactIndex_Handler,
		},
		{
			MethodName: "DevOauthApp",
			Handler:    _Applications_DevOauthApp_Handler,
		},
		{
			MethodName: "Purchasable",
			Handler:    _Applications_Purchasable_Handler,
		},
		{
			MethodName: "UpdateListingStatus",
			Handler:    _Applications_UpdateListingStatus_Handler,
		},
		{
			MethodName: "Unpublish",
			Handler:    _Applications_Unpublish_Handler,
		},
		{
			MethodName: "RecoverAppWebhookStatus",
			Handler:    _Applications_RecoverAppWebhookStatus_Handler,
		},
		{
			MethodName: "BasicAppReportIndex",
			Handler:    _Applications_BasicAppReportIndex_Handler,
		},
		{
			MethodName: "TakeDownAppBlock",
			Handler:    _Applications_TakeDownAppBlock_Handler,
		},
		{
			MethodName: "TakeDownAppScript",
			Handler:    _Applications_TakeDownAppScript_Handler,
		},
		{
			MethodName: "AppStoreListing",
			Handler:    _Applications_AppStoreListing_Handler,
		},
		{
			MethodName: "AppStoreDetail",
			Handler:    _Applications_AppStoreDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "applications.proto",
}
