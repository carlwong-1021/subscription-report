// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: media.proto

package developer_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Media_Create_FullMethodName = "/DeveloperApi.Media/Create"
)

// MediaClient is the client API for Media service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediaClient interface {
	Create(ctx context.Context, opts ...grpc.CallOption) (Media_CreateClient, error)
}

type mediaClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaClient(cc grpc.ClientConnInterface) MediaClient {
	return &mediaClient{cc}
}

func (c *mediaClient) Create(ctx context.Context, opts ...grpc.CallOption) (Media_CreateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Media_ServiceDesc.Streams[0], Media_Create_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &mediaCreateClient{stream}
	return x, nil
}

type Media_CreateClient interface {
	Send(*MediaRequest) error
	CloseAndRecv() (*MediaResponse, error)
	grpc.ClientStream
}

type mediaCreateClient struct {
	grpc.ClientStream
}

func (x *mediaCreateClient) Send(m *MediaRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mediaCreateClient) CloseAndRecv() (*MediaResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MediaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MediaServer is the server API for Media service.
// All implementations must embed UnimplementedMediaServer
// for forward compatibility
type MediaServer interface {
	Create(Media_CreateServer) error
	mustEmbedUnimplementedMediaServer()
}

// UnimplementedMediaServer must be embedded to have forward compatible implementations.
type UnimplementedMediaServer struct {
}

func (UnimplementedMediaServer) Create(Media_CreateServer) error {
	return status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMediaServer) mustEmbedUnimplementedMediaServer() {}

// UnsafeMediaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaServer will
// result in compilation errors.
type UnsafeMediaServer interface {
	mustEmbedUnimplementedMediaServer()
}

func RegisterMediaServer(s grpc.ServiceRegistrar, srv MediaServer) {
	s.RegisterService(&Media_ServiceDesc, srv)
}

func _Media_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MediaServer).Create(&mediaCreateServer{stream})
}

type Media_CreateServer interface {
	SendAndClose(*MediaResponse) error
	Recv() (*MediaRequest, error)
	grpc.ServerStream
}

type mediaCreateServer struct {
	grpc.ServerStream
}

func (x *mediaCreateServer) SendAndClose(m *MediaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mediaCreateServer) Recv() (*MediaRequest, error) {
	m := new(MediaRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Media_ServiceDesc is the grpc.ServiceDesc for Media service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Media_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DeveloperApi.Media",
	HandlerType: (*MediaServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Create",
			Handler:       _Media_Create_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "media.proto",
}
