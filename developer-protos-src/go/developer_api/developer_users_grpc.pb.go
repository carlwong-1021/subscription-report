// developer_users.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: developer_users.proto

package developer_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeveloperUsers_Index_FullMethodName              = "/DeveloperApi.DeveloperUsers/Index"
	DeveloperUsers_Create_FullMethodName             = "/DeveloperApi.DeveloperUsers/Create"
	DeveloperUsers_Delete_FullMethodName             = "/DeveloperApi.DeveloperUsers/Delete"
	DeveloperUsers_Update_FullMethodName             = "/DeveloperApi.DeveloperUsers/Update"
	DeveloperUsers_GetDeveloperUser_FullMethodName   = "/DeveloperApi.DeveloperUsers/GetDeveloperUser"
	DeveloperUsers_ListPermissions_FullMethodName    = "/DeveloperApi.DeveloperUsers/ListPermissions"
	DeveloperUsers_ListDeveloperUsers_FullMethodName = "/DeveloperApi.DeveloperUsers/ListDeveloperUsers"
	DeveloperUsers_InviteMember_FullMethodName       = "/DeveloperApi.DeveloperUsers/InviteMember"
	DeveloperUsers_AcceptInvitation_FullMethodName   = "/DeveloperApi.DeveloperUsers/AcceptInvitation"
)

// DeveloperUsersClient is the client API for DeveloperUsers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeveloperUsersClient interface {
	Index(ctx context.Context, in *DeveloperUserIndexRequest, opts ...grpc.CallOption) (*DeveloperUserIndexReply, error)
	Create(ctx context.Context, in *DeveloperUserCreateRequest, opts ...grpc.CallOption) (*DeveloperUserEmptyReply, error)
	Delete(ctx context.Context, in *DeveloperUserDeleteRequest, opts ...grpc.CallOption) (*DeveloperUserEmptyReply, error)
	Update(ctx context.Context, in *DeveloperUserUpdateRequest, opts ...grpc.CallOption) (*DeveloperUserWithUserInfo, error)
	GetDeveloperUser(ctx context.Context, in *GetDeveloperUserRequest, opts ...grpc.CallOption) (*DeveloperUserWithUserInfo, error)
	ListPermissions(ctx context.Context, in *DeveloperUserEmptyRequest, opts ...grpc.CallOption) (*DeveloperUserPermissionListReply, error)
	ListDeveloperUsers(ctx context.Context, in *ListDeveloperUsersRequest, opts ...grpc.CallOption) (*ListDeveloperUsersReply, error)
	InviteMember(ctx context.Context, in *InviteMemberRequest, opts ...grpc.CallOption) (*DeveloperUserWithUserInfo, error)
	AcceptInvitation(ctx context.Context, in *AcceptInvitationRequest, opts ...grpc.CallOption) (*AcceptInvitationReply, error)
}

type developerUsersClient struct {
	cc grpc.ClientConnInterface
}

func NewDeveloperUsersClient(cc grpc.ClientConnInterface) DeveloperUsersClient {
	return &developerUsersClient{cc}
}

func (c *developerUsersClient) Index(ctx context.Context, in *DeveloperUserIndexRequest, opts ...grpc.CallOption) (*DeveloperUserIndexReply, error) {
	out := new(DeveloperUserIndexReply)
	err := c.cc.Invoke(ctx, DeveloperUsers_Index_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerUsersClient) Create(ctx context.Context, in *DeveloperUserCreateRequest, opts ...grpc.CallOption) (*DeveloperUserEmptyReply, error) {
	out := new(DeveloperUserEmptyReply)
	err := c.cc.Invoke(ctx, DeveloperUsers_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerUsersClient) Delete(ctx context.Context, in *DeveloperUserDeleteRequest, opts ...grpc.CallOption) (*DeveloperUserEmptyReply, error) {
	out := new(DeveloperUserEmptyReply)
	err := c.cc.Invoke(ctx, DeveloperUsers_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerUsersClient) Update(ctx context.Context, in *DeveloperUserUpdateRequest, opts ...grpc.CallOption) (*DeveloperUserWithUserInfo, error) {
	out := new(DeveloperUserWithUserInfo)
	err := c.cc.Invoke(ctx, DeveloperUsers_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerUsersClient) GetDeveloperUser(ctx context.Context, in *GetDeveloperUserRequest, opts ...grpc.CallOption) (*DeveloperUserWithUserInfo, error) {
	out := new(DeveloperUserWithUserInfo)
	err := c.cc.Invoke(ctx, DeveloperUsers_GetDeveloperUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerUsersClient) ListPermissions(ctx context.Context, in *DeveloperUserEmptyRequest, opts ...grpc.CallOption) (*DeveloperUserPermissionListReply, error) {
	out := new(DeveloperUserPermissionListReply)
	err := c.cc.Invoke(ctx, DeveloperUsers_ListPermissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerUsersClient) ListDeveloperUsers(ctx context.Context, in *ListDeveloperUsersRequest, opts ...grpc.CallOption) (*ListDeveloperUsersReply, error) {
	out := new(ListDeveloperUsersReply)
	err := c.cc.Invoke(ctx, DeveloperUsers_ListDeveloperUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerUsersClient) InviteMember(ctx context.Context, in *InviteMemberRequest, opts ...grpc.CallOption) (*DeveloperUserWithUserInfo, error) {
	out := new(DeveloperUserWithUserInfo)
	err := c.cc.Invoke(ctx, DeveloperUsers_InviteMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerUsersClient) AcceptInvitation(ctx context.Context, in *AcceptInvitationRequest, opts ...grpc.CallOption) (*AcceptInvitationReply, error) {
	out := new(AcceptInvitationReply)
	err := c.cc.Invoke(ctx, DeveloperUsers_AcceptInvitation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeveloperUsersServer is the server API for DeveloperUsers service.
// All implementations must embed UnimplementedDeveloperUsersServer
// for forward compatibility
type DeveloperUsersServer interface {
	Index(context.Context, *DeveloperUserIndexRequest) (*DeveloperUserIndexReply, error)
	Create(context.Context, *DeveloperUserCreateRequest) (*DeveloperUserEmptyReply, error)
	Delete(context.Context, *DeveloperUserDeleteRequest) (*DeveloperUserEmptyReply, error)
	Update(context.Context, *DeveloperUserUpdateRequest) (*DeveloperUserWithUserInfo, error)
	GetDeveloperUser(context.Context, *GetDeveloperUserRequest) (*DeveloperUserWithUserInfo, error)
	ListPermissions(context.Context, *DeveloperUserEmptyRequest) (*DeveloperUserPermissionListReply, error)
	ListDeveloperUsers(context.Context, *ListDeveloperUsersRequest) (*ListDeveloperUsersReply, error)
	InviteMember(context.Context, *InviteMemberRequest) (*DeveloperUserWithUserInfo, error)
	AcceptInvitation(context.Context, *AcceptInvitationRequest) (*AcceptInvitationReply, error)
	mustEmbedUnimplementedDeveloperUsersServer()
}

// UnimplementedDeveloperUsersServer must be embedded to have forward compatible implementations.
type UnimplementedDeveloperUsersServer struct {
}

func (UnimplementedDeveloperUsersServer) Index(context.Context, *DeveloperUserIndexRequest) (*DeveloperUserIndexReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Index not implemented")
}
func (UnimplementedDeveloperUsersServer) Create(context.Context, *DeveloperUserCreateRequest) (*DeveloperUserEmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDeveloperUsersServer) Delete(context.Context, *DeveloperUserDeleteRequest) (*DeveloperUserEmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDeveloperUsersServer) Update(context.Context, *DeveloperUserUpdateRequest) (*DeveloperUserWithUserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDeveloperUsersServer) GetDeveloperUser(context.Context, *GetDeveloperUserRequest) (*DeveloperUserWithUserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeveloperUser not implemented")
}
func (UnimplementedDeveloperUsersServer) ListPermissions(context.Context, *DeveloperUserEmptyRequest) (*DeveloperUserPermissionListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissions not implemented")
}
func (UnimplementedDeveloperUsersServer) ListDeveloperUsers(context.Context, *ListDeveloperUsersRequest) (*ListDeveloperUsersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeveloperUsers not implemented")
}
func (UnimplementedDeveloperUsersServer) InviteMember(context.Context, *InviteMemberRequest) (*DeveloperUserWithUserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteMember not implemented")
}
func (UnimplementedDeveloperUsersServer) AcceptInvitation(context.Context, *AcceptInvitationRequest) (*AcceptInvitationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvitation not implemented")
}
func (UnimplementedDeveloperUsersServer) mustEmbedUnimplementedDeveloperUsersServer() {}

// UnsafeDeveloperUsersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeveloperUsersServer will
// result in compilation errors.
type UnsafeDeveloperUsersServer interface {
	mustEmbedUnimplementedDeveloperUsersServer()
}

func RegisterDeveloperUsersServer(s grpc.ServiceRegistrar, srv DeveloperUsersServer) {
	s.RegisterService(&DeveloperUsers_ServiceDesc, srv)
}

func _DeveloperUsers_Index_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeveloperUserIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperUsersServer).Index(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperUsers_Index_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperUsersServer).Index(ctx, req.(*DeveloperUserIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperUsers_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeveloperUserCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperUsersServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperUsers_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperUsersServer).Create(ctx, req.(*DeveloperUserCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperUsers_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeveloperUserDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperUsersServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperUsers_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperUsersServer).Delete(ctx, req.(*DeveloperUserDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperUsers_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeveloperUserUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperUsersServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperUsers_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperUsersServer).Update(ctx, req.(*DeveloperUserUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperUsers_GetDeveloperUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeveloperUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperUsersServer).GetDeveloperUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperUsers_GetDeveloperUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperUsersServer).GetDeveloperUser(ctx, req.(*GetDeveloperUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperUsers_ListPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeveloperUserEmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperUsersServer).ListPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperUsers_ListPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperUsersServer).ListPermissions(ctx, req.(*DeveloperUserEmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperUsers_ListDeveloperUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeveloperUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperUsersServer).ListDeveloperUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperUsers_ListDeveloperUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperUsersServer).ListDeveloperUsers(ctx, req.(*ListDeveloperUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperUsers_InviteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperUsersServer).InviteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperUsers_InviteMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperUsersServer).InviteMember(ctx, req.(*InviteMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeveloperUsers_AcceptInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeveloperUsersServer).AcceptInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeveloperUsers_AcceptInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeveloperUsersServer).AcceptInvitation(ctx, req.(*AcceptInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeveloperUsers_ServiceDesc is the grpc.ServiceDesc for DeveloperUsers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeveloperUsers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DeveloperApi.DeveloperUsers",
	HandlerType: (*DeveloperUsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Index",
			Handler:    _DeveloperUsers_Index_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _DeveloperUsers_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DeveloperUsers_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DeveloperUsers_Update_Handler,
		},
		{
			MethodName: "GetDeveloperUser",
			Handler:    _DeveloperUsers_GetDeveloperUser_Handler,
		},
		{
			MethodName: "ListPermissions",
			Handler:    _DeveloperUsers_ListPermissions_Handler,
		},
		{
			MethodName: "ListDeveloperUsers",
			Handler:    _DeveloperUsers_ListDeveloperUsers_Handler,
		},
		{
			MethodName: "InviteMember",
			Handler:    _DeveloperUsers_InviteMember_Handler,
		},
		{
			MethodName: "AcceptInvitation",
			Handler:    _DeveloperUsers_AcceptInvitation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "developer_users.proto",
}
