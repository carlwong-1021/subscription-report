// application_subscription.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: application_subscriptions.proto

package developer_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ApplicationSubscriptions_Index_FullMethodName                   = "/DeveloperApi.ApplicationSubscriptions/Index"
	ApplicationSubscriptions_Show_FullMethodName                    = "/DeveloperApi.ApplicationSubscriptions/Show"
	ApplicationSubscriptions_Create_FullMethodName                  = "/DeveloperApi.ApplicationSubscriptions/Create"
	ApplicationSubscriptions_Update_FullMethodName                  = "/DeveloperApi.ApplicationSubscriptions/Update"
	ApplicationSubscriptions_TerminateTrial_FullMethodName          = "/DeveloperApi.ApplicationSubscriptions/TerminateTrial"
	ApplicationSubscriptions_ListSubscriptionReports_FullMethodName = "/DeveloperApi.ApplicationSubscriptions/ListSubscriptionReports"
)

// ApplicationSubscriptionsClient is the client API for ApplicationSubscriptions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationSubscriptionsClient interface {
	Index(ctx context.Context, in *ApplicationSubscriptionIndexRequest, opts ...grpc.CallOption) (*ApplicationSubscriptionIndexReply, error)
	Show(ctx context.Context, in *ApplicationSubscriptionShowRequest, opts ...grpc.CallOption) (*ApplicationSubscription, error)
	Create(ctx context.Context, in *ApplicationSubscriptionCreateRequest, opts ...grpc.CallOption) (*ApplicationSubscription, error)
	Update(ctx context.Context, in *ApplicationSubscriptionCreateRequest, opts ...grpc.CallOption) (*ApplicationSubscription, error)
	TerminateTrial(ctx context.Context, in *TerminateTrialRequest, opts ...grpc.CallOption) (*ApplicationSubscriptionEmptyReply, error)
	ListSubscriptionReports(ctx context.Context, in *ListSubscriptionReportsRequest, opts ...grpc.CallOption) (*ListSubscriptionReportsReply, error)
}

type applicationSubscriptionsClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationSubscriptionsClient(cc grpc.ClientConnInterface) ApplicationSubscriptionsClient {
	return &applicationSubscriptionsClient{cc}
}

func (c *applicationSubscriptionsClient) Index(ctx context.Context, in *ApplicationSubscriptionIndexRequest, opts ...grpc.CallOption) (*ApplicationSubscriptionIndexReply, error) {
	out := new(ApplicationSubscriptionIndexReply)
	err := c.cc.Invoke(ctx, ApplicationSubscriptions_Index_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationSubscriptionsClient) Show(ctx context.Context, in *ApplicationSubscriptionShowRequest, opts ...grpc.CallOption) (*ApplicationSubscription, error) {
	out := new(ApplicationSubscription)
	err := c.cc.Invoke(ctx, ApplicationSubscriptions_Show_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationSubscriptionsClient) Create(ctx context.Context, in *ApplicationSubscriptionCreateRequest, opts ...grpc.CallOption) (*ApplicationSubscription, error) {
	out := new(ApplicationSubscription)
	err := c.cc.Invoke(ctx, ApplicationSubscriptions_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationSubscriptionsClient) Update(ctx context.Context, in *ApplicationSubscriptionCreateRequest, opts ...grpc.CallOption) (*ApplicationSubscription, error) {
	out := new(ApplicationSubscription)
	err := c.cc.Invoke(ctx, ApplicationSubscriptions_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationSubscriptionsClient) TerminateTrial(ctx context.Context, in *TerminateTrialRequest, opts ...grpc.CallOption) (*ApplicationSubscriptionEmptyReply, error) {
	out := new(ApplicationSubscriptionEmptyReply)
	err := c.cc.Invoke(ctx, ApplicationSubscriptions_TerminateTrial_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationSubscriptionsClient) ListSubscriptionReports(ctx context.Context, in *ListSubscriptionReportsRequest, opts ...grpc.CallOption) (*ListSubscriptionReportsReply, error) {
	out := new(ListSubscriptionReportsReply)
	err := c.cc.Invoke(ctx, ApplicationSubscriptions_ListSubscriptionReports_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationSubscriptionsServer is the server API for ApplicationSubscriptions service.
// All implementations must embed UnimplementedApplicationSubscriptionsServer
// for forward compatibility
type ApplicationSubscriptionsServer interface {
	Index(context.Context, *ApplicationSubscriptionIndexRequest) (*ApplicationSubscriptionIndexReply, error)
	Show(context.Context, *ApplicationSubscriptionShowRequest) (*ApplicationSubscription, error)
	Create(context.Context, *ApplicationSubscriptionCreateRequest) (*ApplicationSubscription, error)
	Update(context.Context, *ApplicationSubscriptionCreateRequest) (*ApplicationSubscription, error)
	TerminateTrial(context.Context, *TerminateTrialRequest) (*ApplicationSubscriptionEmptyReply, error)
	ListSubscriptionReports(context.Context, *ListSubscriptionReportsRequest) (*ListSubscriptionReportsReply, error)
	mustEmbedUnimplementedApplicationSubscriptionsServer()
}

// UnimplementedApplicationSubscriptionsServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationSubscriptionsServer struct {
}

func (UnimplementedApplicationSubscriptionsServer) Index(context.Context, *ApplicationSubscriptionIndexRequest) (*ApplicationSubscriptionIndexReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Index not implemented")
}
func (UnimplementedApplicationSubscriptionsServer) Show(context.Context, *ApplicationSubscriptionShowRequest) (*ApplicationSubscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Show not implemented")
}
func (UnimplementedApplicationSubscriptionsServer) Create(context.Context, *ApplicationSubscriptionCreateRequest) (*ApplicationSubscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedApplicationSubscriptionsServer) Update(context.Context, *ApplicationSubscriptionCreateRequest) (*ApplicationSubscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedApplicationSubscriptionsServer) TerminateTrial(context.Context, *TerminateTrialRequest) (*ApplicationSubscriptionEmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateTrial not implemented")
}
func (UnimplementedApplicationSubscriptionsServer) ListSubscriptionReports(context.Context, *ListSubscriptionReportsRequest) (*ListSubscriptionReportsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscriptionReports not implemented")
}
func (UnimplementedApplicationSubscriptionsServer) mustEmbedUnimplementedApplicationSubscriptionsServer() {
}

// UnsafeApplicationSubscriptionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationSubscriptionsServer will
// result in compilation errors.
type UnsafeApplicationSubscriptionsServer interface {
	mustEmbedUnimplementedApplicationSubscriptionsServer()
}

func RegisterApplicationSubscriptionsServer(s grpc.ServiceRegistrar, srv ApplicationSubscriptionsServer) {
	s.RegisterService(&ApplicationSubscriptions_ServiceDesc, srv)
}

func _ApplicationSubscriptions_Index_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationSubscriptionIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationSubscriptionsServer).Index(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationSubscriptions_Index_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationSubscriptionsServer).Index(ctx, req.(*ApplicationSubscriptionIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationSubscriptions_Show_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationSubscriptionShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationSubscriptionsServer).Show(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationSubscriptions_Show_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationSubscriptionsServer).Show(ctx, req.(*ApplicationSubscriptionShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationSubscriptions_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationSubscriptionCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationSubscriptionsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationSubscriptions_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationSubscriptionsServer).Create(ctx, req.(*ApplicationSubscriptionCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationSubscriptions_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationSubscriptionCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationSubscriptionsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationSubscriptions_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationSubscriptionsServer).Update(ctx, req.(*ApplicationSubscriptionCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationSubscriptions_TerminateTrial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateTrialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationSubscriptionsServer).TerminateTrial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationSubscriptions_TerminateTrial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationSubscriptionsServer).TerminateTrial(ctx, req.(*TerminateTrialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationSubscriptions_ListSubscriptionReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubscriptionReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationSubscriptionsServer).ListSubscriptionReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationSubscriptions_ListSubscriptionReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationSubscriptionsServer).ListSubscriptionReports(ctx, req.(*ListSubscriptionReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApplicationSubscriptions_ServiceDesc is the grpc.ServiceDesc for ApplicationSubscriptions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApplicationSubscriptions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DeveloperApi.ApplicationSubscriptions",
	HandlerType: (*ApplicationSubscriptionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Index",
			Handler:    _ApplicationSubscriptions_Index_Handler,
		},
		{
			MethodName: "Show",
			Handler:    _ApplicationSubscriptions_Show_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ApplicationSubscriptions_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ApplicationSubscriptions_Update_Handler,
		},
		{
			MethodName: "TerminateTrial",
			Handler:    _ApplicationSubscriptions_TerminateTrial_Handler,
		},
		{
			MethodName: "ListSubscriptionReports",
			Handler:    _ApplicationSubscriptions_ListSubscriptionReports_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "application_subscriptions.proto",
}
