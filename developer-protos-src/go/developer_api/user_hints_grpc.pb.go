// user_hints.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: user_hints.proto

package developer_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserHints_Index_FullMethodName      = "/DeveloperApi.UserHints/Index"
	UserHints_Upsert_FullMethodName     = "/DeveloperApi.UserHints/Upsert"
	UserHints_UpdateMany_FullMethodName = "/DeveloperApi.UserHints/UpdateMany"
)

// UserHintsClient is the client API for UserHints service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserHintsClient interface {
	Index(ctx context.Context, in *UserHintIndexRequest, opts ...grpc.CallOption) (*UserHintIndexReply, error)
	Upsert(ctx context.Context, in *UserHint, opts ...grpc.CallOption) (*UserHint, error)
	UpdateMany(ctx context.Context, in *UserHint, opts ...grpc.CallOption) (*UserHint, error)
}

type userHintsClient struct {
	cc grpc.ClientConnInterface
}

func NewUserHintsClient(cc grpc.ClientConnInterface) UserHintsClient {
	return &userHintsClient{cc}
}

func (c *userHintsClient) Index(ctx context.Context, in *UserHintIndexRequest, opts ...grpc.CallOption) (*UserHintIndexReply, error) {
	out := new(UserHintIndexReply)
	err := c.cc.Invoke(ctx, UserHints_Index_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userHintsClient) Upsert(ctx context.Context, in *UserHint, opts ...grpc.CallOption) (*UserHint, error) {
	out := new(UserHint)
	err := c.cc.Invoke(ctx, UserHints_Upsert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userHintsClient) UpdateMany(ctx context.Context, in *UserHint, opts ...grpc.CallOption) (*UserHint, error) {
	out := new(UserHint)
	err := c.cc.Invoke(ctx, UserHints_UpdateMany_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserHintsServer is the server API for UserHints service.
// All implementations must embed UnimplementedUserHintsServer
// for forward compatibility
type UserHintsServer interface {
	Index(context.Context, *UserHintIndexRequest) (*UserHintIndexReply, error)
	Upsert(context.Context, *UserHint) (*UserHint, error)
	UpdateMany(context.Context, *UserHint) (*UserHint, error)
	mustEmbedUnimplementedUserHintsServer()
}

// UnimplementedUserHintsServer must be embedded to have forward compatible implementations.
type UnimplementedUserHintsServer struct {
}

func (UnimplementedUserHintsServer) Index(context.Context, *UserHintIndexRequest) (*UserHintIndexReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Index not implemented")
}
func (UnimplementedUserHintsServer) Upsert(context.Context, *UserHint) (*UserHint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (UnimplementedUserHintsServer) UpdateMany(context.Context, *UserHint) (*UserHint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMany not implemented")
}
func (UnimplementedUserHintsServer) mustEmbedUnimplementedUserHintsServer() {}

// UnsafeUserHintsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserHintsServer will
// result in compilation errors.
type UnsafeUserHintsServer interface {
	mustEmbedUnimplementedUserHintsServer()
}

func RegisterUserHintsServer(s grpc.ServiceRegistrar, srv UserHintsServer) {
	s.RegisterService(&UserHints_ServiceDesc, srv)
}

func _UserHints_Index_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserHintIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserHintsServer).Index(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserHints_Index_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserHintsServer).Index(ctx, req.(*UserHintIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserHints_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserHint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserHintsServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserHints_Upsert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserHintsServer).Upsert(ctx, req.(*UserHint))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserHints_UpdateMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserHint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserHintsServer).UpdateMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserHints_UpdateMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserHintsServer).UpdateMany(ctx, req.(*UserHint))
	}
	return interceptor(ctx, in, info, handler)
}

// UserHints_ServiceDesc is the grpc.ServiceDesc for UserHints service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserHints_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DeveloperApi.UserHints",
	HandlerType: (*UserHintsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Index",
			Handler:    _UserHints_Index_Handler,
		},
		{
			MethodName: "Upsert",
			Handler:    _UserHints_Upsert_Handler,
		},
		{
			MethodName: "UpdateMany",
			Handler:    _UserHints_UpdateMany_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_hints.proto",
}
